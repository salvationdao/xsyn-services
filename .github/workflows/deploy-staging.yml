name: Staging Deployment

on:
  push:
    branches: [staging]

env:
  GO_VERSION: 1.17.7

jobs:
  cd:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - uses: actions/setup-go@v2 # install go
        with:
          go-version: ${{env.GO_VERSION}}
      # Setup
      # Multi key private go repos
      # https://gist.github.com/jrapoport/d12f60029eef017354d0ec982b918258
      - name: Setup go private repos access
        run: |
          mkdir -p ~/.ssh
          echo -e "Host hub.github.com\n  HostName github.com\n IdentityFile ~/.ssh/id_ed25519_hub\n  IdentitiesOnly yes" >> ~/.ssh/config
          echo -e "Host bridge.github.com\n  HostName github.com\n IdentityFile ~/.ssh/id_ed25519_bridge\n  IdentitiesOnly yes" >> ~/.ssh/config
          echo '${{ secrets.GH_DEPLOY_HUB_PK }}' > ~/.ssh/id_ed25519_hub
          chmod 600 ~/.ssh/id_ed25519_hub
          echo '${{ secrets.GH_DEPLOY_BRIDGE_PK }}' > ~/.ssh/id_ed25519_bridge
          chmod 600 ~/.ssh/id_ed25519_bridge
          git config --global user.name "Github CI"
          git config --global user.email "team@syndicate.ninja"
          git config --global --add url."git@hub.github.com:ninja-syndicate/hub".insteadOf "https://github.com/ninja-syndicate/hub"
          git config --global --add url."git@bridge.github.com:ninja-syndicate/supremacy-bridge".insteadOf "https://github.com/ninja-syndicate/supremacy-bridge"

      - name: calculate version increment
        run: |
          NEWVER=$(scripts/increment_git_ver.sh)
          git tag "$NEWVER"
          echo "GITVERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "GITHASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "GITBRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "BUILDDATE=$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "GITSTATE=$(git status --porcelain | wc -l)" >> $GITHUB_ENV

      - name: Setup build env
        run: |
          export GOPRIVATE="github.com/ninja-syndicate/*"
          mkdir -p bin
          make tools

      # Server
      - name: Copy dependants
        run: |
          mkdir -p deploy
          cp bin/migrate deploy/.
          cp -r ./init deploy/.
          cp -r ./scripts deploy/.
          cp -r ./configs deploy/.
          cp -r ./asset deploy/.
          cp -r ./db/migrations deploy/.

      - name: Build API server
        run: |
          go build \
            -ldflags "-X main.Version=${{env.GITVERSION}} -X main.GitHash=${{env.GITHASH}} -X main.GitBranch=${{env.GITBRANCH}} -X main.BuildDate=${{env.BUILDDATE}} -X main.UnCommittedFiles=${{env.GITSTATE}}" \
            -o deploy/passport-api \
            cmd/platform/main.go

      - name: Add info text
        run: |
          deploy/passport-api version full > deploy/BuildInfo.txt

      - name: Update tags
        run: |
          git push
          git push --tags

      # Send to server
      - name: List deploy dir
        run: find deploy

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo -e "Host ${{ secrets.STAGING_SSH_HOST }}\n  User ${{ secrets.STAGING_SSH_USER }}\n  Port ${{ secrets.STAGING_SSH_PORT }}" >> ~/.ssh/config
          echo '${{ secrets.STAGING_SSH_KNOWN_HOSTS }}' > ~/.ssh/known_hosts
          echo '${{ secrets.STAGING_SSH_PKEY }}' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Rsync to server
        if: ${{ !env.ACT }} # if running in local test environment
        run: rsync -av deploy/ ${{ secrets.STAGING_SSH_HOST }}:/usr/share/ninja_syndicate/passport-api_${{env.GITVERSION}}

      - name: Copy previous config
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_HOST }} 'cp /usr/share/ninja_syndicate/passport-online/init/passport-staging.env /usr/share/ninja_syndicate/passport-api_${{env.GITVERSION}}/init/passport-staging.env && cp /usr/share/ninja_syndicate/passport-online/init/passport-staging.env ~/.ssh/environment'

      # - name: "DB: Backup" # Run this before changing the link
      #   if: ${{ !env.ACT }} # if running in local test environment
      #   run: ssh ${{ secrets.STAGING_SSH_HOST }} 'mkdir -p /usr/share/ninja_syndicate/passport-online/db_backup && \
      #     /usr/bin/pg_dump postgres://$PASSPORT_DATABASE_USER:$PASSPORT_DATABASE_PASS@$PASSPORT_DATABASE_HOST:$PASSPORT_DATABASE_PORT/$PASSPORT_DATABASE_NAME?sslmode=disable > "/usr/share/ninja_syndicate/passport-online/db_backup/passport-api_$(date -Is).sql"'

      - name: Bring new version online
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_HOST }} 'ln -Tfsv /usr/share/ninja_syndicate/passport-api_${{env.GITVERSION}} /usr/share/ninja_syndicate/passport-online'

      - name: "DB: drop"
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_HOST }} 'cd /usr/share/ninja_syndicate/passport-online && source ./init/passport-staging.env && ./migrate -database "postgres://$PASSPORT_DATABASE_USER:$PASSPORT_DATABASE_PASS@$PASSPORT_DATABASE_HOST:$PASSPORT_DATABASE_PORT/$PASSPORT_DATABASE_NAME?sslmode=disable" -path ./migrations drop -f'

      - name: "DB: up"
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_HOST }} 'cd /usr/share/ninja_syndicate/passport-online && source ./init/passport-staging.env && ./migrate -database "postgres://$PASSPORT_DATABASE_USER:$PASSPORT_DATABASE_PASS@$PASSPORT_DATABASE_HOST:$PASSPORT_DATABASE_PORT/$PASSPORT_DATABASE_NAME?sslmode=disable" -path ./migrations up'

      - name: "DB: seed"
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_HOST }} 'cd /usr/share/ninja_syndicate/passport-online && source ./init/passport-staging.env && ./passport-api db --database_user=$PASSPORT_DATABASE_USER --database_pass=$PASSPORT_DATABASE_PASS --database_host=$PASSPORT_DATABASE_HOST --database_port=$PASSPORT_DATABASE_PORT --database_name=$PASSPORT_DATABASE_NAME --database_tx_user=$PASSPORT_DATABASE_TX_USER --database_tx_pass=$PASSPORT_DATABASE_TX_PASS'

      - name: restart api-server
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} 'sudo systemctl daemon-reload && sudo systemctl restart passport.service'

      - name: restart web-server
        if: ${{ !env.ACT }} # if running in local test environment
        run: ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} 'sudo nginx -t && sudo nginx -s reload'
