// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Battle is an object representing the database table.
type Battle struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Identifier       int         `boiler:"identifier" boil:"identifier" json:"identifier" toml:"identifier" yaml:"identifier"`
	GameMapID        string      `boiler:"game_map_id" boil:"game_map_id" json:"gameMapID" toml:"gameMapID" yaml:"gameMapID"`
	WinningCondition null.String `boiler:"winning_condition" boil:"winning_condition" json:"winningCondition,omitempty" toml:"winningCondition" yaml:"winningCondition,omitempty"`
	StartedAt        time.Time   `boiler:"started_at" boil:"started_at" json:"startedAt" toml:"startedAt" yaml:"startedAt"`
	EndedAt          null.Time   `boiler:"ended_at" boil:"ended_at" json:"endedAt,omitempty" toml:"endedAt" yaml:"endedAt,omitempty"`

	R *battleR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleColumns = struct {
	ID               string
	Identifier       string
	GameMapID        string
	WinningCondition string
	StartedAt        string
	EndedAt          string
}{
	ID:               "id",
	Identifier:       "identifier",
	GameMapID:        "game_map_id",
	WinningCondition: "winning_condition",
	StartedAt:        "started_at",
	EndedAt:          "ended_at",
}

var BattleTableColumns = struct {
	ID               string
	Identifier       string
	GameMapID        string
	WinningCondition string
	StartedAt        string
	EndedAt          string
}{
	ID:               "battles.id",
	Identifier:       "battles.identifier",
	GameMapID:        "battles.game_map_id",
	WinningCondition: "battles.winning_condition",
	StartedAt:        "battles.started_at",
	EndedAt:          "battles.ended_at",
}

// Generated where

var BattleWhere = struct {
	ID               whereHelperstring
	Identifier       whereHelperint
	GameMapID        whereHelperstring
	WinningCondition whereHelpernull_String
	StartedAt        whereHelpertime_Time
	EndedAt          whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"battles\".\"id\""},
	Identifier:       whereHelperint{field: "\"battles\".\"identifier\""},
	GameMapID:        whereHelperstring{field: "\"battles\".\"game_map_id\""},
	WinningCondition: whereHelpernull_String{field: "\"battles\".\"winning_condition\""},
	StartedAt:        whereHelpertime_Time{field: "\"battles\".\"started_at\""},
	EndedAt:          whereHelpernull_Time{field: "\"battles\".\"ended_at\""},
}

// BattleRels is where relationship names are stored.
var BattleRels = struct {
	GameMap               string
	BattleEvents          string
	BattlesUserVotes      string
	IssuedContractRewards string
}{
	GameMap:               "GameMap",
	BattleEvents:          "BattleEvents",
	BattlesUserVotes:      "BattlesUserVotes",
	IssuedContractRewards: "IssuedContractRewards",
}

// battleR is where relationships are stored.
type battleR struct {
	GameMap               *GameMap                  `boiler:"GameMap" boil:"GameMap" json:"GameMap" toml:"GameMap" yaml:"GameMap"`
	BattleEvents          BattleEventSlice          `boiler:"BattleEvents" boil:"BattleEvents" json:"BattleEvents" toml:"BattleEvents" yaml:"BattleEvents"`
	BattlesUserVotes      BattlesUserVoteSlice      `boiler:"BattlesUserVotes" boil:"BattlesUserVotes" json:"BattlesUserVotes" toml:"BattlesUserVotes" yaml:"BattlesUserVotes"`
	IssuedContractRewards IssuedContractRewardSlice `boiler:"IssuedContractRewards" boil:"IssuedContractRewards" json:"IssuedContractRewards" toml:"IssuedContractRewards" yaml:"IssuedContractRewards"`
}

// NewStruct creates a new relationship struct
func (*battleR) NewStruct() *battleR {
	return &battleR{}
}

// battleL is where Load methods for each relationship are stored.
type battleL struct{}

var (
	battleAllColumns            = []string{"id", "identifier", "game_map_id", "winning_condition", "started_at", "ended_at"}
	battleColumnsWithoutDefault = []string{"game_map_id", "winning_condition", "ended_at"}
	battleColumnsWithDefault    = []string{"id", "identifier", "started_at"}
	battlePrimaryKeyColumns     = []string{"id"}
)

type (
	// BattleSlice is an alias for a slice of pointers to Battle.
	// This should almost always be used instead of []Battle.
	BattleSlice []*Battle
	// BattleHook is the signature for custom Battle hook methods
	BattleHook func(boil.Executor, *Battle) error

	battleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleType                 = reflect.TypeOf(&Battle{})
	battleMapping              = queries.MakeStructMapping(battleType)
	battlePrimaryKeyMapping, _ = queries.BindMapping(battleType, battleMapping, battlePrimaryKeyColumns)
	battleInsertCacheMut       sync.RWMutex
	battleInsertCache          = make(map[string]insertCache)
	battleUpdateCacheMut       sync.RWMutex
	battleUpdateCache          = make(map[string]updateCache)
	battleUpsertCacheMut       sync.RWMutex
	battleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleBeforeInsertHooks []BattleHook
var battleBeforeUpdateHooks []BattleHook
var battleBeforeDeleteHooks []BattleHook
var battleBeforeUpsertHooks []BattleHook

var battleAfterInsertHooks []BattleHook
var battleAfterSelectHooks []BattleHook
var battleAfterUpdateHooks []BattleHook
var battleAfterDeleteHooks []BattleHook
var battleAfterUpsertHooks []BattleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Battle) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Battle) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Battle) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Battle) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Battle) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Battle) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Battle) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Battle) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Battle) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleHook registers your hook function for all future operations.
func AddBattleHook(hookPoint boil.HookPoint, battleHook BattleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battleBeforeInsertHooks = append(battleBeforeInsertHooks, battleHook)
	case boil.BeforeUpdateHook:
		battleBeforeUpdateHooks = append(battleBeforeUpdateHooks, battleHook)
	case boil.BeforeDeleteHook:
		battleBeforeDeleteHooks = append(battleBeforeDeleteHooks, battleHook)
	case boil.BeforeUpsertHook:
		battleBeforeUpsertHooks = append(battleBeforeUpsertHooks, battleHook)
	case boil.AfterInsertHook:
		battleAfterInsertHooks = append(battleAfterInsertHooks, battleHook)
	case boil.AfterSelectHook:
		battleAfterSelectHooks = append(battleAfterSelectHooks, battleHook)
	case boil.AfterUpdateHook:
		battleAfterUpdateHooks = append(battleAfterUpdateHooks, battleHook)
	case boil.AfterDeleteHook:
		battleAfterDeleteHooks = append(battleAfterDeleteHooks, battleHook)
	case boil.AfterUpsertHook:
		battleAfterUpsertHooks = append(battleAfterUpsertHooks, battleHook)
	}
}

// One returns a single battle record from the query.
func (q battleQuery) One(exec boil.Executor) (*Battle, error) {
	o := &Battle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battles")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Battle records from the query.
func (q battleQuery) All(exec boil.Executor) (BattleSlice, error) {
	var o []*Battle

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Battle slice")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Battle records in the query.
func (q battleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battles exists")
	}

	return count > 0, nil
}

// GameMap pointed to by the foreign key.
func (o *Battle) GameMap(mods ...qm.QueryMod) gameMapQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameMapID),
	}

	queryMods = append(queryMods, mods...)

	query := GameMaps(queryMods...)
	queries.SetFrom(query.Query, "\"game_maps\"")

	return query
}

// BattleEvents retrieves all the battle_event's BattleEvents with an executor.
func (o *Battle) BattleEvents(mods ...qm.QueryMod) battleEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events\".\"battle_id\"=?", o.ID),
	)

	query := BattleEvents(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events\".*"})
	}

	return query
}

// BattlesUserVotes retrieves all the battles_user_vote's BattlesUserVotes with an executor.
func (o *Battle) BattlesUserVotes(mods ...qm.QueryMod) battlesUserVoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battles_user_votes\".\"battle_id\"=?", o.ID),
	)

	query := BattlesUserVotes(queryMods...)
	queries.SetFrom(query.Query, "\"battles_user_votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battles_user_votes\".*"})
	}

	return query
}

// IssuedContractRewards retrieves all the issued_contract_reward's IssuedContractRewards with an executor.
func (o *Battle) IssuedContractRewards(mods ...qm.QueryMod) issuedContractRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"issued_contract_rewards\".\"battle_id\"=?", o.ID),
	)

	query := IssuedContractRewards(queryMods...)
	queries.SetFrom(query.Query, "\"issued_contract_rewards\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"issued_contract_rewards\".*"})
	}

	return query
}

// LoadGameMap allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleL) LoadGameMap(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.GameMapID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.GameMapID {
					continue Outer
				}
			}

			args = append(args, obj.GameMapID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_maps`),
		qm.WhereIn(`game_maps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameMap")
	}

	var resultSlice []*GameMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameMap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_maps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_maps")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameMap = foreign
		if foreign.R == nil {
			foreign.R = &gameMapR{}
		}
		foreign.R.Battles = append(foreign.R.Battles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameMapID == foreign.ID {
				local.R.GameMap = foreign
				if foreign.R == nil {
					foreign.R = &gameMapR{}
				}
				foreign.R.Battles = append(foreign.R.Battles, local)
				break
			}
		}
	}

	return nil
}

// LoadBattleEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleEvents(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events`),
		qm.WhereIn(`battle_events.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events")
	}

	var resultSlice []*BattleEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events")
	}

	if len(battleEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BattleID) {
				local.R.BattleEvents = append(local.R.BattleEvents, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattlesUserVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattlesUserVotes(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles_user_votes`),
		qm.WhereIn(`battles_user_votes.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battles_user_votes")
	}

	var resultSlice []*BattlesUserVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battles_user_votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battles_user_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles_user_votes")
	}

	if len(battlesUserVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattlesUserVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battlesUserVoteR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattlesUserVotes = append(local.R.BattlesUserVotes, foreign)
				if foreign.R == nil {
					foreign.R = &battlesUserVoteR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadIssuedContractRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadIssuedContractRewards(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`issued_contract_rewards`),
		qm.WhereIn(`issued_contract_rewards.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load issued_contract_rewards")
	}

	var resultSlice []*IssuedContractReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice issued_contract_rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on issued_contract_rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for issued_contract_rewards")
	}

	if len(issuedContractRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IssuedContractRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &issuedContractRewardR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.IssuedContractRewards = append(local.R.IssuedContractRewards, foreign)
				if foreign.R == nil {
					foreign.R = &issuedContractRewardR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// SetGameMap of the battle to the related item.
// Sets o.R.GameMap to related.
// Adds o to related.R.Battles.
func (o *Battle) SetGameMap(exec boil.Executor, insert bool, related *GameMap) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_map_id"}),
		strmangle.WhereClause("\"", "\"", 2, battlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameMapID = related.ID
	if o.R == nil {
		o.R = &battleR{
			GameMap: related,
		}
	} else {
		o.R.GameMap = related
	}

	if related.R == nil {
		related.R = &gameMapR{
			Battles: BattleSlice{o},
		}
	} else {
		related.R.Battles = append(related.R.Battles, o)
	}

	return nil
}

// AddBattleEvents adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleEvents.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleEvents(exec boil.Executor, insert bool, related ...*BattleEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleEvents: related,
		}
	} else {
		o.R.BattleEvents = append(o.R.BattleEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// SetBattleEvents removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battle's BattleEvents accordingly.
// Replaces o.R.BattleEvents with related.
// Sets related.R.Battle's BattleEvents accordingly.
func (o *Battle) SetBattleEvents(exec boil.Executor, insert bool, related ...*BattleEvent) error {
	query := "update \"battle_events\" set \"battle_id\" = null where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleEvents {
			queries.SetScanner(&rel.BattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Battle = nil
		}

		o.R.BattleEvents = nil
	}
	return o.AddBattleEvents(exec, insert, related...)
}

// RemoveBattleEvents relationships from objects passed in.
// Removes related items from R.BattleEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Battle.
func (o *Battle) RemoveBattleEvents(exec boil.Executor, related ...*BattleEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleID, nil)
		if rel.R != nil {
			rel.R.Battle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleEvents)
			if ln > 1 && i < ln-1 {
				o.R.BattleEvents[i] = o.R.BattleEvents[ln-1]
			}
			o.R.BattleEvents = o.R.BattleEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddBattlesUserVotes adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattlesUserVotes.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattlesUserVotes(exec boil.Executor, insert bool, related ...*BattlesUserVote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battles_user_votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battlesUserVotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.UserID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattlesUserVotes: related,
		}
	} else {
		o.R.BattlesUserVotes = append(o.R.BattlesUserVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battlesUserVoteR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddIssuedContractRewards adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.IssuedContractRewards.
// Sets related.R.Battle appropriately.
func (o *Battle) AddIssuedContractRewards(exec boil.Executor, insert bool, related ...*IssuedContractReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"issued_contract_rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, issuedContractRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			IssuedContractRewards: related,
		}
	} else {
		o.R.IssuedContractRewards = append(o.R.IssuedContractRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &issuedContractRewardR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// Battles retrieves all the records using an executor.
func Battles(mods ...qm.QueryMod) battleQuery {
	mods = append(mods, qm.From("\"battles\""))
	return battleQuery{NewQuery(mods...)}
}

// FindBattle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattle(exec boil.Executor, iD string, selectCols ...string) (*Battle, error) {
	battleObj := &Battle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battles")
	}

	if err = battleObj.doAfterSelectHooks(exec); err != nil {
		return battleObj, err
	}

	return battleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Battle) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleInsertCacheMut.RLock()
	cache, cached := battleInsertCache[key]
	battleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleAllColumns,
			battleColumnsWithDefault,
			battleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleType, battleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleType, battleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battles")
	}

	if !cached {
		battleInsertCacheMut.Lock()
		battleInsertCache[key] = cache
		battleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Battle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Battle) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleUpdateCacheMut.RLock()
	cache, cached := battleUpdateCache[key]
	battleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleAllColumns,
			battlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleType, battleMapping, append(wl, battlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battles")
	}

	if !cached {
		battleUpdateCacheMut.Lock()
		battleUpdateCache[key] = cache
		battleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battlePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Battle) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleUpsertCacheMut.RLock()
	cache, cached := battleUpsertCache[key]
	battleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleAllColumns,
			battleColumnsWithDefault,
			battleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battleAllColumns,
			battlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battlePrimaryKeyColumns))
			copy(conflict, battlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleType, battleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleType, battleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battles")
	}

	if !cached {
		battleUpsertCacheMut.Lock()
		battleUpsertCache[key] = cache
		battleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Battle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Battle) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Battle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battlePrimaryKeyMapping)
	sql := "DELETE FROM \"battles\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battles")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battles")
	}

	if len(battleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Battle) Reload(exec boil.Executor) error {
	ret, err := FindBattle(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battles\".* FROM \"battles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleSlice")
	}

	*o = slice

	return nil
}

// BattleExists checks if the Battle row exists.
func BattleExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battles\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battles exists")
	}

	return exists, nil
}
