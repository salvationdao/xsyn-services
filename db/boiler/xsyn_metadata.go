// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// XsynMetadatum is an object representing the database table.
type XsynMetadatum struct {
	Name               string              `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	CollectionID       string              `boiler:"collection_id" boil:"collection_id" json:"collectionID" toml:"collectionID" yaml:"collectionID"`
	GameObject         null.JSON           `boiler:"game_object" boil:"game_object" json:"gameObject,omitempty" toml:"gameObject" yaml:"gameObject,omitempty"`
	Description        null.String         `boiler:"description" boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ExternalURL        null.String         `boiler:"external_url" boil:"external_url" json:"externalURL,omitempty" toml:"externalURL" yaml:"externalURL,omitempty"`
	Image              null.String         `boiler:"image" boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	AnimationURL       null.String         `boiler:"animation_url" boil:"animation_url" json:"animationURL,omitempty" toml:"animationURL" yaml:"animationURL,omitempty"`
	Durability         int                 `boiler:"durability" boil:"durability" json:"durability" toml:"durability" yaml:"durability"`
	Attributes         null.JSON           `boiler:"attributes" boil:"attributes" json:"attributes,omitempty" toml:"attributes" yaml:"attributes,omitempty"`
	AdditionalMetadata null.JSON           `boiler:"additional_metadata" boil:"additional_metadata" json:"additionalMetadata,omitempty" toml:"additionalMetadata" yaml:"additionalMetadata,omitempty"`
	Keywords           null.String         `boiler:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	DeletedAt          null.Time           `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt          time.Time           `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt          time.Time           `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	Minted             null.Bool           `boiler:"minted" boil:"minted" json:"minted,omitempty" toml:"minted" yaml:"minted,omitempty"`
	Hash               string              `boiler:"hash" boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	ExternalTokenID    decimal.NullDecimal `boiler:"external_token_id" boil:"external_token_id" json:"externalTokenID,omitempty" toml:"externalTokenID" yaml:"externalTokenID,omitempty"`
	ImageAvatar        string              `boiler:"image_avatar" boil:"image_avatar" json:"imageAvatar" toml:"imageAvatar" yaml:"imageAvatar"`

	R *xsynMetadatumR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L xsynMetadatumL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var XsynMetadatumColumns = struct {
	Name               string
	CollectionID       string
	GameObject         string
	Description        string
	ExternalURL        string
	Image              string
	AnimationURL       string
	Durability         string
	Attributes         string
	AdditionalMetadata string
	Keywords           string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
	Minted             string
	Hash               string
	ExternalTokenID    string
	ImageAvatar        string
}{
	Name:               "name",
	CollectionID:       "collection_id",
	GameObject:         "game_object",
	Description:        "description",
	ExternalURL:        "external_url",
	Image:              "image",
	AnimationURL:       "animation_url",
	Durability:         "durability",
	Attributes:         "attributes",
	AdditionalMetadata: "additional_metadata",
	Keywords:           "keywords",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
	Minted:             "minted",
	Hash:               "hash",
	ExternalTokenID:    "external_token_id",
	ImageAvatar:        "image_avatar",
}

var XsynMetadatumTableColumns = struct {
	Name               string
	CollectionID       string
	GameObject         string
	Description        string
	ExternalURL        string
	Image              string
	AnimationURL       string
	Durability         string
	Attributes         string
	AdditionalMetadata string
	Keywords           string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
	Minted             string
	Hash               string
	ExternalTokenID    string
	ImageAvatar        string
}{
	Name:               "xsyn_metadata.name",
	CollectionID:       "xsyn_metadata.collection_id",
	GameObject:         "xsyn_metadata.game_object",
	Description:        "xsyn_metadata.description",
	ExternalURL:        "xsyn_metadata.external_url",
	Image:              "xsyn_metadata.image",
	AnimationURL:       "xsyn_metadata.animation_url",
	Durability:         "xsyn_metadata.durability",
	Attributes:         "xsyn_metadata.attributes",
	AdditionalMetadata: "xsyn_metadata.additional_metadata",
	Keywords:           "xsyn_metadata.keywords",
	DeletedAt:          "xsyn_metadata.deleted_at",
	UpdatedAt:          "xsyn_metadata.updated_at",
	CreatedAt:          "xsyn_metadata.created_at",
	Minted:             "xsyn_metadata.minted",
	Hash:               "xsyn_metadata.hash",
	ExternalTokenID:    "xsyn_metadata.external_token_id",
	ImageAvatar:        "xsyn_metadata.image_avatar",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var XsynMetadatumWhere = struct {
	Name               whereHelperstring
	CollectionID       whereHelperstring
	GameObject         whereHelpernull_JSON
	Description        whereHelpernull_String
	ExternalURL        whereHelpernull_String
	Image              whereHelpernull_String
	AnimationURL       whereHelpernull_String
	Durability         whereHelperint
	Attributes         whereHelpernull_JSON
	AdditionalMetadata whereHelpernull_JSON
	Keywords           whereHelpernull_String
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
	Minted             whereHelpernull_Bool
	Hash               whereHelperstring
	ExternalTokenID    whereHelperdecimal_NullDecimal
	ImageAvatar        whereHelperstring
}{
	Name:               whereHelperstring{field: "\"xsyn_metadata\".\"name\""},
	CollectionID:       whereHelperstring{field: "\"xsyn_metadata\".\"collection_id\""},
	GameObject:         whereHelpernull_JSON{field: "\"xsyn_metadata\".\"game_object\""},
	Description:        whereHelpernull_String{field: "\"xsyn_metadata\".\"description\""},
	ExternalURL:        whereHelpernull_String{field: "\"xsyn_metadata\".\"external_url\""},
	Image:              whereHelpernull_String{field: "\"xsyn_metadata\".\"image\""},
	AnimationURL:       whereHelpernull_String{field: "\"xsyn_metadata\".\"animation_url\""},
	Durability:         whereHelperint{field: "\"xsyn_metadata\".\"durability\""},
	Attributes:         whereHelpernull_JSON{field: "\"xsyn_metadata\".\"attributes\""},
	AdditionalMetadata: whereHelpernull_JSON{field: "\"xsyn_metadata\".\"additional_metadata\""},
	Keywords:           whereHelpernull_String{field: "\"xsyn_metadata\".\"keywords\""},
	DeletedAt:          whereHelpernull_Time{field: "\"xsyn_metadata\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"xsyn_metadata\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"xsyn_metadata\".\"created_at\""},
	Minted:             whereHelpernull_Bool{field: "\"xsyn_metadata\".\"minted\""},
	Hash:               whereHelperstring{field: "\"xsyn_metadata\".\"hash\""},
	ExternalTokenID:    whereHelperdecimal_NullDecimal{field: "\"xsyn_metadata\".\"external_token_id\""},
	ImageAvatar:        whereHelperstring{field: "\"xsyn_metadata\".\"image_avatar\""},
}

// XsynMetadatumRels is where relationship names are stored.
var XsynMetadatumRels = struct {
	MetadataHashXsynAsset string
}{
	MetadataHashXsynAsset: "MetadataHashXsynAsset",
}

// xsynMetadatumR is where relationships are stored.
type xsynMetadatumR struct {
	MetadataHashXsynAsset *XsynAsset `boiler:"MetadataHashXsynAsset" boil:"MetadataHashXsynAsset" json:"MetadataHashXsynAsset" toml:"MetadataHashXsynAsset" yaml:"MetadataHashXsynAsset"`
}

// NewStruct creates a new relationship struct
func (*xsynMetadatumR) NewStruct() *xsynMetadatumR {
	return &xsynMetadatumR{}
}

// xsynMetadatumL is where Load methods for each relationship are stored.
type xsynMetadatumL struct{}

var (
	xsynMetadatumAllColumns            = []string{"name", "collection_id", "game_object", "description", "external_url", "image", "animation_url", "durability", "attributes", "additional_metadata", "keywords", "deleted_at", "updated_at", "created_at", "minted", "hash", "external_token_id", "image_avatar"}
	xsynMetadatumColumnsWithoutDefault = []string{"name", "collection_id", "game_object", "description", "external_url", "image", "animation_url", "attributes", "additional_metadata", "keywords", "deleted_at", "hash", "external_token_id"}
	xsynMetadatumColumnsWithDefault    = []string{"durability", "updated_at", "created_at", "minted", "image_avatar"}
	xsynMetadatumPrimaryKeyColumns     = []string{"hash"}
)

type (
	// XsynMetadatumSlice is an alias for a slice of pointers to XsynMetadatum.
	// This should almost always be used instead of []XsynMetadatum.
	XsynMetadatumSlice []*XsynMetadatum
	// XsynMetadatumHook is the signature for custom XsynMetadatum hook methods
	XsynMetadatumHook func(boil.Executor, *XsynMetadatum) error

	xsynMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	xsynMetadatumType                 = reflect.TypeOf(&XsynMetadatum{})
	xsynMetadatumMapping              = queries.MakeStructMapping(xsynMetadatumType)
	xsynMetadatumPrimaryKeyMapping, _ = queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, xsynMetadatumPrimaryKeyColumns)
	xsynMetadatumInsertCacheMut       sync.RWMutex
	xsynMetadatumInsertCache          = make(map[string]insertCache)
	xsynMetadatumUpdateCacheMut       sync.RWMutex
	xsynMetadatumUpdateCache          = make(map[string]updateCache)
	xsynMetadatumUpsertCacheMut       sync.RWMutex
	xsynMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var xsynMetadatumBeforeInsertHooks []XsynMetadatumHook
var xsynMetadatumBeforeUpdateHooks []XsynMetadatumHook
var xsynMetadatumBeforeDeleteHooks []XsynMetadatumHook
var xsynMetadatumBeforeUpsertHooks []XsynMetadatumHook

var xsynMetadatumAfterInsertHooks []XsynMetadatumHook
var xsynMetadatumAfterSelectHooks []XsynMetadatumHook
var xsynMetadatumAfterUpdateHooks []XsynMetadatumHook
var xsynMetadatumAfterDeleteHooks []XsynMetadatumHook
var xsynMetadatumAfterUpsertHooks []XsynMetadatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *XsynMetadatum) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *XsynMetadatum) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *XsynMetadatum) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *XsynMetadatum) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *XsynMetadatum) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *XsynMetadatum) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *XsynMetadatum) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *XsynMetadatum) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *XsynMetadatum) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynMetadatumAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddXsynMetadatumHook registers your hook function for all future operations.
func AddXsynMetadatumHook(hookPoint boil.HookPoint, xsynMetadatumHook XsynMetadatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		xsynMetadatumBeforeInsertHooks = append(xsynMetadatumBeforeInsertHooks, xsynMetadatumHook)
	case boil.BeforeUpdateHook:
		xsynMetadatumBeforeUpdateHooks = append(xsynMetadatumBeforeUpdateHooks, xsynMetadatumHook)
	case boil.BeforeDeleteHook:
		xsynMetadatumBeforeDeleteHooks = append(xsynMetadatumBeforeDeleteHooks, xsynMetadatumHook)
	case boil.BeforeUpsertHook:
		xsynMetadatumBeforeUpsertHooks = append(xsynMetadatumBeforeUpsertHooks, xsynMetadatumHook)
	case boil.AfterInsertHook:
		xsynMetadatumAfterInsertHooks = append(xsynMetadatumAfterInsertHooks, xsynMetadatumHook)
	case boil.AfterSelectHook:
		xsynMetadatumAfterSelectHooks = append(xsynMetadatumAfterSelectHooks, xsynMetadatumHook)
	case boil.AfterUpdateHook:
		xsynMetadatumAfterUpdateHooks = append(xsynMetadatumAfterUpdateHooks, xsynMetadatumHook)
	case boil.AfterDeleteHook:
		xsynMetadatumAfterDeleteHooks = append(xsynMetadatumAfterDeleteHooks, xsynMetadatumHook)
	case boil.AfterUpsertHook:
		xsynMetadatumAfterUpsertHooks = append(xsynMetadatumAfterUpsertHooks, xsynMetadatumHook)
	}
}

// One returns a single xsynMetadatum record from the query.
func (q xsynMetadatumQuery) One(exec boil.Executor) (*XsynMetadatum, error) {
	o := &XsynMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for xsyn_metadata")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all XsynMetadatum records from the query.
func (q xsynMetadatumQuery) All(exec boil.Executor) (XsynMetadatumSlice, error) {
	var o []*XsynMetadatum

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to XsynMetadatum slice")
	}

	if len(xsynMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all XsynMetadatum records in the query.
func (q xsynMetadatumQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count xsyn_metadata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q xsynMetadatumQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if xsyn_metadata exists")
	}

	return count > 0, nil
}

// MetadataHashXsynAsset pointed to by the foreign key.
func (o *XsynMetadatum) MetadataHashXsynAsset(mods ...qm.QueryMod) xsynAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"metadata_hash\" = ?", o.Hash),
	}

	queryMods = append(queryMods, mods...)

	query := XsynAssets(queryMods...)
	queries.SetFrom(query.Query, "\"xsyn_assets\"")

	return query
}

// LoadMetadataHashXsynAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (xsynMetadatumL) LoadMetadataHashXsynAsset(e boil.Executor, singular bool, maybeXsynMetadatum interface{}, mods queries.Applicator) error {
	var slice []*XsynMetadatum
	var object *XsynMetadatum

	if singular {
		object = maybeXsynMetadatum.(*XsynMetadatum)
	} else {
		slice = *maybeXsynMetadatum.(*[]*XsynMetadatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynMetadatumR{}
		}
		args = append(args, object.Hash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynMetadatumR{}
			}

			for _, a := range args {
				if a == obj.Hash {
					continue Outer
				}
			}

			args = append(args, obj.Hash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`xsyn_assets`),
		qm.WhereIn(`xsyn_assets.metadata_hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load XsynAsset")
	}

	var resultSlice []*XsynAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice XsynAsset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for xsyn_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for xsyn_assets")
	}

	if len(xsynMetadatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MetadataHashXsynAsset = foreign
		if foreign.R == nil {
			foreign.R = &xsynAssetR{}
		}
		foreign.R.MetadataHashXsynMetadatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Hash == foreign.MetadataHash {
				local.R.MetadataHashXsynAsset = foreign
				if foreign.R == nil {
					foreign.R = &xsynAssetR{}
				}
				foreign.R.MetadataHashXsynMetadatum = local
				break
			}
		}
	}

	return nil
}

// SetMetadataHashXsynAsset of the xsynMetadatum to the related item.
// Sets o.R.MetadataHashXsynAsset to related.
// Adds o to related.R.MetadataHashXsynMetadatum.
func (o *XsynMetadatum) SetMetadataHashXsynAsset(exec boil.Executor, insert bool, related *XsynAsset) error {
	var err error

	if insert {
		related.MetadataHash = o.Hash

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"xsyn_assets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"metadata_hash"}),
			strmangle.WhereClause("\"", "\"", 2, xsynAssetPrimaryKeyColumns),
		)
		values := []interface{}{o.Hash, related.MetadataHash}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MetadataHash = o.Hash

	}

	if o.R == nil {
		o.R = &xsynMetadatumR{
			MetadataHashXsynAsset: related,
		}
	} else {
		o.R.MetadataHashXsynAsset = related
	}

	if related.R == nil {
		related.R = &xsynAssetR{
			MetadataHashXsynMetadatum: o,
		}
	} else {
		related.R.MetadataHashXsynMetadatum = o
	}
	return nil
}

// XsynMetadata retrieves all the records using an executor.
func XsynMetadata(mods ...qm.QueryMod) xsynMetadatumQuery {
	mods = append(mods, qm.From("\"xsyn_metadata\""), qmhelper.WhereIsNull("\"xsyn_metadata\".\"deleted_at\""))
	return xsynMetadatumQuery{NewQuery(mods...)}
}

// FindXsynMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindXsynMetadatum(exec boil.Executor, hash string, selectCols ...string) (*XsynMetadatum, error) {
	xsynMetadatumObj := &XsynMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"xsyn_metadata\" where \"hash\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, hash)

	err := q.Bind(nil, exec, xsynMetadatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from xsyn_metadata")
	}

	if err = xsynMetadatumObj.doAfterSelectHooks(exec); err != nil {
		return xsynMetadatumObj, err
	}

	return xsynMetadatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *XsynMetadatum) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no xsyn_metadata provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xsynMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	xsynMetadatumInsertCacheMut.RLock()
	cache, cached := xsynMetadatumInsertCache[key]
	xsynMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			xsynMetadatumAllColumns,
			xsynMetadatumColumnsWithDefault,
			xsynMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"xsyn_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"xsyn_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into xsyn_metadata")
	}

	if !cached {
		xsynMetadatumInsertCacheMut.Lock()
		xsynMetadatumInsertCache[key] = cache
		xsynMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the XsynMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *XsynMetadatum) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	xsynMetadatumUpdateCacheMut.RLock()
	cache, cached := xsynMetadatumUpdateCache[key]
	xsynMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			xsynMetadatumAllColumns,
			xsynMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update xsyn_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"xsyn_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, xsynMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, append(wl, xsynMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update xsyn_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for xsyn_metadata")
	}

	if !cached {
		xsynMetadatumUpdateCacheMut.Lock()
		xsynMetadatumUpdateCache[key] = cache
		xsynMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q xsynMetadatumQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for xsyn_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for xsyn_metadata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o XsynMetadatumSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"xsyn_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, xsynMetadatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in xsynMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all xsynMetadatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *XsynMetadatum) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no xsyn_metadata provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xsynMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	xsynMetadatumUpsertCacheMut.RLock()
	cache, cached := xsynMetadatumUpsertCache[key]
	xsynMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			xsynMetadatumAllColumns,
			xsynMetadatumColumnsWithDefault,
			xsynMetadatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			xsynMetadatumAllColumns,
			xsynMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert xsyn_metadata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(xsynMetadatumPrimaryKeyColumns))
			copy(conflict, xsynMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"xsyn_metadata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert xsyn_metadata")
	}

	if !cached {
		xsynMetadatumUpsertCacheMut.Lock()
		xsynMetadatumUpsertCache[key] = cache
		xsynMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single XsynMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *XsynMetadatum) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no XsynMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), xsynMetadatumPrimaryKeyMapping)
		sql = "DELETE FROM \"xsyn_metadata\" WHERE \"hash\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"xsyn_metadata\" SET %s WHERE \"hash\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(xsynMetadatumType, xsynMetadatumMapping, append(wl, xsynMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from xsyn_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for xsyn_metadata")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q xsynMetadatumQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no xsynMetadatumQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from xsyn_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for xsyn_metadata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o XsynMetadatumSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(xsynMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynMetadatumPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"xsyn_metadata\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, xsynMetadatumPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynMetadatumPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"xsyn_metadata\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, xsynMetadatumPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from xsynMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for xsyn_metadata")
	}

	if len(xsynMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *XsynMetadatum) Reload(exec boil.Executor) error {
	ret, err := FindXsynMetadatum(exec, o.Hash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XsynMetadatumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := XsynMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"xsyn_metadata\".* FROM \"xsyn_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, xsynMetadatumPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in XsynMetadatumSlice")
	}

	*o = slice

	return nil
}

// XsynMetadatumExists checks if the XsynMetadatum row exists.
func XsynMetadatumExists(exec boil.Executor, hash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"xsyn_metadata\" where \"hash\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, hash)
	}
	row := exec.QueryRow(sql, hash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if xsyn_metadata exists")
	}

	return exists, nil
}
