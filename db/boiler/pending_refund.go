// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PendingRefund is an object representing the database table.
type PendingRefund struct {
	ID                   string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID               string          `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AmountSups           decimal.Decimal `boiler:"amount_sups" boil:"amount_sups" json:"amount_sups" toml:"amount_sups" yaml:"amount_sups"`
	RefundedAt           time.Time       `boiler:"refunded_at" boil:"refunded_at" json:"refunded_at" toml:"refunded_at" yaml:"refunded_at"`
	IsRefunded           bool            `boiler:"is_refunded" boil:"is_refunded" json:"is_refunded" toml:"is_refunded" yaml:"is_refunded"`
	RefundCanceledAt     null.Time       `boiler:"refund_canceled_at" boil:"refund_canceled_at" json:"refund_canceled_at,omitempty" toml:"refund_canceled_at" yaml:"refund_canceled_at,omitempty"`
	TXHash               string          `boiler:"tx_hash" boil:"tx_hash" json:"tx_hash" toml:"tx_hash" yaml:"tx_hash"`
	TransactionReference string          `boiler:"transaction_reference" boil:"transaction_reference" json:"transaction_reference" toml:"transaction_reference" yaml:"transaction_reference"`
	DeletedAt            null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt            time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt            time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *pendingRefundR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L pendingRefundL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PendingRefundColumns = struct {
	ID                   string
	UserID               string
	AmountSups           string
	RefundedAt           string
	IsRefunded           string
	RefundCanceledAt     string
	TXHash               string
	TransactionReference string
	DeletedAt            string
	UpdatedAt            string
	CreatedAt            string
}{
	ID:                   "id",
	UserID:               "user_id",
	AmountSups:           "amount_sups",
	RefundedAt:           "refunded_at",
	IsRefunded:           "is_refunded",
	RefundCanceledAt:     "refund_canceled_at",
	TXHash:               "tx_hash",
	TransactionReference: "transaction_reference",
	DeletedAt:            "deleted_at",
	UpdatedAt:            "updated_at",
	CreatedAt:            "created_at",
}

var PendingRefundTableColumns = struct {
	ID                   string
	UserID               string
	AmountSups           string
	RefundedAt           string
	IsRefunded           string
	RefundCanceledAt     string
	TXHash               string
	TransactionReference string
	DeletedAt            string
	UpdatedAt            string
	CreatedAt            string
}{
	ID:                   "pending_refund.id",
	UserID:               "pending_refund.user_id",
	AmountSups:           "pending_refund.amount_sups",
	RefundedAt:           "pending_refund.refunded_at",
	IsRefunded:           "pending_refund.is_refunded",
	RefundCanceledAt:     "pending_refund.refund_canceled_at",
	TXHash:               "pending_refund.tx_hash",
	TransactionReference: "pending_refund.transaction_reference",
	DeletedAt:            "pending_refund.deleted_at",
	UpdatedAt:            "pending_refund.updated_at",
	CreatedAt:            "pending_refund.created_at",
}

// Generated where

var PendingRefundWhere = struct {
	ID                   whereHelperstring
	UserID               whereHelperstring
	AmountSups           whereHelperdecimal_Decimal
	RefundedAt           whereHelpertime_Time
	IsRefunded           whereHelperbool
	RefundCanceledAt     whereHelpernull_Time
	TXHash               whereHelperstring
	TransactionReference whereHelperstring
	DeletedAt            whereHelpernull_Time
	UpdatedAt            whereHelpertime_Time
	CreatedAt            whereHelpertime_Time
}{
	ID:                   whereHelperstring{field: "\"pending_refund\".\"id\""},
	UserID:               whereHelperstring{field: "\"pending_refund\".\"user_id\""},
	AmountSups:           whereHelperdecimal_Decimal{field: "\"pending_refund\".\"amount_sups\""},
	RefundedAt:           whereHelpertime_Time{field: "\"pending_refund\".\"refunded_at\""},
	IsRefunded:           whereHelperbool{field: "\"pending_refund\".\"is_refunded\""},
	RefundCanceledAt:     whereHelpernull_Time{field: "\"pending_refund\".\"refund_canceled_at\""},
	TXHash:               whereHelperstring{field: "\"pending_refund\".\"tx_hash\""},
	TransactionReference: whereHelperstring{field: "\"pending_refund\".\"transaction_reference\""},
	DeletedAt:            whereHelpernull_Time{field: "\"pending_refund\".\"deleted_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"pending_refund\".\"updated_at\""},
	CreatedAt:            whereHelpertime_Time{field: "\"pending_refund\".\"created_at\""},
}

// PendingRefundRels is where relationship names are stored.
var PendingRefundRels = struct {
	TransactionReferenceTransaction string
	User                            string
}{
	TransactionReferenceTransaction: "TransactionReferenceTransaction",
	User:                            "User",
}

// pendingRefundR is where relationships are stored.
type pendingRefundR struct {
	TransactionReferenceTransaction *Transaction `boiler:"TransactionReferenceTransaction" boil:"TransactionReferenceTransaction" json:"TransactionReferenceTransaction" toml:"TransactionReferenceTransaction" yaml:"TransactionReferenceTransaction"`
	User                            *User        `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*pendingRefundR) NewStruct() *pendingRefundR {
	return &pendingRefundR{}
}

// pendingRefundL is where Load methods for each relationship are stored.
type pendingRefundL struct{}

var (
	pendingRefundAllColumns            = []string{"id", "user_id", "amount_sups", "refunded_at", "is_refunded", "refund_canceled_at", "tx_hash", "transaction_reference", "deleted_at", "updated_at", "created_at"}
	pendingRefundColumnsWithoutDefault = []string{"user_id", "amount_sups", "refunded_at", "refund_canceled_at", "transaction_reference", "deleted_at"}
	pendingRefundColumnsWithDefault    = []string{"id", "is_refunded", "tx_hash", "updated_at", "created_at"}
	pendingRefundPrimaryKeyColumns     = []string{"id"}
)

type (
	// PendingRefundSlice is an alias for a slice of pointers to PendingRefund.
	// This should almost always be used instead of []PendingRefund.
	PendingRefundSlice []*PendingRefund
	// PendingRefundHook is the signature for custom PendingRefund hook methods
	PendingRefundHook func(boil.Executor, *PendingRefund) error

	pendingRefundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pendingRefundType                 = reflect.TypeOf(&PendingRefund{})
	pendingRefundMapping              = queries.MakeStructMapping(pendingRefundType)
	pendingRefundPrimaryKeyMapping, _ = queries.BindMapping(pendingRefundType, pendingRefundMapping, pendingRefundPrimaryKeyColumns)
	pendingRefundInsertCacheMut       sync.RWMutex
	pendingRefundInsertCache          = make(map[string]insertCache)
	pendingRefundUpdateCacheMut       sync.RWMutex
	pendingRefundUpdateCache          = make(map[string]updateCache)
	pendingRefundUpsertCacheMut       sync.RWMutex
	pendingRefundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pendingRefundBeforeInsertHooks []PendingRefundHook
var pendingRefundBeforeUpdateHooks []PendingRefundHook
var pendingRefundBeforeDeleteHooks []PendingRefundHook
var pendingRefundBeforeUpsertHooks []PendingRefundHook

var pendingRefundAfterInsertHooks []PendingRefundHook
var pendingRefundAfterSelectHooks []PendingRefundHook
var pendingRefundAfterUpdateHooks []PendingRefundHook
var pendingRefundAfterDeleteHooks []PendingRefundHook
var pendingRefundAfterUpsertHooks []PendingRefundHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PendingRefund) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PendingRefund) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PendingRefund) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PendingRefund) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PendingRefund) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PendingRefund) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PendingRefund) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PendingRefund) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PendingRefund) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pendingRefundAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPendingRefundHook registers your hook function for all future operations.
func AddPendingRefundHook(hookPoint boil.HookPoint, pendingRefundHook PendingRefundHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pendingRefundBeforeInsertHooks = append(pendingRefundBeforeInsertHooks, pendingRefundHook)
	case boil.BeforeUpdateHook:
		pendingRefundBeforeUpdateHooks = append(pendingRefundBeforeUpdateHooks, pendingRefundHook)
	case boil.BeforeDeleteHook:
		pendingRefundBeforeDeleteHooks = append(pendingRefundBeforeDeleteHooks, pendingRefundHook)
	case boil.BeforeUpsertHook:
		pendingRefundBeforeUpsertHooks = append(pendingRefundBeforeUpsertHooks, pendingRefundHook)
	case boil.AfterInsertHook:
		pendingRefundAfterInsertHooks = append(pendingRefundAfterInsertHooks, pendingRefundHook)
	case boil.AfterSelectHook:
		pendingRefundAfterSelectHooks = append(pendingRefundAfterSelectHooks, pendingRefundHook)
	case boil.AfterUpdateHook:
		pendingRefundAfterUpdateHooks = append(pendingRefundAfterUpdateHooks, pendingRefundHook)
	case boil.AfterDeleteHook:
		pendingRefundAfterDeleteHooks = append(pendingRefundAfterDeleteHooks, pendingRefundHook)
	case boil.AfterUpsertHook:
		pendingRefundAfterUpsertHooks = append(pendingRefundAfterUpsertHooks, pendingRefundHook)
	}
}

// One returns a single pendingRefund record from the query.
func (q pendingRefundQuery) One(exec boil.Executor) (*PendingRefund, error) {
	o := &PendingRefund{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for pending_refund")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PendingRefund records from the query.
func (q pendingRefundQuery) All(exec boil.Executor) (PendingRefundSlice, error) {
	var o []*PendingRefund

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PendingRefund slice")
	}

	if len(pendingRefundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PendingRefund records in the query.
func (q pendingRefundQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count pending_refund rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pendingRefundQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if pending_refund exists")
	}

	return count > 0, nil
}

// TransactionReferenceTransaction pointed to by the foreign key.
func (o *PendingRefund) TransactionReferenceTransaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"transaction_reference\" = ?", o.TransactionReference),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// User pointed to by the foreign key.
func (o *PendingRefund) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadTransactionReferenceTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pendingRefundL) LoadTransactionReferenceTransaction(e boil.Executor, singular bool, maybePendingRefund interface{}, mods queries.Applicator) error {
	var slice []*PendingRefund
	var object *PendingRefund

	if singular {
		object = maybePendingRefund.(*PendingRefund)
	} else {
		slice = *maybePendingRefund.(*[]*PendingRefund)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pendingRefundR{}
		}
		args = append(args, object.TransactionReference)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pendingRefundR{}
			}

			for _, a := range args {
				if a == obj.TransactionReference {
					continue Outer
				}
			}

			args = append(args, obj.TransactionReference)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.transaction_reference in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(pendingRefundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionReferenceTransaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionReferencePendingRefunds = append(foreign.R.TransactionReferencePendingRefunds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionReference == foreign.TransactionReference {
				local.R.TransactionReferenceTransaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionReferencePendingRefunds = append(foreign.R.TransactionReferencePendingRefunds, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pendingRefundL) LoadUser(e boil.Executor, singular bool, maybePendingRefund interface{}, mods queries.Applicator) error {
	var slice []*PendingRefund
	var object *PendingRefund

	if singular {
		object = maybePendingRefund.(*PendingRefund)
	} else {
		slice = *maybePendingRefund.(*[]*PendingRefund)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pendingRefundR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pendingRefundR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(pendingRefundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PendingRefunds = append(foreign.R.PendingRefunds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PendingRefunds = append(foreign.R.PendingRefunds, local)
				break
			}
		}
	}

	return nil
}

// SetTransactionReferenceTransaction of the pendingRefund to the related item.
// Sets o.R.TransactionReferenceTransaction to related.
// Adds o to related.R.TransactionReferencePendingRefunds.
func (o *PendingRefund) SetTransactionReferenceTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pending_refund\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_reference"}),
		strmangle.WhereClause("\"", "\"", 2, pendingRefundPrimaryKeyColumns),
	)
	values := []interface{}{related.TransactionReference, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionReference = related.TransactionReference
	if o.R == nil {
		o.R = &pendingRefundR{
			TransactionReferenceTransaction: related,
		}
	} else {
		o.R.TransactionReferenceTransaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionReferencePendingRefunds: PendingRefundSlice{o},
		}
	} else {
		related.R.TransactionReferencePendingRefunds = append(related.R.TransactionReferencePendingRefunds, o)
	}

	return nil
}

// SetUser of the pendingRefund to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PendingRefunds.
func (o *PendingRefund) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pending_refund\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, pendingRefundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &pendingRefundR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PendingRefunds: PendingRefundSlice{o},
		}
	} else {
		related.R.PendingRefunds = append(related.R.PendingRefunds, o)
	}

	return nil
}

// PendingRefunds retrieves all the records using an executor.
func PendingRefunds(mods ...qm.QueryMod) pendingRefundQuery {
	mods = append(mods, qm.From("\"pending_refund\""), qmhelper.WhereIsNull("\"pending_refund\".\"deleted_at\""))
	return pendingRefundQuery{NewQuery(mods...)}
}

// FindPendingRefund retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPendingRefund(exec boil.Executor, iD string, selectCols ...string) (*PendingRefund, error) {
	pendingRefundObj := &PendingRefund{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pending_refund\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, pendingRefundObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from pending_refund")
	}

	if err = pendingRefundObj.doAfterSelectHooks(exec); err != nil {
		return pendingRefundObj, err
	}

	return pendingRefundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PendingRefund) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no pending_refund provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pendingRefundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pendingRefundInsertCacheMut.RLock()
	cache, cached := pendingRefundInsertCache[key]
	pendingRefundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pendingRefundAllColumns,
			pendingRefundColumnsWithDefault,
			pendingRefundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pendingRefundType, pendingRefundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pendingRefundType, pendingRefundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pending_refund\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pending_refund\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into pending_refund")
	}

	if !cached {
		pendingRefundInsertCacheMut.Lock()
		pendingRefundInsertCache[key] = cache
		pendingRefundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PendingRefund.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PendingRefund) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pendingRefundUpdateCacheMut.RLock()
	cache, cached := pendingRefundUpdateCache[key]
	pendingRefundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pendingRefundAllColumns,
			pendingRefundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update pending_refund, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pending_refund\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pendingRefundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pendingRefundType, pendingRefundMapping, append(wl, pendingRefundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update pending_refund row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for pending_refund")
	}

	if !cached {
		pendingRefundUpdateCacheMut.Lock()
		pendingRefundUpdateCache[key] = cache
		pendingRefundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pendingRefundQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for pending_refund")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for pending_refund")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PendingRefundSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRefundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pending_refund\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pendingRefundPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in pendingRefund slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all pendingRefund")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PendingRefund) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no pending_refund provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pendingRefundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pendingRefundUpsertCacheMut.RLock()
	cache, cached := pendingRefundUpsertCache[key]
	pendingRefundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pendingRefundAllColumns,
			pendingRefundColumnsWithDefault,
			pendingRefundColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pendingRefundAllColumns,
			pendingRefundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert pending_refund, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pendingRefundPrimaryKeyColumns))
			copy(conflict, pendingRefundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pending_refund\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pendingRefundType, pendingRefundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pendingRefundType, pendingRefundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert pending_refund")
	}

	if !cached {
		pendingRefundUpsertCacheMut.Lock()
		pendingRefundUpsertCache[key] = cache
		pendingRefundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PendingRefund record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PendingRefund) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PendingRefund provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pendingRefundPrimaryKeyMapping)
		sql = "DELETE FROM \"pending_refund\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"pending_refund\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(pendingRefundType, pendingRefundMapping, append(wl, pendingRefundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from pending_refund")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for pending_refund")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pendingRefundQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no pendingRefundQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from pending_refund")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for pending_refund")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PendingRefundSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pendingRefundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRefundPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"pending_refund\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pendingRefundPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRefundPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"pending_refund\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, pendingRefundPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from pendingRefund slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for pending_refund")
	}

	if len(pendingRefundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PendingRefund) Reload(exec boil.Executor) error {
	ret, err := FindPendingRefund(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PendingRefundSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PendingRefundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pendingRefundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pending_refund\".* FROM \"pending_refund\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pendingRefundPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PendingRefundSlice")
	}

	*o = slice

	return nil
}

// PendingRefundExists checks if the PendingRefund row exists.
func PendingRefundExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pending_refund\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if pending_refund exists")
	}

	return exists, nil
}
