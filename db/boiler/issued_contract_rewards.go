// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IssuedContractReward is an object representing the database table.
type IssuedContractReward struct {
	ID             string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID       string          `boiler:"battle_id" boil:"battle_id" json:"battleID" toml:"battleID" yaml:"battleID"`
	Reward         decimal.Decimal `boiler:"reward" boil:"reward" json:"reward" toml:"reward" yaml:"reward"`
	WarMachineHash string          `boiler:"war_machine_hash" boil:"war_machine_hash" json:"warMachineHash" toml:"warMachineHash" yaml:"warMachineHash"`
	DeletedAt      null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt      time.Time       `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt      time.Time       `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	IsPaid         null.Time       `boiler:"is_paid" boil:"is_paid" json:"isPaid,omitempty" toml:"isPaid" yaml:"isPaid,omitempty"`

	R *issuedContractRewardR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L issuedContractRewardL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IssuedContractRewardColumns = struct {
	ID             string
	BattleID       string
	Reward         string
	WarMachineHash string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
	IsPaid         string
}{
	ID:             "id",
	BattleID:       "battle_id",
	Reward:         "reward",
	WarMachineHash: "war_machine_hash",
	DeletedAt:      "deleted_at",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
	IsPaid:         "is_paid",
}

var IssuedContractRewardTableColumns = struct {
	ID             string
	BattleID       string
	Reward         string
	WarMachineHash string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
	IsPaid         string
}{
	ID:             "issued_contract_rewards.id",
	BattleID:       "issued_contract_rewards.battle_id",
	Reward:         "issued_contract_rewards.reward",
	WarMachineHash: "issued_contract_rewards.war_machine_hash",
	DeletedAt:      "issued_contract_rewards.deleted_at",
	UpdatedAt:      "issued_contract_rewards.updated_at",
	CreatedAt:      "issued_contract_rewards.created_at",
	IsPaid:         "issued_contract_rewards.is_paid",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var IssuedContractRewardWhere = struct {
	ID             whereHelperstring
	BattleID       whereHelperstring
	Reward         whereHelperdecimal_Decimal
	WarMachineHash whereHelperstring
	DeletedAt      whereHelpernull_Time
	UpdatedAt      whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	IsPaid         whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"issued_contract_rewards\".\"id\""},
	BattleID:       whereHelperstring{field: "\"issued_contract_rewards\".\"battle_id\""},
	Reward:         whereHelperdecimal_Decimal{field: "\"issued_contract_rewards\".\"reward\""},
	WarMachineHash: whereHelperstring{field: "\"issued_contract_rewards\".\"war_machine_hash\""},
	DeletedAt:      whereHelpernull_Time{field: "\"issued_contract_rewards\".\"deleted_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"issued_contract_rewards\".\"updated_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"issued_contract_rewards\".\"created_at\""},
	IsPaid:         whereHelpernull_Time{field: "\"issued_contract_rewards\".\"is_paid\""},
}

// IssuedContractRewardRels is where relationship names are stored.
var IssuedContractRewardRels = struct {
	Battle string
}{
	Battle: "Battle",
}

// issuedContractRewardR is where relationships are stored.
type issuedContractRewardR struct {
	Battle *Battle `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
}

// NewStruct creates a new relationship struct
func (*issuedContractRewardR) NewStruct() *issuedContractRewardR {
	return &issuedContractRewardR{}
}

// issuedContractRewardL is where Load methods for each relationship are stored.
type issuedContractRewardL struct{}

var (
	issuedContractRewardAllColumns            = []string{"id", "battle_id", "reward", "war_machine_hash", "deleted_at", "updated_at", "created_at", "is_paid"}
	issuedContractRewardColumnsWithoutDefault = []string{"battle_id", "reward", "war_machine_hash", "deleted_at", "is_paid"}
	issuedContractRewardColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	issuedContractRewardPrimaryKeyColumns     = []string{"id"}
)

type (
	// IssuedContractRewardSlice is an alias for a slice of pointers to IssuedContractReward.
	// This should almost always be used instead of []IssuedContractReward.
	IssuedContractRewardSlice []*IssuedContractReward
	// IssuedContractRewardHook is the signature for custom IssuedContractReward hook methods
	IssuedContractRewardHook func(boil.Executor, *IssuedContractReward) error

	issuedContractRewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	issuedContractRewardType                 = reflect.TypeOf(&IssuedContractReward{})
	issuedContractRewardMapping              = queries.MakeStructMapping(issuedContractRewardType)
	issuedContractRewardPrimaryKeyMapping, _ = queries.BindMapping(issuedContractRewardType, issuedContractRewardMapping, issuedContractRewardPrimaryKeyColumns)
	issuedContractRewardInsertCacheMut       sync.RWMutex
	issuedContractRewardInsertCache          = make(map[string]insertCache)
	issuedContractRewardUpdateCacheMut       sync.RWMutex
	issuedContractRewardUpdateCache          = make(map[string]updateCache)
	issuedContractRewardUpsertCacheMut       sync.RWMutex
	issuedContractRewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var issuedContractRewardBeforeInsertHooks []IssuedContractRewardHook
var issuedContractRewardBeforeUpdateHooks []IssuedContractRewardHook
var issuedContractRewardBeforeDeleteHooks []IssuedContractRewardHook
var issuedContractRewardBeforeUpsertHooks []IssuedContractRewardHook

var issuedContractRewardAfterInsertHooks []IssuedContractRewardHook
var issuedContractRewardAfterSelectHooks []IssuedContractRewardHook
var issuedContractRewardAfterUpdateHooks []IssuedContractRewardHook
var issuedContractRewardAfterDeleteHooks []IssuedContractRewardHook
var issuedContractRewardAfterUpsertHooks []IssuedContractRewardHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IssuedContractReward) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IssuedContractReward) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IssuedContractReward) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IssuedContractReward) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IssuedContractReward) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IssuedContractReward) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IssuedContractReward) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IssuedContractReward) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IssuedContractReward) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issuedContractRewardAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIssuedContractRewardHook registers your hook function for all future operations.
func AddIssuedContractRewardHook(hookPoint boil.HookPoint, issuedContractRewardHook IssuedContractRewardHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		issuedContractRewardBeforeInsertHooks = append(issuedContractRewardBeforeInsertHooks, issuedContractRewardHook)
	case boil.BeforeUpdateHook:
		issuedContractRewardBeforeUpdateHooks = append(issuedContractRewardBeforeUpdateHooks, issuedContractRewardHook)
	case boil.BeforeDeleteHook:
		issuedContractRewardBeforeDeleteHooks = append(issuedContractRewardBeforeDeleteHooks, issuedContractRewardHook)
	case boil.BeforeUpsertHook:
		issuedContractRewardBeforeUpsertHooks = append(issuedContractRewardBeforeUpsertHooks, issuedContractRewardHook)
	case boil.AfterInsertHook:
		issuedContractRewardAfterInsertHooks = append(issuedContractRewardAfterInsertHooks, issuedContractRewardHook)
	case boil.AfterSelectHook:
		issuedContractRewardAfterSelectHooks = append(issuedContractRewardAfterSelectHooks, issuedContractRewardHook)
	case boil.AfterUpdateHook:
		issuedContractRewardAfterUpdateHooks = append(issuedContractRewardAfterUpdateHooks, issuedContractRewardHook)
	case boil.AfterDeleteHook:
		issuedContractRewardAfterDeleteHooks = append(issuedContractRewardAfterDeleteHooks, issuedContractRewardHook)
	case boil.AfterUpsertHook:
		issuedContractRewardAfterUpsertHooks = append(issuedContractRewardAfterUpsertHooks, issuedContractRewardHook)
	}
}

// One returns a single issuedContractReward record from the query.
func (q issuedContractRewardQuery) One(exec boil.Executor) (*IssuedContractReward, error) {
	o := &IssuedContractReward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for issued_contract_rewards")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IssuedContractReward records from the query.
func (q issuedContractRewardQuery) All(exec boil.Executor) (IssuedContractRewardSlice, error) {
	var o []*IssuedContractReward

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to IssuedContractReward slice")
	}

	if len(issuedContractRewardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IssuedContractReward records in the query.
func (q issuedContractRewardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count issued_contract_rewards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q issuedContractRewardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if issued_contract_rewards exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *IssuedContractReward) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (issuedContractRewardL) LoadBattle(e boil.Executor, singular bool, maybeIssuedContractReward interface{}, mods queries.Applicator) error {
	var slice []*IssuedContractReward
	var object *IssuedContractReward

	if singular {
		object = maybeIssuedContractReward.(*IssuedContractReward)
	} else {
		slice = *maybeIssuedContractReward.(*[]*IssuedContractReward)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &issuedContractRewardR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &issuedContractRewardR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(issuedContractRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.IssuedContractRewards = append(foreign.R.IssuedContractRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.IssuedContractRewards = append(foreign.R.IssuedContractRewards, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the issuedContractReward to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.IssuedContractRewards.
func (o *IssuedContractReward) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"issued_contract_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, issuedContractRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &issuedContractRewardR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			IssuedContractRewards: IssuedContractRewardSlice{o},
		}
	} else {
		related.R.IssuedContractRewards = append(related.R.IssuedContractRewards, o)
	}

	return nil
}

// IssuedContractRewards retrieves all the records using an executor.
func IssuedContractRewards(mods ...qm.QueryMod) issuedContractRewardQuery {
	mods = append(mods, qm.From("\"issued_contract_rewards\""))
	return issuedContractRewardQuery{NewQuery(mods...)}
}

// FindIssuedContractReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIssuedContractReward(exec boil.Executor, iD string, selectCols ...string) (*IssuedContractReward, error) {
	issuedContractRewardObj := &IssuedContractReward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"issued_contract_rewards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, issuedContractRewardObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from issued_contract_rewards")
	}

	if err = issuedContractRewardObj.doAfterSelectHooks(exec); err != nil {
		return issuedContractRewardObj, err
	}

	return issuedContractRewardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IssuedContractReward) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no issued_contract_rewards provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(issuedContractRewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	issuedContractRewardInsertCacheMut.RLock()
	cache, cached := issuedContractRewardInsertCache[key]
	issuedContractRewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			issuedContractRewardAllColumns,
			issuedContractRewardColumnsWithDefault,
			issuedContractRewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(issuedContractRewardType, issuedContractRewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(issuedContractRewardType, issuedContractRewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"issued_contract_rewards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"issued_contract_rewards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into issued_contract_rewards")
	}

	if !cached {
		issuedContractRewardInsertCacheMut.Lock()
		issuedContractRewardInsertCache[key] = cache
		issuedContractRewardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the IssuedContractReward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IssuedContractReward) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	issuedContractRewardUpdateCacheMut.RLock()
	cache, cached := issuedContractRewardUpdateCache[key]
	issuedContractRewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			issuedContractRewardAllColumns,
			issuedContractRewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update issued_contract_rewards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"issued_contract_rewards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, issuedContractRewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(issuedContractRewardType, issuedContractRewardMapping, append(wl, issuedContractRewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update issued_contract_rewards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for issued_contract_rewards")
	}

	if !cached {
		issuedContractRewardUpdateCacheMut.Lock()
		issuedContractRewardUpdateCache[key] = cache
		issuedContractRewardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q issuedContractRewardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for issued_contract_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for issued_contract_rewards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IssuedContractRewardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issuedContractRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"issued_contract_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, issuedContractRewardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in issuedContractReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all issuedContractReward")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IssuedContractReward) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no issued_contract_rewards provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(issuedContractRewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	issuedContractRewardUpsertCacheMut.RLock()
	cache, cached := issuedContractRewardUpsertCache[key]
	issuedContractRewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			issuedContractRewardAllColumns,
			issuedContractRewardColumnsWithDefault,
			issuedContractRewardColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			issuedContractRewardAllColumns,
			issuedContractRewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert issued_contract_rewards, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(issuedContractRewardPrimaryKeyColumns))
			copy(conflict, issuedContractRewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"issued_contract_rewards\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(issuedContractRewardType, issuedContractRewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(issuedContractRewardType, issuedContractRewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert issued_contract_rewards")
	}

	if !cached {
		issuedContractRewardUpsertCacheMut.Lock()
		issuedContractRewardUpsertCache[key] = cache
		issuedContractRewardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single IssuedContractReward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IssuedContractReward) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no IssuedContractReward provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), issuedContractRewardPrimaryKeyMapping)
	sql := "DELETE FROM \"issued_contract_rewards\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from issued_contract_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for issued_contract_rewards")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q issuedContractRewardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no issuedContractRewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from issued_contract_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for issued_contract_rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IssuedContractRewardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(issuedContractRewardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issuedContractRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"issued_contract_rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, issuedContractRewardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from issuedContractReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for issued_contract_rewards")
	}

	if len(issuedContractRewardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IssuedContractReward) Reload(exec boil.Executor) error {
	ret, err := FindIssuedContractReward(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IssuedContractRewardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IssuedContractRewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issuedContractRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"issued_contract_rewards\".* FROM \"issued_contract_rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, issuedContractRewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in IssuedContractRewardSlice")
	}

	*o = slice

	return nil
}

// IssuedContractRewardExists checks if the IssuedContractReward row exists.
func IssuedContractRewardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"issued_contract_rewards\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if issued_contract_rewards exists")
	}

	return exists, nil
}
