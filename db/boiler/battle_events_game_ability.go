// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleEventsGameAbility is an object representing the database table.
type BattleEventsGameAbility struct {
	ID                string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID           string      `boiler:"event_id" boil:"event_id" json:"eventID" toml:"eventID" yaml:"eventID"`
	GameAbilityID     null.String `boiler:"game_ability_id" boil:"game_ability_id" json:"gameAbilityID,omitempty" toml:"gameAbilityID" yaml:"gameAbilityID,omitempty"`
	IsTriggered       bool        `boiler:"is_triggered" boil:"is_triggered" json:"isTriggered" toml:"isTriggered" yaml:"isTriggered"`
	TriggeredByUserID null.String `boiler:"triggered_by_user_id" boil:"triggered_by_user_id" json:"triggeredByUserID,omitempty" toml:"triggeredByUserID" yaml:"triggeredByUserID,omitempty"`
	TriggeredOnCellX  null.Int    `boiler:"triggered_on_cell_x" boil:"triggered_on_cell_x" json:"triggeredOnCellX,omitempty" toml:"triggeredOnCellX" yaml:"triggeredOnCellX,omitempty"`
	TriggeredOnCellY  null.Int    `boiler:"triggered_on_cell_y" boil:"triggered_on_cell_y" json:"triggeredOnCellY,omitempty" toml:"triggeredOnCellY" yaml:"triggeredOnCellY,omitempty"`
	AbilityHash       null.String `boiler:"ability_hash" boil:"ability_hash" json:"abilityHash,omitempty" toml:"abilityHash" yaml:"abilityHash,omitempty"`

	R *battleEventsGameAbilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleEventsGameAbilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleEventsGameAbilityColumns = struct {
	ID                string
	EventID           string
	GameAbilityID     string
	IsTriggered       string
	TriggeredByUserID string
	TriggeredOnCellX  string
	TriggeredOnCellY  string
	AbilityHash       string
}{
	ID:                "id",
	EventID:           "event_id",
	GameAbilityID:     "game_ability_id",
	IsTriggered:       "is_triggered",
	TriggeredByUserID: "triggered_by_user_id",
	TriggeredOnCellX:  "triggered_on_cell_x",
	TriggeredOnCellY:  "triggered_on_cell_y",
	AbilityHash:       "ability_hash",
}

var BattleEventsGameAbilityTableColumns = struct {
	ID                string
	EventID           string
	GameAbilityID     string
	IsTriggered       string
	TriggeredByUserID string
	TriggeredOnCellX  string
	TriggeredOnCellY  string
	AbilityHash       string
}{
	ID:                "battle_events_game_ability.id",
	EventID:           "battle_events_game_ability.event_id",
	GameAbilityID:     "battle_events_game_ability.game_ability_id",
	IsTriggered:       "battle_events_game_ability.is_triggered",
	TriggeredByUserID: "battle_events_game_ability.triggered_by_user_id",
	TriggeredOnCellX:  "battle_events_game_ability.triggered_on_cell_x",
	TriggeredOnCellY:  "battle_events_game_ability.triggered_on_cell_y",
	AbilityHash:       "battle_events_game_ability.ability_hash",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BattleEventsGameAbilityWhere = struct {
	ID                whereHelperstring
	EventID           whereHelperstring
	GameAbilityID     whereHelpernull_String
	IsTriggered       whereHelperbool
	TriggeredByUserID whereHelpernull_String
	TriggeredOnCellX  whereHelpernull_Int
	TriggeredOnCellY  whereHelpernull_Int
	AbilityHash       whereHelpernull_String
}{
	ID:                whereHelperstring{field: "\"battle_events_game_ability\".\"id\""},
	EventID:           whereHelperstring{field: "\"battle_events_game_ability\".\"event_id\""},
	GameAbilityID:     whereHelpernull_String{field: "\"battle_events_game_ability\".\"game_ability_id\""},
	IsTriggered:       whereHelperbool{field: "\"battle_events_game_ability\".\"is_triggered\""},
	TriggeredByUserID: whereHelpernull_String{field: "\"battle_events_game_ability\".\"triggered_by_user_id\""},
	TriggeredOnCellX:  whereHelpernull_Int{field: "\"battle_events_game_ability\".\"triggered_on_cell_x\""},
	TriggeredOnCellY:  whereHelpernull_Int{field: "\"battle_events_game_ability\".\"triggered_on_cell_y\""},
	AbilityHash:       whereHelpernull_String{field: "\"battle_events_game_ability\".\"ability_hash\""},
}

// BattleEventsGameAbilityRels is where relationship names are stored.
var BattleEventsGameAbilityRels = struct {
	Event       string
	GameAbility string
}{
	Event:       "Event",
	GameAbility: "GameAbility",
}

// battleEventsGameAbilityR is where relationships are stored.
type battleEventsGameAbilityR struct {
	Event       *BattleEvent `boiler:"Event" boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
	GameAbility *GameAbility `boiler:"GameAbility" boil:"GameAbility" json:"GameAbility" toml:"GameAbility" yaml:"GameAbility"`
}

// NewStruct creates a new relationship struct
func (*battleEventsGameAbilityR) NewStruct() *battleEventsGameAbilityR {
	return &battleEventsGameAbilityR{}
}

// battleEventsGameAbilityL is where Load methods for each relationship are stored.
type battleEventsGameAbilityL struct{}

var (
	battleEventsGameAbilityAllColumns            = []string{"id", "event_id", "game_ability_id", "is_triggered", "triggered_by_user_id", "triggered_on_cell_x", "triggered_on_cell_y", "ability_hash"}
	battleEventsGameAbilityColumnsWithoutDefault = []string{"event_id", "game_ability_id", "triggered_by_user_id", "triggered_on_cell_x", "triggered_on_cell_y", "ability_hash"}
	battleEventsGameAbilityColumnsWithDefault    = []string{"id", "is_triggered"}
	battleEventsGameAbilityPrimaryKeyColumns     = []string{"id"}
)

type (
	// BattleEventsGameAbilitySlice is an alias for a slice of pointers to BattleEventsGameAbility.
	// This should almost always be used instead of []BattleEventsGameAbility.
	BattleEventsGameAbilitySlice []*BattleEventsGameAbility
	// BattleEventsGameAbilityHook is the signature for custom BattleEventsGameAbility hook methods
	BattleEventsGameAbilityHook func(boil.Executor, *BattleEventsGameAbility) error

	battleEventsGameAbilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleEventsGameAbilityType                 = reflect.TypeOf(&BattleEventsGameAbility{})
	battleEventsGameAbilityMapping              = queries.MakeStructMapping(battleEventsGameAbilityType)
	battleEventsGameAbilityPrimaryKeyMapping, _ = queries.BindMapping(battleEventsGameAbilityType, battleEventsGameAbilityMapping, battleEventsGameAbilityPrimaryKeyColumns)
	battleEventsGameAbilityInsertCacheMut       sync.RWMutex
	battleEventsGameAbilityInsertCache          = make(map[string]insertCache)
	battleEventsGameAbilityUpdateCacheMut       sync.RWMutex
	battleEventsGameAbilityUpdateCache          = make(map[string]updateCache)
	battleEventsGameAbilityUpsertCacheMut       sync.RWMutex
	battleEventsGameAbilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleEventsGameAbilityBeforeInsertHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityBeforeUpdateHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityBeforeDeleteHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityBeforeUpsertHooks []BattleEventsGameAbilityHook

var battleEventsGameAbilityAfterInsertHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityAfterSelectHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityAfterUpdateHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityAfterDeleteHooks []BattleEventsGameAbilityHook
var battleEventsGameAbilityAfterUpsertHooks []BattleEventsGameAbilityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleEventsGameAbility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleEventsGameAbility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleEventsGameAbility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleEventsGameAbility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleEventsGameAbility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleEventsGameAbility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleEventsGameAbility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleEventsGameAbility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleEventsGameAbility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsGameAbilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleEventsGameAbilityHook registers your hook function for all future operations.
func AddBattleEventsGameAbilityHook(hookPoint boil.HookPoint, battleEventsGameAbilityHook BattleEventsGameAbilityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battleEventsGameAbilityBeforeInsertHooks = append(battleEventsGameAbilityBeforeInsertHooks, battleEventsGameAbilityHook)
	case boil.BeforeUpdateHook:
		battleEventsGameAbilityBeforeUpdateHooks = append(battleEventsGameAbilityBeforeUpdateHooks, battleEventsGameAbilityHook)
	case boil.BeforeDeleteHook:
		battleEventsGameAbilityBeforeDeleteHooks = append(battleEventsGameAbilityBeforeDeleteHooks, battleEventsGameAbilityHook)
	case boil.BeforeUpsertHook:
		battleEventsGameAbilityBeforeUpsertHooks = append(battleEventsGameAbilityBeforeUpsertHooks, battleEventsGameAbilityHook)
	case boil.AfterInsertHook:
		battleEventsGameAbilityAfterInsertHooks = append(battleEventsGameAbilityAfterInsertHooks, battleEventsGameAbilityHook)
	case boil.AfterSelectHook:
		battleEventsGameAbilityAfterSelectHooks = append(battleEventsGameAbilityAfterSelectHooks, battleEventsGameAbilityHook)
	case boil.AfterUpdateHook:
		battleEventsGameAbilityAfterUpdateHooks = append(battleEventsGameAbilityAfterUpdateHooks, battleEventsGameAbilityHook)
	case boil.AfterDeleteHook:
		battleEventsGameAbilityAfterDeleteHooks = append(battleEventsGameAbilityAfterDeleteHooks, battleEventsGameAbilityHook)
	case boil.AfterUpsertHook:
		battleEventsGameAbilityAfterUpsertHooks = append(battleEventsGameAbilityAfterUpsertHooks, battleEventsGameAbilityHook)
	}
}

// One returns a single battleEventsGameAbility record from the query.
func (q battleEventsGameAbilityQuery) One(exec boil.Executor) (*BattleEventsGameAbility, error) {
	o := &BattleEventsGameAbility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_events_game_ability")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleEventsGameAbility records from the query.
func (q battleEventsGameAbilityQuery) All(exec boil.Executor) (BattleEventsGameAbilitySlice, error) {
	var o []*BattleEventsGameAbility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleEventsGameAbility slice")
	}

	if len(battleEventsGameAbilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleEventsGameAbility records in the query.
func (q battleEventsGameAbilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_events_game_ability rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleEventsGameAbilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_events_game_ability exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *BattleEventsGameAbility) Event(mods ...qm.QueryMod) battleEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleEvents(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events\"")

	return query
}

// GameAbility pointed to by the foreign key.
func (o *BattleEventsGameAbility) GameAbility(mods ...qm.QueryMod) gameAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameAbilityID),
	}

	queryMods = append(queryMods, mods...)

	query := GameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"game_abilities\"")

	return query
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleEventsGameAbilityL) LoadEvent(e boil.Executor, singular bool, maybeBattleEventsGameAbility interface{}, mods queries.Applicator) error {
	var slice []*BattleEventsGameAbility
	var object *BattleEventsGameAbility

	if singular {
		object = maybeBattleEventsGameAbility.(*BattleEventsGameAbility)
	} else {
		slice = *maybeBattleEventsGameAbility.(*[]*BattleEventsGameAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventsGameAbilityR{}
		}
		args = append(args, object.EventID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventsGameAbilityR{}
			}

			for _, a := range args {
				if a == obj.EventID {
					continue Outer
				}
			}

			args = append(args, obj.EventID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events`),
		qm.WhereIn(`battle_events.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleEvent")
	}

	var resultSlice []*BattleEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events")
	}

	if len(battleEventsGameAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &battleEventR{}
		}
		foreign.R.EventBattleEventsGameAbilities = append(foreign.R.EventBattleEventsGameAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &battleEventR{}
				}
				foreign.R.EventBattleEventsGameAbilities = append(foreign.R.EventBattleEventsGameAbilities, local)
				break
			}
		}
	}

	return nil
}

// LoadGameAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleEventsGameAbilityL) LoadGameAbility(e boil.Executor, singular bool, maybeBattleEventsGameAbility interface{}, mods queries.Applicator) error {
	var slice []*BattleEventsGameAbility
	var object *BattleEventsGameAbility

	if singular {
		object = maybeBattleEventsGameAbility.(*BattleEventsGameAbility)
	} else {
		slice = *maybeBattleEventsGameAbility.(*[]*BattleEventsGameAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventsGameAbilityR{}
		}
		if !queries.IsNil(object.GameAbilityID) {
			args = append(args, object.GameAbilityID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventsGameAbilityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GameAbilityID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GameAbilityID) {
				args = append(args, obj.GameAbilityID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_abilities`),
		qm.WhereIn(`game_abilities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameAbility")
	}

	var resultSlice []*GameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_abilities")
	}

	if len(battleEventsGameAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameAbility = foreign
		if foreign.R == nil {
			foreign.R = &gameAbilityR{}
		}
		foreign.R.BattleEventsGameAbilities = append(foreign.R.BattleEventsGameAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GameAbilityID, foreign.ID) {
				local.R.GameAbility = foreign
				if foreign.R == nil {
					foreign.R = &gameAbilityR{}
				}
				foreign.R.BattleEventsGameAbilities = append(foreign.R.BattleEventsGameAbilities, local)
				break
			}
		}
	}

	return nil
}

// SetEvent of the battleEventsGameAbility to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventBattleEventsGameAbilities.
func (o *BattleEventsGameAbility) SetEvent(exec boil.Executor, insert bool, related *BattleEvent) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_events_game_ability\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleEventsGameAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &battleEventsGameAbilityR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &battleEventR{
			EventBattleEventsGameAbilities: BattleEventsGameAbilitySlice{o},
		}
	} else {
		related.R.EventBattleEventsGameAbilities = append(related.R.EventBattleEventsGameAbilities, o)
	}

	return nil
}

// SetGameAbility of the battleEventsGameAbility to the related item.
// Sets o.R.GameAbility to related.
// Adds o to related.R.BattleEventsGameAbilities.
func (o *BattleEventsGameAbility) SetGameAbility(exec boil.Executor, insert bool, related *GameAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_events_game_ability\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleEventsGameAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GameAbilityID, related.ID)
	if o.R == nil {
		o.R = &battleEventsGameAbilityR{
			GameAbility: related,
		}
	} else {
		o.R.GameAbility = related
	}

	if related.R == nil {
		related.R = &gameAbilityR{
			BattleEventsGameAbilities: BattleEventsGameAbilitySlice{o},
		}
	} else {
		related.R.BattleEventsGameAbilities = append(related.R.BattleEventsGameAbilities, o)
	}

	return nil
}

// RemoveGameAbility relationship.
// Sets o.R.GameAbility to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleEventsGameAbility) RemoveGameAbility(exec boil.Executor, related *GameAbility) error {
	var err error

	queries.SetScanner(&o.GameAbilityID, nil)
	if _, err = o.Update(exec, boil.Whitelist("game_ability_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GameAbility = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleEventsGameAbilities {
		if queries.Equal(o.GameAbilityID, ri.GameAbilityID) {
			continue
		}

		ln := len(related.R.BattleEventsGameAbilities)
		if ln > 1 && i < ln-1 {
			related.R.BattleEventsGameAbilities[i] = related.R.BattleEventsGameAbilities[ln-1]
		}
		related.R.BattleEventsGameAbilities = related.R.BattleEventsGameAbilities[:ln-1]
		break
	}
	return nil
}

// BattleEventsGameAbilities retrieves all the records using an executor.
func BattleEventsGameAbilities(mods ...qm.QueryMod) battleEventsGameAbilityQuery {
	mods = append(mods, qm.From("\"battle_events_game_ability\""))
	return battleEventsGameAbilityQuery{NewQuery(mods...)}
}

// FindBattleEventsGameAbility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleEventsGameAbility(exec boil.Executor, iD string, selectCols ...string) (*BattleEventsGameAbility, error) {
	battleEventsGameAbilityObj := &BattleEventsGameAbility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_events_game_ability\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleEventsGameAbilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_events_game_ability")
	}

	if err = battleEventsGameAbilityObj.doAfterSelectHooks(exec); err != nil {
		return battleEventsGameAbilityObj, err
	}

	return battleEventsGameAbilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleEventsGameAbility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events_game_ability provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventsGameAbilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleEventsGameAbilityInsertCacheMut.RLock()
	cache, cached := battleEventsGameAbilityInsertCache[key]
	battleEventsGameAbilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleEventsGameAbilityAllColumns,
			battleEventsGameAbilityColumnsWithDefault,
			battleEventsGameAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleEventsGameAbilityType, battleEventsGameAbilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleEventsGameAbilityType, battleEventsGameAbilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_events_game_ability\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_events_game_ability\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_events_game_ability")
	}

	if !cached {
		battleEventsGameAbilityInsertCacheMut.Lock()
		battleEventsGameAbilityInsertCache[key] = cache
		battleEventsGameAbilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleEventsGameAbility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleEventsGameAbility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleEventsGameAbilityUpdateCacheMut.RLock()
	cache, cached := battleEventsGameAbilityUpdateCache[key]
	battleEventsGameAbilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleEventsGameAbilityAllColumns,
			battleEventsGameAbilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_events_game_ability, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_events_game_ability\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleEventsGameAbilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleEventsGameAbilityType, battleEventsGameAbilityMapping, append(wl, battleEventsGameAbilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_events_game_ability row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_events_game_ability")
	}

	if !cached {
		battleEventsGameAbilityUpdateCacheMut.Lock()
		battleEventsGameAbilityUpdateCache[key] = cache
		battleEventsGameAbilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleEventsGameAbilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_events_game_ability")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_events_game_ability")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleEventsGameAbilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsGameAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_events_game_ability\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleEventsGameAbilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleEventsGameAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleEventsGameAbility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleEventsGameAbility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events_game_ability provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventsGameAbilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleEventsGameAbilityUpsertCacheMut.RLock()
	cache, cached := battleEventsGameAbilityUpsertCache[key]
	battleEventsGameAbilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleEventsGameAbilityAllColumns,
			battleEventsGameAbilityColumnsWithDefault,
			battleEventsGameAbilityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battleEventsGameAbilityAllColumns,
			battleEventsGameAbilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_events_game_ability, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleEventsGameAbilityPrimaryKeyColumns))
			copy(conflict, battleEventsGameAbilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_events_game_ability\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleEventsGameAbilityType, battleEventsGameAbilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleEventsGameAbilityType, battleEventsGameAbilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_events_game_ability")
	}

	if !cached {
		battleEventsGameAbilityUpsertCacheMut.Lock()
		battleEventsGameAbilityUpsertCache[key] = cache
		battleEventsGameAbilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleEventsGameAbility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleEventsGameAbility) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleEventsGameAbility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleEventsGameAbilityPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_events_game_ability\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_events_game_ability")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_events_game_ability")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleEventsGameAbilityQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleEventsGameAbilityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_events_game_ability")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events_game_ability")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleEventsGameAbilitySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleEventsGameAbilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsGameAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_events_game_ability\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventsGameAbilityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleEventsGameAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events_game_ability")
	}

	if len(battleEventsGameAbilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleEventsGameAbility) Reload(exec boil.Executor) error {
	ret, err := FindBattleEventsGameAbility(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleEventsGameAbilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleEventsGameAbilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsGameAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_events_game_ability\".* FROM \"battle_events_game_ability\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventsGameAbilityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleEventsGameAbilitySlice")
	}

	*o = slice

	return nil
}

// BattleEventsGameAbilityExists checks if the BattleEventsGameAbility row exists.
func BattleEventsGameAbilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_events_game_ability\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_events_game_ability exists")
	}

	return exists, nil
}
