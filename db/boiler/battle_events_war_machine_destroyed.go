// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleEventsWarMachineDestroyed is an object representing the database table.
type BattleEventsWarMachineDestroyed struct {
	ID                      string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID                 string      `boiler:"event_id" boil:"event_id" json:"eventID" toml:"eventID" yaml:"eventID"`
	RelatedEventID          null.String `boiler:"related_event_id" boil:"related_event_id" json:"relatedEventID,omitempty" toml:"relatedEventID" yaml:"relatedEventID,omitempty"`
	DestroyedWarMachineHash string      `boiler:"destroyed_war_machine_hash" boil:"destroyed_war_machine_hash" json:"destroyedWarMachineHash" toml:"destroyedWarMachineHash" yaml:"destroyedWarMachineHash"`
	KillByWarMachineHash    null.String `boiler:"kill_by_war_machine_hash" boil:"kill_by_war_machine_hash" json:"killByWarMachineHash,omitempty" toml:"killByWarMachineHash" yaml:"killByWarMachineHash,omitempty"`

	R *battleEventsWarMachineDestroyedR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleEventsWarMachineDestroyedL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleEventsWarMachineDestroyedColumns = struct {
	ID                      string
	EventID                 string
	RelatedEventID          string
	DestroyedWarMachineHash string
	KillByWarMachineHash    string
}{
	ID:                      "id",
	EventID:                 "event_id",
	RelatedEventID:          "related_event_id",
	DestroyedWarMachineHash: "destroyed_war_machine_hash",
	KillByWarMachineHash:    "kill_by_war_machine_hash",
}

var BattleEventsWarMachineDestroyedTableColumns = struct {
	ID                      string
	EventID                 string
	RelatedEventID          string
	DestroyedWarMachineHash string
	KillByWarMachineHash    string
}{
	ID:                      "battle_events_war_machine_destroyed.id",
	EventID:                 "battle_events_war_machine_destroyed.event_id",
	RelatedEventID:          "battle_events_war_machine_destroyed.related_event_id",
	DestroyedWarMachineHash: "battle_events_war_machine_destroyed.destroyed_war_machine_hash",
	KillByWarMachineHash:    "battle_events_war_machine_destroyed.kill_by_war_machine_hash",
}

// Generated where

var BattleEventsWarMachineDestroyedWhere = struct {
	ID                      whereHelperstring
	EventID                 whereHelperstring
	RelatedEventID          whereHelpernull_String
	DestroyedWarMachineHash whereHelperstring
	KillByWarMachineHash    whereHelpernull_String
}{
	ID:                      whereHelperstring{field: "\"battle_events_war_machine_destroyed\".\"id\""},
	EventID:                 whereHelperstring{field: "\"battle_events_war_machine_destroyed\".\"event_id\""},
	RelatedEventID:          whereHelpernull_String{field: "\"battle_events_war_machine_destroyed\".\"related_event_id\""},
	DestroyedWarMachineHash: whereHelperstring{field: "\"battle_events_war_machine_destroyed\".\"destroyed_war_machine_hash\""},
	KillByWarMachineHash:    whereHelpernull_String{field: "\"battle_events_war_machine_destroyed\".\"kill_by_war_machine_hash\""},
}

// BattleEventsWarMachineDestroyedRels is where relationship names are stored.
var BattleEventsWarMachineDestroyedRels = struct {
	Event                                                                      string
	RelatedEvent                                                               string
	WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines string
}{
	Event:        "Event",
	RelatedEvent: "RelatedEvent",
	WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines: "WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines",
}

// battleEventsWarMachineDestroyedR is where relationships are stored.
type battleEventsWarMachineDestroyedR struct {
	Event                                                                      *BattleEvent                                           `boiler:"Event" boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
	RelatedEvent                                                               *BattleEvent                                           `boiler:"RelatedEvent" boil:"RelatedEvent" json:"RelatedEvent" toml:"RelatedEvent" yaml:"RelatedEvent"`
	WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines BattleEventsWarMachineDestroyedAssistedWarMachineSlice `boiler:"WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines" boil:"WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines" json:"WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines" toml:"WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines" yaml:"WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines"`
}

// NewStruct creates a new relationship struct
func (*battleEventsWarMachineDestroyedR) NewStruct() *battleEventsWarMachineDestroyedR {
	return &battleEventsWarMachineDestroyedR{}
}

// battleEventsWarMachineDestroyedL is where Load methods for each relationship are stored.
type battleEventsWarMachineDestroyedL struct{}

var (
	battleEventsWarMachineDestroyedAllColumns            = []string{"id", "event_id", "related_event_id", "destroyed_war_machine_hash", "kill_by_war_machine_hash"}
	battleEventsWarMachineDestroyedColumnsWithoutDefault = []string{"event_id", "related_event_id", "kill_by_war_machine_hash"}
	battleEventsWarMachineDestroyedColumnsWithDefault    = []string{"id", "destroyed_war_machine_hash"}
	battleEventsWarMachineDestroyedPrimaryKeyColumns     = []string{"id"}
)

type (
	// BattleEventsWarMachineDestroyedSlice is an alias for a slice of pointers to BattleEventsWarMachineDestroyed.
	// This should almost always be used instead of []BattleEventsWarMachineDestroyed.
	BattleEventsWarMachineDestroyedSlice []*BattleEventsWarMachineDestroyed
	// BattleEventsWarMachineDestroyedHook is the signature for custom BattleEventsWarMachineDestroyed hook methods
	BattleEventsWarMachineDestroyedHook func(boil.Executor, *BattleEventsWarMachineDestroyed) error

	battleEventsWarMachineDestroyedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleEventsWarMachineDestroyedType                 = reflect.TypeOf(&BattleEventsWarMachineDestroyed{})
	battleEventsWarMachineDestroyedMapping              = queries.MakeStructMapping(battleEventsWarMachineDestroyedType)
	battleEventsWarMachineDestroyedPrimaryKeyMapping, _ = queries.BindMapping(battleEventsWarMachineDestroyedType, battleEventsWarMachineDestroyedMapping, battleEventsWarMachineDestroyedPrimaryKeyColumns)
	battleEventsWarMachineDestroyedInsertCacheMut       sync.RWMutex
	battleEventsWarMachineDestroyedInsertCache          = make(map[string]insertCache)
	battleEventsWarMachineDestroyedUpdateCacheMut       sync.RWMutex
	battleEventsWarMachineDestroyedUpdateCache          = make(map[string]updateCache)
	battleEventsWarMachineDestroyedUpsertCacheMut       sync.RWMutex
	battleEventsWarMachineDestroyedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleEventsWarMachineDestroyedBeforeInsertHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedBeforeUpdateHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedBeforeDeleteHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedBeforeUpsertHooks []BattleEventsWarMachineDestroyedHook

var battleEventsWarMachineDestroyedAfterInsertHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedAfterSelectHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedAfterUpdateHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedAfterDeleteHooks []BattleEventsWarMachineDestroyedHook
var battleEventsWarMachineDestroyedAfterUpsertHooks []BattleEventsWarMachineDestroyedHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleEventsWarMachineDestroyed) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleEventsWarMachineDestroyed) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleEventsWarMachineDestroyed) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleEventsWarMachineDestroyed) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleEventsWarMachineDestroyed) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleEventsWarMachineDestroyed) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleEventsWarMachineDestroyed) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleEventsWarMachineDestroyed) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleEventsWarMachineDestroyed) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleEventsWarMachineDestroyedHook registers your hook function for all future operations.
func AddBattleEventsWarMachineDestroyedHook(hookPoint boil.HookPoint, battleEventsWarMachineDestroyedHook BattleEventsWarMachineDestroyedHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battleEventsWarMachineDestroyedBeforeInsertHooks = append(battleEventsWarMachineDestroyedBeforeInsertHooks, battleEventsWarMachineDestroyedHook)
	case boil.BeforeUpdateHook:
		battleEventsWarMachineDestroyedBeforeUpdateHooks = append(battleEventsWarMachineDestroyedBeforeUpdateHooks, battleEventsWarMachineDestroyedHook)
	case boil.BeforeDeleteHook:
		battleEventsWarMachineDestroyedBeforeDeleteHooks = append(battleEventsWarMachineDestroyedBeforeDeleteHooks, battleEventsWarMachineDestroyedHook)
	case boil.BeforeUpsertHook:
		battleEventsWarMachineDestroyedBeforeUpsertHooks = append(battleEventsWarMachineDestroyedBeforeUpsertHooks, battleEventsWarMachineDestroyedHook)
	case boil.AfterInsertHook:
		battleEventsWarMachineDestroyedAfterInsertHooks = append(battleEventsWarMachineDestroyedAfterInsertHooks, battleEventsWarMachineDestroyedHook)
	case boil.AfterSelectHook:
		battleEventsWarMachineDestroyedAfterSelectHooks = append(battleEventsWarMachineDestroyedAfterSelectHooks, battleEventsWarMachineDestroyedHook)
	case boil.AfterUpdateHook:
		battleEventsWarMachineDestroyedAfterUpdateHooks = append(battleEventsWarMachineDestroyedAfterUpdateHooks, battleEventsWarMachineDestroyedHook)
	case boil.AfterDeleteHook:
		battleEventsWarMachineDestroyedAfterDeleteHooks = append(battleEventsWarMachineDestroyedAfterDeleteHooks, battleEventsWarMachineDestroyedHook)
	case boil.AfterUpsertHook:
		battleEventsWarMachineDestroyedAfterUpsertHooks = append(battleEventsWarMachineDestroyedAfterUpsertHooks, battleEventsWarMachineDestroyedHook)
	}
}

// One returns a single battleEventsWarMachineDestroyed record from the query.
func (q battleEventsWarMachineDestroyedQuery) One(exec boil.Executor) (*BattleEventsWarMachineDestroyed, error) {
	o := &BattleEventsWarMachineDestroyed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_events_war_machine_destroyed")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleEventsWarMachineDestroyed records from the query.
func (q battleEventsWarMachineDestroyedQuery) All(exec boil.Executor) (BattleEventsWarMachineDestroyedSlice, error) {
	var o []*BattleEventsWarMachineDestroyed

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleEventsWarMachineDestroyed slice")
	}

	if len(battleEventsWarMachineDestroyedAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleEventsWarMachineDestroyed records in the query.
func (q battleEventsWarMachineDestroyedQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_events_war_machine_destroyed rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleEventsWarMachineDestroyedQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_events_war_machine_destroyed exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *BattleEventsWarMachineDestroyed) Event(mods ...qm.QueryMod) battleEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleEvents(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events\"")

	return query
}

// RelatedEvent pointed to by the foreign key.
func (o *BattleEventsWarMachineDestroyed) RelatedEvent(mods ...qm.QueryMod) battleEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedEventID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleEvents(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events\"")

	return query
}

// WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines retrieves all the battle_events_war_machine_destroyed_assisted_war_machine's BattleEventsWarMachineDestroyedAssistedWarMachines with an executor via war_machine_destroyed_event_id column.
func (o *BattleEventsWarMachineDestroyed) WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines(mods ...qm.QueryMod) battleEventsWarMachineDestroyedAssistedWarMachineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events_war_machine_destroyed_assisted_war_machines\".\"war_machine_destroyed_event_id\"=?", o.ID),
	)

	query := BattleEventsWarMachineDestroyedAssistedWarMachines(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events_war_machine_destroyed_assisted_war_machines\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events_war_machine_destroyed_assisted_war_machines\".*"})
	}

	return query
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleEventsWarMachineDestroyedL) LoadEvent(e boil.Executor, singular bool, maybeBattleEventsWarMachineDestroyed interface{}, mods queries.Applicator) error {
	var slice []*BattleEventsWarMachineDestroyed
	var object *BattleEventsWarMachineDestroyed

	if singular {
		object = maybeBattleEventsWarMachineDestroyed.(*BattleEventsWarMachineDestroyed)
	} else {
		slice = *maybeBattleEventsWarMachineDestroyed.(*[]*BattleEventsWarMachineDestroyed)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventsWarMachineDestroyedR{}
		}
		args = append(args, object.EventID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventsWarMachineDestroyedR{}
			}

			for _, a := range args {
				if a == obj.EventID {
					continue Outer
				}
			}

			args = append(args, obj.EventID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events`),
		qm.WhereIn(`battle_events.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleEvent")
	}

	var resultSlice []*BattleEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events")
	}

	if len(battleEventsWarMachineDestroyedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &battleEventR{}
		}
		foreign.R.EventBattleEventsWarMachineDestroyeds = append(foreign.R.EventBattleEventsWarMachineDestroyeds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &battleEventR{}
				}
				foreign.R.EventBattleEventsWarMachineDestroyeds = append(foreign.R.EventBattleEventsWarMachineDestroyeds, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleEventsWarMachineDestroyedL) LoadRelatedEvent(e boil.Executor, singular bool, maybeBattleEventsWarMachineDestroyed interface{}, mods queries.Applicator) error {
	var slice []*BattleEventsWarMachineDestroyed
	var object *BattleEventsWarMachineDestroyed

	if singular {
		object = maybeBattleEventsWarMachineDestroyed.(*BattleEventsWarMachineDestroyed)
	} else {
		slice = *maybeBattleEventsWarMachineDestroyed.(*[]*BattleEventsWarMachineDestroyed)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventsWarMachineDestroyedR{}
		}
		if !queries.IsNil(object.RelatedEventID) {
			args = append(args, object.RelatedEventID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventsWarMachineDestroyedR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedEventID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedEventID) {
				args = append(args, obj.RelatedEventID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events`),
		qm.WhereIn(`battle_events.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleEvent")
	}

	var resultSlice []*BattleEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events")
	}

	if len(battleEventsWarMachineDestroyedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedEvent = foreign
		if foreign.R == nil {
			foreign.R = &battleEventR{}
		}
		foreign.R.RelatedEventBattleEventsWarMachineDestroyeds = append(foreign.R.RelatedEventBattleEventsWarMachineDestroyeds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedEventID, foreign.ID) {
				local.R.RelatedEvent = foreign
				if foreign.R == nil {
					foreign.R = &battleEventR{}
				}
				foreign.R.RelatedEventBattleEventsWarMachineDestroyeds = append(foreign.R.RelatedEventBattleEventsWarMachineDestroyeds, local)
				break
			}
		}
	}

	return nil
}

// LoadWarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleEventsWarMachineDestroyedL) LoadWarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines(e boil.Executor, singular bool, maybeBattleEventsWarMachineDestroyed interface{}, mods queries.Applicator) error {
	var slice []*BattleEventsWarMachineDestroyed
	var object *BattleEventsWarMachineDestroyed

	if singular {
		object = maybeBattleEventsWarMachineDestroyed.(*BattleEventsWarMachineDestroyed)
	} else {
		slice = *maybeBattleEventsWarMachineDestroyed.(*[]*BattleEventsWarMachineDestroyed)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventsWarMachineDestroyedR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventsWarMachineDestroyedR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events_war_machine_destroyed_assisted_war_machines`),
		qm.WhereIn(`battle_events_war_machine_destroyed_assisted_war_machines.war_machine_destroyed_event_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events_war_machine_destroyed_assisted_war_machines")
	}

	var resultSlice []*BattleEventsWarMachineDestroyedAssistedWarMachine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events_war_machine_destroyed_assisted_war_machines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if len(battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventsWarMachineDestroyedAssistedWarMachineR{}
			}
			foreign.R.WarMachineDestroyedEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WarMachineDestroyedEventID {
				local.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines = append(local.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventsWarMachineDestroyedAssistedWarMachineR{}
				}
				foreign.R.WarMachineDestroyedEvent = local
				break
			}
		}
	}

	return nil
}

// SetEvent of the battleEventsWarMachineDestroyed to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventBattleEventsWarMachineDestroyeds.
func (o *BattleEventsWarMachineDestroyed) SetEvent(exec boil.Executor, insert bool, related *BattleEvent) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_events_war_machine_destroyed\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleEventsWarMachineDestroyedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &battleEventsWarMachineDestroyedR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &battleEventR{
			EventBattleEventsWarMachineDestroyeds: BattleEventsWarMachineDestroyedSlice{o},
		}
	} else {
		related.R.EventBattleEventsWarMachineDestroyeds = append(related.R.EventBattleEventsWarMachineDestroyeds, o)
	}

	return nil
}

// SetRelatedEvent of the battleEventsWarMachineDestroyed to the related item.
// Sets o.R.RelatedEvent to related.
// Adds o to related.R.RelatedEventBattleEventsWarMachineDestroyeds.
func (o *BattleEventsWarMachineDestroyed) SetRelatedEvent(exec boil.Executor, insert bool, related *BattleEvent) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_events_war_machine_destroyed\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleEventsWarMachineDestroyedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedEventID, related.ID)
	if o.R == nil {
		o.R = &battleEventsWarMachineDestroyedR{
			RelatedEvent: related,
		}
	} else {
		o.R.RelatedEvent = related
	}

	if related.R == nil {
		related.R = &battleEventR{
			RelatedEventBattleEventsWarMachineDestroyeds: BattleEventsWarMachineDestroyedSlice{o},
		}
	} else {
		related.R.RelatedEventBattleEventsWarMachineDestroyeds = append(related.R.RelatedEventBattleEventsWarMachineDestroyeds, o)
	}

	return nil
}

// RemoveRelatedEvent relationship.
// Sets o.R.RelatedEvent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleEventsWarMachineDestroyed) RemoveRelatedEvent(exec boil.Executor, related *BattleEvent) error {
	var err error

	queries.SetScanner(&o.RelatedEventID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_event_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedEvent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedEventBattleEventsWarMachineDestroyeds {
		if queries.Equal(o.RelatedEventID, ri.RelatedEventID) {
			continue
		}

		ln := len(related.R.RelatedEventBattleEventsWarMachineDestroyeds)
		if ln > 1 && i < ln-1 {
			related.R.RelatedEventBattleEventsWarMachineDestroyeds[i] = related.R.RelatedEventBattleEventsWarMachineDestroyeds[ln-1]
		}
		related.R.RelatedEventBattleEventsWarMachineDestroyeds = related.R.RelatedEventBattleEventsWarMachineDestroyeds[:ln-1]
		break
	}
	return nil
}

// AddWarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines adds the given related objects to the existing relationships
// of the battle_events_war_machine_destroyed, optionally inserting them as new records.
// Appends related to o.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines.
// Sets related.R.WarMachineDestroyedEvent appropriately.
func (o *BattleEventsWarMachineDestroyed) AddWarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines(exec boil.Executor, insert bool, related ...*BattleEventsWarMachineDestroyedAssistedWarMachine) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WarMachineDestroyedEventID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events_war_machine_destroyed_assisted_war_machines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_destroyed_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WarMachineDestroyedEventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleEventsWarMachineDestroyedR{
			WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines: related,
		}
	} else {
		o.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines = append(o.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventsWarMachineDestroyedAssistedWarMachineR{
				WarMachineDestroyedEvent: o,
			}
		} else {
			rel.R.WarMachineDestroyedEvent = o
		}
	}
	return nil
}

// BattleEventsWarMachineDestroyeds retrieves all the records using an executor.
func BattleEventsWarMachineDestroyeds(mods ...qm.QueryMod) battleEventsWarMachineDestroyedQuery {
	mods = append(mods, qm.From("\"battle_events_war_machine_destroyed\""))
	return battleEventsWarMachineDestroyedQuery{NewQuery(mods...)}
}

// FindBattleEventsWarMachineDestroyed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleEventsWarMachineDestroyed(exec boil.Executor, iD string, selectCols ...string) (*BattleEventsWarMachineDestroyed, error) {
	battleEventsWarMachineDestroyedObj := &BattleEventsWarMachineDestroyed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_events_war_machine_destroyed\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleEventsWarMachineDestroyedObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_events_war_machine_destroyed")
	}

	if err = battleEventsWarMachineDestroyedObj.doAfterSelectHooks(exec); err != nil {
		return battleEventsWarMachineDestroyedObj, err
	}

	return battleEventsWarMachineDestroyedObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleEventsWarMachineDestroyed) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events_war_machine_destroyed provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventsWarMachineDestroyedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleEventsWarMachineDestroyedInsertCacheMut.RLock()
	cache, cached := battleEventsWarMachineDestroyedInsertCache[key]
	battleEventsWarMachineDestroyedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleEventsWarMachineDestroyedAllColumns,
			battleEventsWarMachineDestroyedColumnsWithDefault,
			battleEventsWarMachineDestroyedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedType, battleEventsWarMachineDestroyedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedType, battleEventsWarMachineDestroyedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_events_war_machine_destroyed\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_events_war_machine_destroyed\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_events_war_machine_destroyed")
	}

	if !cached {
		battleEventsWarMachineDestroyedInsertCacheMut.Lock()
		battleEventsWarMachineDestroyedInsertCache[key] = cache
		battleEventsWarMachineDestroyedInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleEventsWarMachineDestroyed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleEventsWarMachineDestroyed) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleEventsWarMachineDestroyedUpdateCacheMut.RLock()
	cache, cached := battleEventsWarMachineDestroyedUpdateCache[key]
	battleEventsWarMachineDestroyedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleEventsWarMachineDestroyedAllColumns,
			battleEventsWarMachineDestroyedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_events_war_machine_destroyed, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_events_war_machine_destroyed\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleEventsWarMachineDestroyedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedType, battleEventsWarMachineDestroyedMapping, append(wl, battleEventsWarMachineDestroyedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_events_war_machine_destroyed row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_events_war_machine_destroyed")
	}

	if !cached {
		battleEventsWarMachineDestroyedUpdateCacheMut.Lock()
		battleEventsWarMachineDestroyedUpdateCache[key] = cache
		battleEventsWarMachineDestroyedUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleEventsWarMachineDestroyedQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_events_war_machine_destroyed")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_events_war_machine_destroyed")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleEventsWarMachineDestroyedSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsWarMachineDestroyedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_events_war_machine_destroyed\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleEventsWarMachineDestroyedPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleEventsWarMachineDestroyed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleEventsWarMachineDestroyed")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleEventsWarMachineDestroyed) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events_war_machine_destroyed provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventsWarMachineDestroyedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleEventsWarMachineDestroyedUpsertCacheMut.RLock()
	cache, cached := battleEventsWarMachineDestroyedUpsertCache[key]
	battleEventsWarMachineDestroyedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleEventsWarMachineDestroyedAllColumns,
			battleEventsWarMachineDestroyedColumnsWithDefault,
			battleEventsWarMachineDestroyedColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battleEventsWarMachineDestroyedAllColumns,
			battleEventsWarMachineDestroyedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_events_war_machine_destroyed, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleEventsWarMachineDestroyedPrimaryKeyColumns))
			copy(conflict, battleEventsWarMachineDestroyedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_events_war_machine_destroyed\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedType, battleEventsWarMachineDestroyedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedType, battleEventsWarMachineDestroyedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_events_war_machine_destroyed")
	}

	if !cached {
		battleEventsWarMachineDestroyedUpsertCacheMut.Lock()
		battleEventsWarMachineDestroyedUpsertCache[key] = cache
		battleEventsWarMachineDestroyedUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleEventsWarMachineDestroyed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleEventsWarMachineDestroyed) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleEventsWarMachineDestroyed provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleEventsWarMachineDestroyedPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_events_war_machine_destroyed\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_events_war_machine_destroyed")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_events_war_machine_destroyed")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleEventsWarMachineDestroyedQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleEventsWarMachineDestroyedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_events_war_machine_destroyed")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events_war_machine_destroyed")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleEventsWarMachineDestroyedSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleEventsWarMachineDestroyedBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsWarMachineDestroyedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_events_war_machine_destroyed\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventsWarMachineDestroyedPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleEventsWarMachineDestroyed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events_war_machine_destroyed")
	}

	if len(battleEventsWarMachineDestroyedAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleEventsWarMachineDestroyed) Reload(exec boil.Executor) error {
	ret, err := FindBattleEventsWarMachineDestroyed(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleEventsWarMachineDestroyedSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleEventsWarMachineDestroyedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsWarMachineDestroyedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_events_war_machine_destroyed\".* FROM \"battle_events_war_machine_destroyed\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventsWarMachineDestroyedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleEventsWarMachineDestroyedSlice")
	}

	*o = slice

	return nil
}

// BattleEventsWarMachineDestroyedExists checks if the BattleEventsWarMachineDestroyed row exists.
func BattleEventsWarMachineDestroyedExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_events_war_machine_destroyed\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_events_war_machine_destroyed exists")
	}

	return exists, nil
}
