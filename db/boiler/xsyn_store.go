// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// XsynStore is an object representing the database table.
type XsynStore struct {
	ID                   string            `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	FactionID            null.String       `boiler:"faction_id" boil:"faction_id" json:"faction_id,omitempty" toml:"faction_id" yaml:"faction_id,omitempty"`
	Name                 string            `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	CollectionID         null.String       `boiler:"collection_id" boil:"collection_id" json:"collection_id,omitempty" toml:"collection_id" yaml:"collection_id,omitempty"`
	Description          string            `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	Image                string            `boiler:"image" boil:"image" json:"image" toml:"image" yaml:"image"`
	AnimationURL         string            `boiler:"animation_url" boil:"animation_url" json:"animation_url" toml:"animation_url" yaml:"animation_url"`
	Attributes           null.JSON         `boiler:"attributes" boil:"attributes" json:"attributes,omitempty" toml:"attributes" yaml:"attributes,omitempty"`
	AdditionalMetadata   null.JSON         `boiler:"additional_metadata" boil:"additional_metadata" json:"additional_metadata,omitempty" toml:"additional_metadata" yaml:"additional_metadata,omitempty"`
	Keywords             null.String       `boiler:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	UsdCentCost          int               `boiler:"usd_cent_cost" boil:"usd_cent_cost" json:"usd_cent_cost" toml:"usd_cent_cost" yaml:"usd_cent_cost"`
	AmountSold           int               `boiler:"amount_sold" boil:"amount_sold" json:"amount_sold" toml:"amount_sold" yaml:"amount_sold"`
	AmountAvailable      int               `boiler:"amount_available" boil:"amount_available" json:"amount_available" toml:"amount_available" yaml:"amount_available"`
	SoldAfter            time.Time         `boiler:"sold_after" boil:"sold_after" json:"sold_after" toml:"sold_after" yaml:"sold_after"`
	SoldBefore           time.Time         `boiler:"sold_before" boil:"sold_before" json:"sold_before" toml:"sold_before" yaml:"sold_before"`
	DeletedAt            null.Time         `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt            time.Time         `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time         `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Restriction          string            `boiler:"restriction" boil:"restriction" json:"restriction" toml:"restriction" yaml:"restriction"`
	WhiteListedAddresses types.StringArray `boiler:"white_listed_addresses" boil:"white_listed_addresses" json:"white_listed_addresses,omitempty" toml:"white_listed_addresses" yaml:"white_listed_addresses,omitempty"`
	ImageAvatar          string            `boiler:"image_avatar" boil:"image_avatar" json:"image_avatar" toml:"image_avatar" yaml:"image_avatar"`

	R *xsynStoreR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L xsynStoreL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var XsynStoreColumns = struct {
	ID                   string
	FactionID            string
	Name                 string
	CollectionID         string
	Description          string
	Image                string
	AnimationURL         string
	Attributes           string
	AdditionalMetadata   string
	Keywords             string
	UsdCentCost          string
	AmountSold           string
	AmountAvailable      string
	SoldAfter            string
	SoldBefore           string
	DeletedAt            string
	CreatedAt            string
	UpdatedAt            string
	Restriction          string
	WhiteListedAddresses string
	ImageAvatar          string
}{
	ID:                   "id",
	FactionID:            "faction_id",
	Name:                 "name",
	CollectionID:         "collection_id",
	Description:          "description",
	Image:                "image",
	AnimationURL:         "animation_url",
	Attributes:           "attributes",
	AdditionalMetadata:   "additional_metadata",
	Keywords:             "keywords",
	UsdCentCost:          "usd_cent_cost",
	AmountSold:           "amount_sold",
	AmountAvailable:      "amount_available",
	SoldAfter:            "sold_after",
	SoldBefore:           "sold_before",
	DeletedAt:            "deleted_at",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Restriction:          "restriction",
	WhiteListedAddresses: "white_listed_addresses",
	ImageAvatar:          "image_avatar",
}

var XsynStoreTableColumns = struct {
	ID                   string
	FactionID            string
	Name                 string
	CollectionID         string
	Description          string
	Image                string
	AnimationURL         string
	Attributes           string
	AdditionalMetadata   string
	Keywords             string
	UsdCentCost          string
	AmountSold           string
	AmountAvailable      string
	SoldAfter            string
	SoldBefore           string
	DeletedAt            string
	CreatedAt            string
	UpdatedAt            string
	Restriction          string
	WhiteListedAddresses string
	ImageAvatar          string
}{
	ID:                   "xsyn_store.id",
	FactionID:            "xsyn_store.faction_id",
	Name:                 "xsyn_store.name",
	CollectionID:         "xsyn_store.collection_id",
	Description:          "xsyn_store.description",
	Image:                "xsyn_store.image",
	AnimationURL:         "xsyn_store.animation_url",
	Attributes:           "xsyn_store.attributes",
	AdditionalMetadata:   "xsyn_store.additional_metadata",
	Keywords:             "xsyn_store.keywords",
	UsdCentCost:          "xsyn_store.usd_cent_cost",
	AmountSold:           "xsyn_store.amount_sold",
	AmountAvailable:      "xsyn_store.amount_available",
	SoldAfter:            "xsyn_store.sold_after",
	SoldBefore:           "xsyn_store.sold_before",
	DeletedAt:            "xsyn_store.deleted_at",
	CreatedAt:            "xsyn_store.created_at",
	UpdatedAt:            "xsyn_store.updated_at",
	Restriction:          "xsyn_store.restriction",
	WhiteListedAddresses: "xsyn_store.white_listed_addresses",
	ImageAvatar:          "xsyn_store.image_avatar",
}

// Generated where

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var XsynStoreWhere = struct {
	ID                   whereHelperstring
	FactionID            whereHelpernull_String
	Name                 whereHelperstring
	CollectionID         whereHelpernull_String
	Description          whereHelperstring
	Image                whereHelperstring
	AnimationURL         whereHelperstring
	Attributes           whereHelpernull_JSON
	AdditionalMetadata   whereHelpernull_JSON
	Keywords             whereHelpernull_String
	UsdCentCost          whereHelperint
	AmountSold           whereHelperint
	AmountAvailable      whereHelperint
	SoldAfter            whereHelpertime_Time
	SoldBefore           whereHelpertime_Time
	DeletedAt            whereHelpernull_Time
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	Restriction          whereHelperstring
	WhiteListedAddresses whereHelpertypes_StringArray
	ImageAvatar          whereHelperstring
}{
	ID:                   whereHelperstring{field: "\"xsyn_store\".\"id\""},
	FactionID:            whereHelpernull_String{field: "\"xsyn_store\".\"faction_id\""},
	Name:                 whereHelperstring{field: "\"xsyn_store\".\"name\""},
	CollectionID:         whereHelpernull_String{field: "\"xsyn_store\".\"collection_id\""},
	Description:          whereHelperstring{field: "\"xsyn_store\".\"description\""},
	Image:                whereHelperstring{field: "\"xsyn_store\".\"image\""},
	AnimationURL:         whereHelperstring{field: "\"xsyn_store\".\"animation_url\""},
	Attributes:           whereHelpernull_JSON{field: "\"xsyn_store\".\"attributes\""},
	AdditionalMetadata:   whereHelpernull_JSON{field: "\"xsyn_store\".\"additional_metadata\""},
	Keywords:             whereHelpernull_String{field: "\"xsyn_store\".\"keywords\""},
	UsdCentCost:          whereHelperint{field: "\"xsyn_store\".\"usd_cent_cost\""},
	AmountSold:           whereHelperint{field: "\"xsyn_store\".\"amount_sold\""},
	AmountAvailable:      whereHelperint{field: "\"xsyn_store\".\"amount_available\""},
	SoldAfter:            whereHelpertime_Time{field: "\"xsyn_store\".\"sold_after\""},
	SoldBefore:           whereHelpertime_Time{field: "\"xsyn_store\".\"sold_before\""},
	DeletedAt:            whereHelpernull_Time{field: "\"xsyn_store\".\"deleted_at\""},
	CreatedAt:            whereHelpertime_Time{field: "\"xsyn_store\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"xsyn_store\".\"updated_at\""},
	Restriction:          whereHelperstring{field: "\"xsyn_store\".\"restriction\""},
	WhiteListedAddresses: whereHelpertypes_StringArray{field: "\"xsyn_store\".\"white_listed_addresses\""},
	ImageAvatar:          whereHelperstring{field: "\"xsyn_store\".\"image_avatar\""},
}

// XsynStoreRels is where relationship names are stored.
var XsynStoreRels = struct {
	Collection string
	Faction    string
}{
	Collection: "Collection",
	Faction:    "Faction",
}

// xsynStoreR is where relationships are stored.
type xsynStoreR struct {
	Collection *Collection `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	Faction    *Faction    `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
}

// NewStruct creates a new relationship struct
func (*xsynStoreR) NewStruct() *xsynStoreR {
	return &xsynStoreR{}
}

// xsynStoreL is where Load methods for each relationship are stored.
type xsynStoreL struct{}

var (
	xsynStoreAllColumns            = []string{"id", "faction_id", "name", "collection_id", "description", "image", "animation_url", "attributes", "additional_metadata", "keywords", "usd_cent_cost", "amount_sold", "amount_available", "sold_after", "sold_before", "deleted_at", "created_at", "updated_at", "restriction", "white_listed_addresses", "image_avatar"}
	xsynStoreColumnsWithoutDefault = []string{"name", "description", "usd_cent_cost"}
	xsynStoreColumnsWithDefault    = []string{"id", "faction_id", "collection_id", "image", "animation_url", "attributes", "additional_metadata", "keywords", "amount_sold", "amount_available", "sold_after", "sold_before", "deleted_at", "created_at", "updated_at", "restriction", "white_listed_addresses", "image_avatar"}
	xsynStorePrimaryKeyColumns     = []string{"id"}
	xsynStoreGeneratedColumns      = []string{}
)

type (
	// XsynStoreSlice is an alias for a slice of pointers to XsynStore.
	// This should almost always be used instead of []XsynStore.
	XsynStoreSlice []*XsynStore
	// XsynStoreHook is the signature for custom XsynStore hook methods
	XsynStoreHook func(boil.Executor, *XsynStore) error

	xsynStoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	xsynStoreType                 = reflect.TypeOf(&XsynStore{})
	xsynStoreMapping              = queries.MakeStructMapping(xsynStoreType)
	xsynStorePrimaryKeyMapping, _ = queries.BindMapping(xsynStoreType, xsynStoreMapping, xsynStorePrimaryKeyColumns)
	xsynStoreInsertCacheMut       sync.RWMutex
	xsynStoreInsertCache          = make(map[string]insertCache)
	xsynStoreUpdateCacheMut       sync.RWMutex
	xsynStoreUpdateCache          = make(map[string]updateCache)
	xsynStoreUpsertCacheMut       sync.RWMutex
	xsynStoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var xsynStoreAfterSelectHooks []XsynStoreHook

var xsynStoreBeforeInsertHooks []XsynStoreHook
var xsynStoreAfterInsertHooks []XsynStoreHook

var xsynStoreBeforeUpdateHooks []XsynStoreHook
var xsynStoreAfterUpdateHooks []XsynStoreHook

var xsynStoreBeforeDeleteHooks []XsynStoreHook
var xsynStoreAfterDeleteHooks []XsynStoreHook

var xsynStoreBeforeUpsertHooks []XsynStoreHook
var xsynStoreAfterUpsertHooks []XsynStoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *XsynStore) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *XsynStore) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *XsynStore) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *XsynStore) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *XsynStore) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *XsynStore) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *XsynStore) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *XsynStore) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *XsynStore) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynStoreAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddXsynStoreHook registers your hook function for all future operations.
func AddXsynStoreHook(hookPoint boil.HookPoint, xsynStoreHook XsynStoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		xsynStoreAfterSelectHooks = append(xsynStoreAfterSelectHooks, xsynStoreHook)
	case boil.BeforeInsertHook:
		xsynStoreBeforeInsertHooks = append(xsynStoreBeforeInsertHooks, xsynStoreHook)
	case boil.AfterInsertHook:
		xsynStoreAfterInsertHooks = append(xsynStoreAfterInsertHooks, xsynStoreHook)
	case boil.BeforeUpdateHook:
		xsynStoreBeforeUpdateHooks = append(xsynStoreBeforeUpdateHooks, xsynStoreHook)
	case boil.AfterUpdateHook:
		xsynStoreAfterUpdateHooks = append(xsynStoreAfterUpdateHooks, xsynStoreHook)
	case boil.BeforeDeleteHook:
		xsynStoreBeforeDeleteHooks = append(xsynStoreBeforeDeleteHooks, xsynStoreHook)
	case boil.AfterDeleteHook:
		xsynStoreAfterDeleteHooks = append(xsynStoreAfterDeleteHooks, xsynStoreHook)
	case boil.BeforeUpsertHook:
		xsynStoreBeforeUpsertHooks = append(xsynStoreBeforeUpsertHooks, xsynStoreHook)
	case boil.AfterUpsertHook:
		xsynStoreAfterUpsertHooks = append(xsynStoreAfterUpsertHooks, xsynStoreHook)
	}
}

// One returns a single xsynStore record from the query.
func (q xsynStoreQuery) One(exec boil.Executor) (*XsynStore, error) {
	o := &XsynStore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for xsyn_store")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all XsynStore records from the query.
func (q xsynStoreQuery) All(exec boil.Executor) (XsynStoreSlice, error) {
	var o []*XsynStore

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to XsynStore slice")
	}

	if len(xsynStoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all XsynStore records in the query.
func (q xsynStoreQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count xsyn_store rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q xsynStoreQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if xsyn_store exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *XsynStore) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *XsynStore) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynStoreL) LoadCollection(e boil.Executor, singular bool, maybeXsynStore interface{}, mods queries.Applicator) error {
	var slice []*XsynStore
	var object *XsynStore

	if singular {
		object = maybeXsynStore.(*XsynStore)
	} else {
		slice = *maybeXsynStore.(*[]*XsynStore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynStoreR{}
		}
		if !queries.IsNil(object.CollectionID) {
			args = append(args, object.CollectionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynStoreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CollectionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CollectionID) {
				args = append(args, obj.CollectionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(xsynStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.XsynStores = append(foreign.R.XsynStores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CollectionID, foreign.ID) {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.XsynStores = append(foreign.R.XsynStores, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynStoreL) LoadFaction(e boil.Executor, singular bool, maybeXsynStore interface{}, mods queries.Applicator) error {
	var slice []*XsynStore
	var object *XsynStore

	if singular {
		object = maybeXsynStore.(*XsynStore)
	} else {
		slice = *maybeXsynStore.(*[]*XsynStore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynStoreR{}
		}
		if !queries.IsNil(object.FactionID) {
			args = append(args, object.FactionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynStoreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FactionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FactionID) {
				args = append(args, obj.FactionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(xsynStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.XsynStores = append(foreign.R.XsynStores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FactionID, foreign.ID) {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.XsynStores = append(foreign.R.XsynStores, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the xsynStore to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.XsynStores.
func (o *XsynStore) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_store\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, xsynStorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CollectionID, related.ID)
	if o.R == nil {
		o.R = &xsynStoreR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			XsynStores: XsynStoreSlice{o},
		}
	} else {
		related.R.XsynStores = append(related.R.XsynStores, o)
	}

	return nil
}

// RemoveCollection relationship.
// Sets o.R.Collection to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *XsynStore) RemoveCollection(exec boil.Executor, related *Collection) error {
	var err error

	queries.SetScanner(&o.CollectionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("collection_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Collection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.XsynStores {
		if queries.Equal(o.CollectionID, ri.CollectionID) {
			continue
		}

		ln := len(related.R.XsynStores)
		if ln > 1 && i < ln-1 {
			related.R.XsynStores[i] = related.R.XsynStores[ln-1]
		}
		related.R.XsynStores = related.R.XsynStores[:ln-1]
		break
	}
	return nil
}

// SetFaction of the xsynStore to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.XsynStores.
func (o *XsynStore) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_store\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, xsynStorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FactionID, related.ID)
	if o.R == nil {
		o.R = &xsynStoreR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			XsynStores: XsynStoreSlice{o},
		}
	} else {
		related.R.XsynStores = append(related.R.XsynStores, o)
	}

	return nil
}

// RemoveFaction relationship.
// Sets o.R.Faction to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *XsynStore) RemoveFaction(exec boil.Executor, related *Faction) error {
	var err error

	queries.SetScanner(&o.FactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("faction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Faction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.XsynStores {
		if queries.Equal(o.FactionID, ri.FactionID) {
			continue
		}

		ln := len(related.R.XsynStores)
		if ln > 1 && i < ln-1 {
			related.R.XsynStores[i] = related.R.XsynStores[ln-1]
		}
		related.R.XsynStores = related.R.XsynStores[:ln-1]
		break
	}
	return nil
}

// XsynStores retrieves all the records using an executor.
func XsynStores(mods ...qm.QueryMod) xsynStoreQuery {
	mods = append(mods, qm.From("\"xsyn_store\""), qmhelper.WhereIsNull("\"xsyn_store\".\"deleted_at\""))
	return xsynStoreQuery{NewQuery(mods...)}
}

// FindXsynStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindXsynStore(exec boil.Executor, iD string, selectCols ...string) (*XsynStore, error) {
	xsynStoreObj := &XsynStore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"xsyn_store\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, xsynStoreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from xsyn_store")
	}

	if err = xsynStoreObj.doAfterSelectHooks(exec); err != nil {
		return xsynStoreObj, err
	}

	return xsynStoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *XsynStore) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no xsyn_store provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xsynStoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	xsynStoreInsertCacheMut.RLock()
	cache, cached := xsynStoreInsertCache[key]
	xsynStoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			xsynStoreAllColumns,
			xsynStoreColumnsWithDefault,
			xsynStoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(xsynStoreType, xsynStoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(xsynStoreType, xsynStoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"xsyn_store\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"xsyn_store\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into xsyn_store")
	}

	if !cached {
		xsynStoreInsertCacheMut.Lock()
		xsynStoreInsertCache[key] = cache
		xsynStoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the XsynStore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *XsynStore) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	xsynStoreUpdateCacheMut.RLock()
	cache, cached := xsynStoreUpdateCache[key]
	xsynStoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			xsynStoreAllColumns,
			xsynStorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update xsyn_store, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"xsyn_store\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, xsynStorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(xsynStoreType, xsynStoreMapping, append(wl, xsynStorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update xsyn_store row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for xsyn_store")
	}

	if !cached {
		xsynStoreUpdateCacheMut.Lock()
		xsynStoreUpdateCache[key] = cache
		xsynStoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q xsynStoreQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for xsyn_store")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for xsyn_store")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o XsynStoreSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"xsyn_store\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, xsynStorePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in xsynStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all xsynStore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *XsynStore) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no xsyn_store provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xsynStoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	xsynStoreUpsertCacheMut.RLock()
	cache, cached := xsynStoreUpsertCache[key]
	xsynStoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			xsynStoreAllColumns,
			xsynStoreColumnsWithDefault,
			xsynStoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			xsynStoreAllColumns,
			xsynStorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert xsyn_store, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(xsynStorePrimaryKeyColumns))
			copy(conflict, xsynStorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"xsyn_store\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(xsynStoreType, xsynStoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(xsynStoreType, xsynStoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert xsyn_store")
	}

	if !cached {
		xsynStoreUpsertCacheMut.Lock()
		xsynStoreUpsertCache[key] = cache
		xsynStoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single XsynStore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *XsynStore) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no XsynStore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), xsynStorePrimaryKeyMapping)
		sql = "DELETE FROM \"xsyn_store\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"xsyn_store\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(xsynStoreType, xsynStoreMapping, append(wl, xsynStorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from xsyn_store")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for xsyn_store")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q xsynStoreQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no xsynStoreQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from xsyn_store")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for xsyn_store")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o XsynStoreSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(xsynStoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynStorePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"xsyn_store\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, xsynStorePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynStorePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"xsyn_store\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, xsynStorePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from xsynStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for xsyn_store")
	}

	if len(xsynStoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *XsynStore) Reload(exec boil.Executor) error {
	ret, err := FindXsynStore(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XsynStoreSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := XsynStoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"xsyn_store\".* FROM \"xsyn_store\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, xsynStorePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in XsynStoreSlice")
	}

	*o = slice

	return nil
}

// XsynStoreExists checks if the XsynStore row exists.
func XsynStoreExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"xsyn_store\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if xsyn_store exists")
	}

	return exists, nil
}
