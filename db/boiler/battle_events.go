// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleEvent is an object representing the database table.
type BattleEvent struct {
	ID        string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID  null.String `boiler:"battle_id" boil:"battle_id" json:"battleID,omitempty" toml:"battleID" yaml:"battleID,omitempty"`
	EventType null.String `boiler:"event_type" boil:"event_type" json:"eventType,omitempty" toml:"eventType" yaml:"eventType,omitempty"`
	CreatedAt time.Time   `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *battleEventR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleEventL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleEventColumns = struct {
	ID        string
	BattleID  string
	EventType string
	CreatedAt string
}{
	ID:        "id",
	BattleID:  "battle_id",
	EventType: "event_type",
	CreatedAt: "created_at",
}

var BattleEventTableColumns = struct {
	ID        string
	BattleID  string
	EventType string
	CreatedAt string
}{
	ID:        "battle_events.id",
	BattleID:  "battle_events.battle_id",
	EventType: "battle_events.event_type",
	CreatedAt: "battle_events.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BattleEventWhere = struct {
	ID        whereHelperstring
	BattleID  whereHelpernull_String
	EventType whereHelpernull_String
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"battle_events\".\"id\""},
	BattleID:  whereHelpernull_String{field: "\"battle_events\".\"battle_id\""},
	EventType: whereHelpernull_String{field: "\"battle_events\".\"event_type\""},
	CreatedAt: whereHelpertime_Time{field: "\"battle_events\".\"created_at\""},
}

// BattleEventRels is where relationship names are stored.
var BattleEventRels = struct {
	Battle                                       string
	EventBattleEventsGameAbilities               string
	EventBattleEventsStates                      string
	EventBattleEventsWarMachineDestroyeds        string
	RelatedEventBattleEventsWarMachineDestroyeds string
}{
	Battle:                                       "Battle",
	EventBattleEventsGameAbilities:               "EventBattleEventsGameAbilities",
	EventBattleEventsStates:                      "EventBattleEventsStates",
	EventBattleEventsWarMachineDestroyeds:        "EventBattleEventsWarMachineDestroyeds",
	RelatedEventBattleEventsWarMachineDestroyeds: "RelatedEventBattleEventsWarMachineDestroyeds",
}

// battleEventR is where relationships are stored.
type battleEventR struct {
	Battle                                       *Battle                              `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	EventBattleEventsGameAbilities               BattleEventsGameAbilitySlice         `boiler:"EventBattleEventsGameAbilities" boil:"EventBattleEventsGameAbilities" json:"EventBattleEventsGameAbilities" toml:"EventBattleEventsGameAbilities" yaml:"EventBattleEventsGameAbilities"`
	EventBattleEventsStates                      BattleEventsStateSlice               `boiler:"EventBattleEventsStates" boil:"EventBattleEventsStates" json:"EventBattleEventsStates" toml:"EventBattleEventsStates" yaml:"EventBattleEventsStates"`
	EventBattleEventsWarMachineDestroyeds        BattleEventsWarMachineDestroyedSlice `boiler:"EventBattleEventsWarMachineDestroyeds" boil:"EventBattleEventsWarMachineDestroyeds" json:"EventBattleEventsWarMachineDestroyeds" toml:"EventBattleEventsWarMachineDestroyeds" yaml:"EventBattleEventsWarMachineDestroyeds"`
	RelatedEventBattleEventsWarMachineDestroyeds BattleEventsWarMachineDestroyedSlice `boiler:"RelatedEventBattleEventsWarMachineDestroyeds" boil:"RelatedEventBattleEventsWarMachineDestroyeds" json:"RelatedEventBattleEventsWarMachineDestroyeds" toml:"RelatedEventBattleEventsWarMachineDestroyeds" yaml:"RelatedEventBattleEventsWarMachineDestroyeds"`
}

// NewStruct creates a new relationship struct
func (*battleEventR) NewStruct() *battleEventR {
	return &battleEventR{}
}

// battleEventL is where Load methods for each relationship are stored.
type battleEventL struct{}

var (
	battleEventAllColumns            = []string{"id", "battle_id", "event_type", "created_at"}
	battleEventColumnsWithoutDefault = []string{"battle_id", "event_type"}
	battleEventColumnsWithDefault    = []string{"id", "created_at"}
	battleEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// BattleEventSlice is an alias for a slice of pointers to BattleEvent.
	// This should almost always be used instead of []BattleEvent.
	BattleEventSlice []*BattleEvent
	// BattleEventHook is the signature for custom BattleEvent hook methods
	BattleEventHook func(boil.Executor, *BattleEvent) error

	battleEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleEventType                 = reflect.TypeOf(&BattleEvent{})
	battleEventMapping              = queries.MakeStructMapping(battleEventType)
	battleEventPrimaryKeyMapping, _ = queries.BindMapping(battleEventType, battleEventMapping, battleEventPrimaryKeyColumns)
	battleEventInsertCacheMut       sync.RWMutex
	battleEventInsertCache          = make(map[string]insertCache)
	battleEventUpdateCacheMut       sync.RWMutex
	battleEventUpdateCache          = make(map[string]updateCache)
	battleEventUpsertCacheMut       sync.RWMutex
	battleEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleEventBeforeInsertHooks []BattleEventHook
var battleEventBeforeUpdateHooks []BattleEventHook
var battleEventBeforeDeleteHooks []BattleEventHook
var battleEventBeforeUpsertHooks []BattleEventHook

var battleEventAfterInsertHooks []BattleEventHook
var battleEventAfterSelectHooks []BattleEventHook
var battleEventAfterUpdateHooks []BattleEventHook
var battleEventAfterDeleteHooks []BattleEventHook
var battleEventAfterUpsertHooks []BattleEventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleEvent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleEvent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleEvent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleEvent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleEvent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleEvent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleEvent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleEvent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleEvent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleEventHook registers your hook function for all future operations.
func AddBattleEventHook(hookPoint boil.HookPoint, battleEventHook BattleEventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battleEventBeforeInsertHooks = append(battleEventBeforeInsertHooks, battleEventHook)
	case boil.BeforeUpdateHook:
		battleEventBeforeUpdateHooks = append(battleEventBeforeUpdateHooks, battleEventHook)
	case boil.BeforeDeleteHook:
		battleEventBeforeDeleteHooks = append(battleEventBeforeDeleteHooks, battleEventHook)
	case boil.BeforeUpsertHook:
		battleEventBeforeUpsertHooks = append(battleEventBeforeUpsertHooks, battleEventHook)
	case boil.AfterInsertHook:
		battleEventAfterInsertHooks = append(battleEventAfterInsertHooks, battleEventHook)
	case boil.AfterSelectHook:
		battleEventAfterSelectHooks = append(battleEventAfterSelectHooks, battleEventHook)
	case boil.AfterUpdateHook:
		battleEventAfterUpdateHooks = append(battleEventAfterUpdateHooks, battleEventHook)
	case boil.AfterDeleteHook:
		battleEventAfterDeleteHooks = append(battleEventAfterDeleteHooks, battleEventHook)
	case boil.AfterUpsertHook:
		battleEventAfterUpsertHooks = append(battleEventAfterUpsertHooks, battleEventHook)
	}
}

// One returns a single battleEvent record from the query.
func (q battleEventQuery) One(exec boil.Executor) (*BattleEvent, error) {
	o := &BattleEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_events")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleEvent records from the query.
func (q battleEventQuery) All(exec boil.Executor) (BattleEventSlice, error) {
	var o []*BattleEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleEvent slice")
	}

	if len(battleEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleEvent records in the query.
func (q battleEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_events exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleEvent) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// EventBattleEventsGameAbilities retrieves all the battle_events_game_ability's BattleEventsGameAbilities with an executor via event_id column.
func (o *BattleEvent) EventBattleEventsGameAbilities(mods ...qm.QueryMod) battleEventsGameAbilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events_game_ability\".\"event_id\"=?", o.ID),
	)

	query := BattleEventsGameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events_game_ability\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events_game_ability\".*"})
	}

	return query
}

// EventBattleEventsStates retrieves all the battle_events_state's BattleEventsStates with an executor via event_id column.
func (o *BattleEvent) EventBattleEventsStates(mods ...qm.QueryMod) battleEventsStateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events_state\".\"event_id\"=?", o.ID),
	)

	query := BattleEventsStates(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events_state\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events_state\".*"})
	}

	return query
}

// EventBattleEventsWarMachineDestroyeds retrieves all the battle_events_war_machine_destroyed's BattleEventsWarMachineDestroyeds with an executor via event_id column.
func (o *BattleEvent) EventBattleEventsWarMachineDestroyeds(mods ...qm.QueryMod) battleEventsWarMachineDestroyedQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events_war_machine_destroyed\".\"event_id\"=?", o.ID),
	)

	query := BattleEventsWarMachineDestroyeds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events_war_machine_destroyed\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events_war_machine_destroyed\".*"})
	}

	return query
}

// RelatedEventBattleEventsWarMachineDestroyeds retrieves all the battle_events_war_machine_destroyed's BattleEventsWarMachineDestroyeds with an executor via related_event_id column.
func (o *BattleEvent) RelatedEventBattleEventsWarMachineDestroyeds(mods ...qm.QueryMod) battleEventsWarMachineDestroyedQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events_war_machine_destroyed\".\"related_event_id\"=?", o.ID),
	)

	query := BattleEventsWarMachineDestroyeds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events_war_machine_destroyed\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events_war_machine_destroyed\".*"})
	}

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleEventL) LoadBattle(e boil.Executor, singular bool, maybeBattleEvent interface{}, mods queries.Applicator) error {
	var slice []*BattleEvent
	var object *BattleEvent

	if singular {
		object = maybeBattleEvent.(*BattleEvent)
	} else {
		slice = *maybeBattleEvent.(*[]*BattleEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventR{}
		}
		if !queries.IsNil(object.BattleID) {
			args = append(args, object.BattleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BattleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BattleID) {
				args = append(args, obj.BattleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleEvents = append(foreign.R.BattleEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BattleID, foreign.ID) {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleEvents = append(foreign.R.BattleEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadEventBattleEventsGameAbilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleEventL) LoadEventBattleEventsGameAbilities(e boil.Executor, singular bool, maybeBattleEvent interface{}, mods queries.Applicator) error {
	var slice []*BattleEvent
	var object *BattleEvent

	if singular {
		object = maybeBattleEvent.(*BattleEvent)
	} else {
		slice = *maybeBattleEvent.(*[]*BattleEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events_game_ability`),
		qm.WhereIn(`battle_events_game_ability.event_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events_game_ability")
	}

	var resultSlice []*BattleEventsGameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events_game_ability")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events_game_ability")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events_game_ability")
	}

	if len(battleEventsGameAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventBattleEventsGameAbilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventsGameAbilityR{}
			}
			foreign.R.Event = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EventID {
				local.R.EventBattleEventsGameAbilities = append(local.R.EventBattleEventsGameAbilities, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventsGameAbilityR{}
				}
				foreign.R.Event = local
				break
			}
		}
	}

	return nil
}

// LoadEventBattleEventsStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleEventL) LoadEventBattleEventsStates(e boil.Executor, singular bool, maybeBattleEvent interface{}, mods queries.Applicator) error {
	var slice []*BattleEvent
	var object *BattleEvent

	if singular {
		object = maybeBattleEvent.(*BattleEvent)
	} else {
		slice = *maybeBattleEvent.(*[]*BattleEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events_state`),
		qm.WhereIn(`battle_events_state.event_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events_state")
	}

	var resultSlice []*BattleEventsState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events_state")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events_state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events_state")
	}

	if len(battleEventsStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventBattleEventsStates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventsStateR{}
			}
			foreign.R.Event = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EventID {
				local.R.EventBattleEventsStates = append(local.R.EventBattleEventsStates, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventsStateR{}
				}
				foreign.R.Event = local
				break
			}
		}
	}

	return nil
}

// LoadEventBattleEventsWarMachineDestroyeds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleEventL) LoadEventBattleEventsWarMachineDestroyeds(e boil.Executor, singular bool, maybeBattleEvent interface{}, mods queries.Applicator) error {
	var slice []*BattleEvent
	var object *BattleEvent

	if singular {
		object = maybeBattleEvent.(*BattleEvent)
	} else {
		slice = *maybeBattleEvent.(*[]*BattleEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events_war_machine_destroyed`),
		qm.WhereIn(`battle_events_war_machine_destroyed.event_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events_war_machine_destroyed")
	}

	var resultSlice []*BattleEventsWarMachineDestroyed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events_war_machine_destroyed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events_war_machine_destroyed")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events_war_machine_destroyed")
	}

	if len(battleEventsWarMachineDestroyedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventBattleEventsWarMachineDestroyeds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventsWarMachineDestroyedR{}
			}
			foreign.R.Event = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EventID {
				local.R.EventBattleEventsWarMachineDestroyeds = append(local.R.EventBattleEventsWarMachineDestroyeds, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventsWarMachineDestroyedR{}
				}
				foreign.R.Event = local
				break
			}
		}
	}

	return nil
}

// LoadRelatedEventBattleEventsWarMachineDestroyeds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleEventL) LoadRelatedEventBattleEventsWarMachineDestroyeds(e boil.Executor, singular bool, maybeBattleEvent interface{}, mods queries.Applicator) error {
	var slice []*BattleEvent
	var object *BattleEvent

	if singular {
		object = maybeBattleEvent.(*BattleEvent)
	} else {
		slice = *maybeBattleEvent.(*[]*BattleEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events_war_machine_destroyed`),
		qm.WhereIn(`battle_events_war_machine_destroyed.related_event_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events_war_machine_destroyed")
	}

	var resultSlice []*BattleEventsWarMachineDestroyed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events_war_machine_destroyed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events_war_machine_destroyed")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events_war_machine_destroyed")
	}

	if len(battleEventsWarMachineDestroyedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedEventBattleEventsWarMachineDestroyeds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventsWarMachineDestroyedR{}
			}
			foreign.R.RelatedEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedEventID) {
				local.R.RelatedEventBattleEventsWarMachineDestroyeds = append(local.R.RelatedEventBattleEventsWarMachineDestroyeds, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventsWarMachineDestroyedR{}
				}
				foreign.R.RelatedEvent = local
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleEvent to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleEvents.
func (o *BattleEvent) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BattleID, related.ID)
	if o.R == nil {
		o.R = &battleEventR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleEvents: BattleEventSlice{o},
		}
	} else {
		related.R.BattleEvents = append(related.R.BattleEvents, o)
	}

	return nil
}

// RemoveBattle relationship.
// Sets o.R.Battle to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleEvent) RemoveBattle(exec boil.Executor, related *Battle) error {
	var err error

	queries.SetScanner(&o.BattleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("battle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Battle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleEvents {
		if queries.Equal(o.BattleID, ri.BattleID) {
			continue
		}

		ln := len(related.R.BattleEvents)
		if ln > 1 && i < ln-1 {
			related.R.BattleEvents[i] = related.R.BattleEvents[ln-1]
		}
		related.R.BattleEvents = related.R.BattleEvents[:ln-1]
		break
	}
	return nil
}

// AddEventBattleEventsGameAbilities adds the given related objects to the existing relationships
// of the battle_event, optionally inserting them as new records.
// Appends related to o.R.EventBattleEventsGameAbilities.
// Sets related.R.Event appropriately.
func (o *BattleEvent) AddEventBattleEventsGameAbilities(exec boil.Executor, insert bool, related ...*BattleEventsGameAbility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EventID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events_game_ability\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventsGameAbilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleEventR{
			EventBattleEventsGameAbilities: related,
		}
	} else {
		o.R.EventBattleEventsGameAbilities = append(o.R.EventBattleEventsGameAbilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventsGameAbilityR{
				Event: o,
			}
		} else {
			rel.R.Event = o
		}
	}
	return nil
}

// AddEventBattleEventsStates adds the given related objects to the existing relationships
// of the battle_event, optionally inserting them as new records.
// Appends related to o.R.EventBattleEventsStates.
// Sets related.R.Event appropriately.
func (o *BattleEvent) AddEventBattleEventsStates(exec boil.Executor, insert bool, related ...*BattleEventsState) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EventID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events_state\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventsStatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleEventR{
			EventBattleEventsStates: related,
		}
	} else {
		o.R.EventBattleEventsStates = append(o.R.EventBattleEventsStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventsStateR{
				Event: o,
			}
		} else {
			rel.R.Event = o
		}
	}
	return nil
}

// AddEventBattleEventsWarMachineDestroyeds adds the given related objects to the existing relationships
// of the battle_event, optionally inserting them as new records.
// Appends related to o.R.EventBattleEventsWarMachineDestroyeds.
// Sets related.R.Event appropriately.
func (o *BattleEvent) AddEventBattleEventsWarMachineDestroyeds(exec boil.Executor, insert bool, related ...*BattleEventsWarMachineDestroyed) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EventID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events_war_machine_destroyed\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventsWarMachineDestroyedPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleEventR{
			EventBattleEventsWarMachineDestroyeds: related,
		}
	} else {
		o.R.EventBattleEventsWarMachineDestroyeds = append(o.R.EventBattleEventsWarMachineDestroyeds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventsWarMachineDestroyedR{
				Event: o,
			}
		} else {
			rel.R.Event = o
		}
	}
	return nil
}

// AddRelatedEventBattleEventsWarMachineDestroyeds adds the given related objects to the existing relationships
// of the battle_event, optionally inserting them as new records.
// Appends related to o.R.RelatedEventBattleEventsWarMachineDestroyeds.
// Sets related.R.RelatedEvent appropriately.
func (o *BattleEvent) AddRelatedEventBattleEventsWarMachineDestroyeds(exec boil.Executor, insert bool, related ...*BattleEventsWarMachineDestroyed) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedEventID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events_war_machine_destroyed\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventsWarMachineDestroyedPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedEventID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleEventR{
			RelatedEventBattleEventsWarMachineDestroyeds: related,
		}
	} else {
		o.R.RelatedEventBattleEventsWarMachineDestroyeds = append(o.R.RelatedEventBattleEventsWarMachineDestroyeds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventsWarMachineDestroyedR{
				RelatedEvent: o,
			}
		} else {
			rel.R.RelatedEvent = o
		}
	}
	return nil
}

// SetRelatedEventBattleEventsWarMachineDestroyeds removes all previously related items of the
// battle_event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedEvent's RelatedEventBattleEventsWarMachineDestroyeds accordingly.
// Replaces o.R.RelatedEventBattleEventsWarMachineDestroyeds with related.
// Sets related.R.RelatedEvent's RelatedEventBattleEventsWarMachineDestroyeds accordingly.
func (o *BattleEvent) SetRelatedEventBattleEventsWarMachineDestroyeds(exec boil.Executor, insert bool, related ...*BattleEventsWarMachineDestroyed) error {
	query := "update \"battle_events_war_machine_destroyed\" set \"related_event_id\" = null where \"related_event_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedEventBattleEventsWarMachineDestroyeds {
			queries.SetScanner(&rel.RelatedEventID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedEvent = nil
		}

		o.R.RelatedEventBattleEventsWarMachineDestroyeds = nil
	}
	return o.AddRelatedEventBattleEventsWarMachineDestroyeds(exec, insert, related...)
}

// RemoveRelatedEventBattleEventsWarMachineDestroyeds relationships from objects passed in.
// Removes related items from R.RelatedEventBattleEventsWarMachineDestroyeds (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedEvent.
func (o *BattleEvent) RemoveRelatedEventBattleEventsWarMachineDestroyeds(exec boil.Executor, related ...*BattleEventsWarMachineDestroyed) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedEventID, nil)
		if rel.R != nil {
			rel.R.RelatedEvent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_event_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedEventBattleEventsWarMachineDestroyeds {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedEventBattleEventsWarMachineDestroyeds)
			if ln > 1 && i < ln-1 {
				o.R.RelatedEventBattleEventsWarMachineDestroyeds[i] = o.R.RelatedEventBattleEventsWarMachineDestroyeds[ln-1]
			}
			o.R.RelatedEventBattleEventsWarMachineDestroyeds = o.R.RelatedEventBattleEventsWarMachineDestroyeds[:ln-1]
			break
		}
	}

	return nil
}

// BattleEvents retrieves all the records using an executor.
func BattleEvents(mods ...qm.QueryMod) battleEventQuery {
	mods = append(mods, qm.From("\"battle_events\""))
	return battleEventQuery{NewQuery(mods...)}
}

// FindBattleEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleEvent(exec boil.Executor, iD string, selectCols ...string) (*BattleEvent, error) {
	battleEventObj := &BattleEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_events")
	}

	if err = battleEventObj.doAfterSelectHooks(exec); err != nil {
		return battleEventObj, err
	}

	return battleEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleEventInsertCacheMut.RLock()
	cache, cached := battleEventInsertCache[key]
	battleEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleEventAllColumns,
			battleEventColumnsWithDefault,
			battleEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleEventType, battleEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleEventType, battleEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_events")
	}

	if !cached {
		battleEventInsertCacheMut.Lock()
		battleEventInsertCache[key] = cache
		battleEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleEventUpdateCacheMut.RLock()
	cache, cached := battleEventUpdateCache[key]
	battleEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleEventAllColumns,
			battleEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleEventType, battleEventMapping, append(wl, battleEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_events")
	}

	if !cached {
		battleEventUpdateCacheMut.Lock()
		battleEventUpdateCache[key] = cache
		battleEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleEventUpsertCacheMut.RLock()
	cache, cached := battleEventUpsertCache[key]
	battleEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleEventAllColumns,
			battleEventColumnsWithDefault,
			battleEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battleEventAllColumns,
			battleEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleEventPrimaryKeyColumns))
			copy(conflict, battleEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleEventType, battleEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleEventType, battleEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_events")
	}

	if !cached {
		battleEventUpsertCacheMut.Lock()
		battleEventUpsertCache[key] = cache
		battleEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleEventPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_events")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events")
	}

	if len(battleEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleEvent) Reload(exec boil.Executor) error {
	ret, err := FindBattleEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_events\".* FROM \"battle_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleEventSlice")
	}

	*o = slice

	return nil
}

// BattleEventExists checks if the BattleEvent row exists.
func BattleEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_events exists")
	}

	return exists, nil
}
