// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// XsynAsset is an object representing the database table.
type XsynAsset struct {
	UserID           string              `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TransferredInAt  time.Time           `boiler:"transferred_in_at" boil:"transferred_in_at" json:"transferred_in_at" toml:"transferred_in_at" yaml:"transferred_in_at"`
	FrozenByID       null.String         `boiler:"frozen_by_id" boil:"frozen_by_id" json:"frozen_by_id,omitempty" toml:"frozen_by_id" yaml:"frozen_by_id,omitempty"`
	LockedByID       null.String         `boiler:"locked_by_id" boil:"locked_by_id" json:"locked_by_id,omitempty" toml:"locked_by_id" yaml:"locked_by_id,omitempty"`
	FrozenAt         null.Time           `boiler:"frozen_at" boil:"frozen_at" json:"frozen_at,omitempty" toml:"frozen_at" yaml:"frozen_at,omitempty"`
	MintingSignature null.String         `boiler:"minting_signature" boil:"minting_signature" json:"minting_signature,omitempty" toml:"minting_signature" yaml:"minting_signature,omitempty"`
	TXHistory        null.JSON           `boiler:"tx_history" boil:"tx_history" json:"tx_history,omitempty" toml:"tx_history" yaml:"tx_history,omitempty"`
	ExternalTokenID  decimal.NullDecimal `boiler:"external_token_id" boil:"external_token_id" json:"external_token_id,omitempty" toml:"external_token_id" yaml:"external_token_id,omitempty"`
	CollectionID     null.String         `boiler:"collection_id" boil:"collection_id" json:"collection_id,omitempty" toml:"collection_id" yaml:"collection_id,omitempty"`
	MetadataHash     string              `boiler:"metadata_hash" boil:"metadata_hash" json:"metadata_hash" toml:"metadata_hash" yaml:"metadata_hash"`
	SignatureExpiry  null.String         `boiler:"signature_expiry" boil:"signature_expiry" json:"signature_expiry,omitempty" toml:"signature_expiry" yaml:"signature_expiry,omitempty"`

	R *xsynAssetR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L xsynAssetL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var XsynAssetColumns = struct {
	UserID           string
	TransferredInAt  string
	FrozenByID       string
	LockedByID       string
	FrozenAt         string
	MintingSignature string
	TXHistory        string
	ExternalTokenID  string
	CollectionID     string
	MetadataHash     string
	SignatureExpiry  string
}{
	UserID:           "user_id",
	TransferredInAt:  "transferred_in_at",
	FrozenByID:       "frozen_by_id",
	LockedByID:       "locked_by_id",
	FrozenAt:         "frozen_at",
	MintingSignature: "minting_signature",
	TXHistory:        "tx_history",
	ExternalTokenID:  "external_token_id",
	CollectionID:     "collection_id",
	MetadataHash:     "metadata_hash",
	SignatureExpiry:  "signature_expiry",
}

var XsynAssetTableColumns = struct {
	UserID           string
	TransferredInAt  string
	FrozenByID       string
	LockedByID       string
	FrozenAt         string
	MintingSignature string
	TXHistory        string
	ExternalTokenID  string
	CollectionID     string
	MetadataHash     string
	SignatureExpiry  string
}{
	UserID:           "xsyn_assets.user_id",
	TransferredInAt:  "xsyn_assets.transferred_in_at",
	FrozenByID:       "xsyn_assets.frozen_by_id",
	LockedByID:       "xsyn_assets.locked_by_id",
	FrozenAt:         "xsyn_assets.frozen_at",
	MintingSignature: "xsyn_assets.minting_signature",
	TXHistory:        "xsyn_assets.tx_history",
	ExternalTokenID:  "xsyn_assets.external_token_id",
	CollectionID:     "xsyn_assets.collection_id",
	MetadataHash:     "xsyn_assets.metadata_hash",
	SignatureExpiry:  "xsyn_assets.signature_expiry",
}

// Generated where

type whereHelperdecimal_NullDecimal struct{ field string }

func (w whereHelperdecimal_NullDecimal) EQ(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperdecimal_NullDecimal) NEQ(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperdecimal_NullDecimal) LT(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_NullDecimal) LTE(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_NullDecimal) GT(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_NullDecimal) GTE(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelperdecimal_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperdecimal_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var XsynAssetWhere = struct {
	UserID           whereHelperstring
	TransferredInAt  whereHelpertime_Time
	FrozenByID       whereHelpernull_String
	LockedByID       whereHelpernull_String
	FrozenAt         whereHelpernull_Time
	MintingSignature whereHelpernull_String
	TXHistory        whereHelpernull_JSON
	ExternalTokenID  whereHelperdecimal_NullDecimal
	CollectionID     whereHelpernull_String
	MetadataHash     whereHelperstring
	SignatureExpiry  whereHelpernull_String
}{
	UserID:           whereHelperstring{field: "\"xsyn_assets\".\"user_id\""},
	TransferredInAt:  whereHelpertime_Time{field: "\"xsyn_assets\".\"transferred_in_at\""},
	FrozenByID:       whereHelpernull_String{field: "\"xsyn_assets\".\"frozen_by_id\""},
	LockedByID:       whereHelpernull_String{field: "\"xsyn_assets\".\"locked_by_id\""},
	FrozenAt:         whereHelpernull_Time{field: "\"xsyn_assets\".\"frozen_at\""},
	MintingSignature: whereHelpernull_String{field: "\"xsyn_assets\".\"minting_signature\""},
	TXHistory:        whereHelpernull_JSON{field: "\"xsyn_assets\".\"tx_history\""},
	ExternalTokenID:  whereHelperdecimal_NullDecimal{field: "\"xsyn_assets\".\"external_token_id\""},
	CollectionID:     whereHelpernull_String{field: "\"xsyn_assets\".\"collection_id\""},
	MetadataHash:     whereHelperstring{field: "\"xsyn_assets\".\"metadata_hash\""},
	SignatureExpiry:  whereHelpernull_String{field: "\"xsyn_assets\".\"signature_expiry\""},
}

// XsynAssetRels is where relationship names are stored.
var XsynAssetRels = struct {
	Collection                string
	FrozenBy                  string
	LockedBy                  string
	MetadataHashXsynMetadatum string
	User                      string
}{
	Collection:                "Collection",
	FrozenBy:                  "FrozenBy",
	LockedBy:                  "LockedBy",
	MetadataHashXsynMetadatum: "MetadataHashXsynMetadatum",
	User:                      "User",
}

// xsynAssetR is where relationships are stored.
type xsynAssetR struct {
	Collection                *Collection    `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	FrozenBy                  *User          `boiler:"FrozenBy" boil:"FrozenBy" json:"FrozenBy" toml:"FrozenBy" yaml:"FrozenBy"`
	LockedBy                  *User          `boiler:"LockedBy" boil:"LockedBy" json:"LockedBy" toml:"LockedBy" yaml:"LockedBy"`
	MetadataHashXsynMetadatum *XsynMetadatum `boiler:"MetadataHashXsynMetadatum" boil:"MetadataHashXsynMetadatum" json:"MetadataHashXsynMetadatum" toml:"MetadataHashXsynMetadatum" yaml:"MetadataHashXsynMetadatum"`
	User                      *User          `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*xsynAssetR) NewStruct() *xsynAssetR {
	return &xsynAssetR{}
}

// xsynAssetL is where Load methods for each relationship are stored.
type xsynAssetL struct{}

var (
	xsynAssetAllColumns            = []string{"user_id", "transferred_in_at", "frozen_by_id", "locked_by_id", "frozen_at", "minting_signature", "tx_history", "external_token_id", "collection_id", "metadata_hash", "signature_expiry"}
	xsynAssetColumnsWithoutDefault = []string{"user_id", "frozen_by_id", "locked_by_id", "frozen_at", "external_token_id", "collection_id", "metadata_hash"}
	xsynAssetColumnsWithDefault    = []string{"transferred_in_at", "minting_signature", "tx_history", "signature_expiry"}
	xsynAssetPrimaryKeyColumns     = []string{"metadata_hash"}
)

type (
	// XsynAssetSlice is an alias for a slice of pointers to XsynAsset.
	// This should almost always be used instead of []XsynAsset.
	XsynAssetSlice []*XsynAsset
	// XsynAssetHook is the signature for custom XsynAsset hook methods
	XsynAssetHook func(boil.Executor, *XsynAsset) error

	xsynAssetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	xsynAssetType                 = reflect.TypeOf(&XsynAsset{})
	xsynAssetMapping              = queries.MakeStructMapping(xsynAssetType)
	xsynAssetPrimaryKeyMapping, _ = queries.BindMapping(xsynAssetType, xsynAssetMapping, xsynAssetPrimaryKeyColumns)
	xsynAssetInsertCacheMut       sync.RWMutex
	xsynAssetInsertCache          = make(map[string]insertCache)
	xsynAssetUpdateCacheMut       sync.RWMutex
	xsynAssetUpdateCache          = make(map[string]updateCache)
	xsynAssetUpsertCacheMut       sync.RWMutex
	xsynAssetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var xsynAssetBeforeInsertHooks []XsynAssetHook
var xsynAssetBeforeUpdateHooks []XsynAssetHook
var xsynAssetBeforeDeleteHooks []XsynAssetHook
var xsynAssetBeforeUpsertHooks []XsynAssetHook

var xsynAssetAfterInsertHooks []XsynAssetHook
var xsynAssetAfterSelectHooks []XsynAssetHook
var xsynAssetAfterUpdateHooks []XsynAssetHook
var xsynAssetAfterDeleteHooks []XsynAssetHook
var xsynAssetAfterUpsertHooks []XsynAssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *XsynAsset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *XsynAsset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *XsynAsset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *XsynAsset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *XsynAsset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *XsynAsset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *XsynAsset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *XsynAsset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *XsynAsset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xsynAssetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddXsynAssetHook registers your hook function for all future operations.
func AddXsynAssetHook(hookPoint boil.HookPoint, xsynAssetHook XsynAssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		xsynAssetBeforeInsertHooks = append(xsynAssetBeforeInsertHooks, xsynAssetHook)
	case boil.BeforeUpdateHook:
		xsynAssetBeforeUpdateHooks = append(xsynAssetBeforeUpdateHooks, xsynAssetHook)
	case boil.BeforeDeleteHook:
		xsynAssetBeforeDeleteHooks = append(xsynAssetBeforeDeleteHooks, xsynAssetHook)
	case boil.BeforeUpsertHook:
		xsynAssetBeforeUpsertHooks = append(xsynAssetBeforeUpsertHooks, xsynAssetHook)
	case boil.AfterInsertHook:
		xsynAssetAfterInsertHooks = append(xsynAssetAfterInsertHooks, xsynAssetHook)
	case boil.AfterSelectHook:
		xsynAssetAfterSelectHooks = append(xsynAssetAfterSelectHooks, xsynAssetHook)
	case boil.AfterUpdateHook:
		xsynAssetAfterUpdateHooks = append(xsynAssetAfterUpdateHooks, xsynAssetHook)
	case boil.AfterDeleteHook:
		xsynAssetAfterDeleteHooks = append(xsynAssetAfterDeleteHooks, xsynAssetHook)
	case boil.AfterUpsertHook:
		xsynAssetAfterUpsertHooks = append(xsynAssetAfterUpsertHooks, xsynAssetHook)
	}
}

// One returns a single xsynAsset record from the query.
func (q xsynAssetQuery) One(exec boil.Executor) (*XsynAsset, error) {
	o := &XsynAsset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for xsyn_assets")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all XsynAsset records from the query.
func (q xsynAssetQuery) All(exec boil.Executor) (XsynAssetSlice, error) {
	var o []*XsynAsset

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to XsynAsset slice")
	}

	if len(xsynAssetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all XsynAsset records in the query.
func (q xsynAssetQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count xsyn_assets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q xsynAssetQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if xsyn_assets exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *XsynAsset) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// FrozenBy pointed to by the foreign key.
func (o *XsynAsset) FrozenBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FrozenByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LockedBy pointed to by the foreign key.
func (o *XsynAsset) LockedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LockedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// MetadataHashXsynMetadatum pointed to by the foreign key.
func (o *XsynAsset) MetadataHashXsynMetadatum(mods ...qm.QueryMod) xsynMetadatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"hash\" = ?", o.MetadataHash),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := XsynMetadata(queryMods...)
	queries.SetFrom(query.Query, "\"xsyn_metadata\"")

	return query
}

// User pointed to by the foreign key.
func (o *XsynAsset) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynAssetL) LoadCollection(e boil.Executor, singular bool, maybeXsynAsset interface{}, mods queries.Applicator) error {
	var slice []*XsynAsset
	var object *XsynAsset

	if singular {
		object = maybeXsynAsset.(*XsynAsset)
	} else {
		slice = *maybeXsynAsset.(*[]*XsynAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynAssetR{}
		}
		if !queries.IsNil(object.CollectionID) {
			args = append(args, object.CollectionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynAssetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CollectionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CollectionID) {
				args = append(args, obj.CollectionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(xsynAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.XsynAssets = append(foreign.R.XsynAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CollectionID, foreign.ID) {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.XsynAssets = append(foreign.R.XsynAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadFrozenBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynAssetL) LoadFrozenBy(e boil.Executor, singular bool, maybeXsynAsset interface{}, mods queries.Applicator) error {
	var slice []*XsynAsset
	var object *XsynAsset

	if singular {
		object = maybeXsynAsset.(*XsynAsset)
	} else {
		slice = *maybeXsynAsset.(*[]*XsynAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynAssetR{}
		}
		if !queries.IsNil(object.FrozenByID) {
			args = append(args, object.FrozenByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynAssetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FrozenByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FrozenByID) {
				args = append(args, obj.FrozenByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(xsynAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FrozenBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FrozenByXsynAssets = append(foreign.R.FrozenByXsynAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FrozenByID, foreign.ID) {
				local.R.FrozenBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FrozenByXsynAssets = append(foreign.R.FrozenByXsynAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadLockedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynAssetL) LoadLockedBy(e boil.Executor, singular bool, maybeXsynAsset interface{}, mods queries.Applicator) error {
	var slice []*XsynAsset
	var object *XsynAsset

	if singular {
		object = maybeXsynAsset.(*XsynAsset)
	} else {
		slice = *maybeXsynAsset.(*[]*XsynAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynAssetR{}
		}
		if !queries.IsNil(object.LockedByID) {
			args = append(args, object.LockedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynAssetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LockedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LockedByID) {
				args = append(args, obj.LockedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(xsynAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LockedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.LockedByXsynAssets = append(foreign.R.LockedByXsynAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LockedByID, foreign.ID) {
				local.R.LockedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LockedByXsynAssets = append(foreign.R.LockedByXsynAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadMetadataHashXsynMetadatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynAssetL) LoadMetadataHashXsynMetadatum(e boil.Executor, singular bool, maybeXsynAsset interface{}, mods queries.Applicator) error {
	var slice []*XsynAsset
	var object *XsynAsset

	if singular {
		object = maybeXsynAsset.(*XsynAsset)
	} else {
		slice = *maybeXsynAsset.(*[]*XsynAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynAssetR{}
		}
		args = append(args, object.MetadataHash)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynAssetR{}
			}

			for _, a := range args {
				if a == obj.MetadataHash {
					continue Outer
				}
			}

			args = append(args, obj.MetadataHash)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`xsyn_metadata`),
		qm.WhereIn(`xsyn_metadata.hash in ?`, args...),
		qmhelper.WhereIsNull(`xsyn_metadata.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load XsynMetadatum")
	}

	var resultSlice []*XsynMetadatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice XsynMetadatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for xsyn_metadata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for xsyn_metadata")
	}

	if len(xsynAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MetadataHashXsynMetadatum = foreign
		if foreign.R == nil {
			foreign.R = &xsynMetadatumR{}
		}
		foreign.R.MetadataHashXsynAsset = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MetadataHash == foreign.Hash {
				local.R.MetadataHashXsynMetadatum = foreign
				if foreign.R == nil {
					foreign.R = &xsynMetadatumR{}
				}
				foreign.R.MetadataHashXsynAsset = local
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (xsynAssetL) LoadUser(e boil.Executor, singular bool, maybeXsynAsset interface{}, mods queries.Applicator) error {
	var slice []*XsynAsset
	var object *XsynAsset

	if singular {
		object = maybeXsynAsset.(*XsynAsset)
	} else {
		slice = *maybeXsynAsset.(*[]*XsynAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &xsynAssetR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &xsynAssetR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(xsynAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.XsynAssets = append(foreign.R.XsynAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.XsynAssets = append(foreign.R.XsynAssets, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the xsynAsset to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.XsynAssets.
func (o *XsynAsset) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, xsynAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MetadataHash}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CollectionID, related.ID)
	if o.R == nil {
		o.R = &xsynAssetR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			XsynAssets: XsynAssetSlice{o},
		}
	} else {
		related.R.XsynAssets = append(related.R.XsynAssets, o)
	}

	return nil
}

// RemoveCollection relationship.
// Sets o.R.Collection to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *XsynAsset) RemoveCollection(exec boil.Executor, related *Collection) error {
	var err error

	queries.SetScanner(&o.CollectionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("collection_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Collection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.XsynAssets {
		if queries.Equal(o.CollectionID, ri.CollectionID) {
			continue
		}

		ln := len(related.R.XsynAssets)
		if ln > 1 && i < ln-1 {
			related.R.XsynAssets[i] = related.R.XsynAssets[ln-1]
		}
		related.R.XsynAssets = related.R.XsynAssets[:ln-1]
		break
	}
	return nil
}

// SetFrozenBy of the xsynAsset to the related item.
// Sets o.R.FrozenBy to related.
// Adds o to related.R.FrozenByXsynAssets.
func (o *XsynAsset) SetFrozenBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"frozen_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, xsynAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MetadataHash}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FrozenByID, related.ID)
	if o.R == nil {
		o.R = &xsynAssetR{
			FrozenBy: related,
		}
	} else {
		o.R.FrozenBy = related
	}

	if related.R == nil {
		related.R = &userR{
			FrozenByXsynAssets: XsynAssetSlice{o},
		}
	} else {
		related.R.FrozenByXsynAssets = append(related.R.FrozenByXsynAssets, o)
	}

	return nil
}

// RemoveFrozenBy relationship.
// Sets o.R.FrozenBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *XsynAsset) RemoveFrozenBy(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.FrozenByID, nil)
	if _, err = o.Update(exec, boil.Whitelist("frozen_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FrozenBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FrozenByXsynAssets {
		if queries.Equal(o.FrozenByID, ri.FrozenByID) {
			continue
		}

		ln := len(related.R.FrozenByXsynAssets)
		if ln > 1 && i < ln-1 {
			related.R.FrozenByXsynAssets[i] = related.R.FrozenByXsynAssets[ln-1]
		}
		related.R.FrozenByXsynAssets = related.R.FrozenByXsynAssets[:ln-1]
		break
	}
	return nil
}

// SetLockedBy of the xsynAsset to the related item.
// Sets o.R.LockedBy to related.
// Adds o to related.R.LockedByXsynAssets.
func (o *XsynAsset) SetLockedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"locked_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, xsynAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MetadataHash}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LockedByID, related.ID)
	if o.R == nil {
		o.R = &xsynAssetR{
			LockedBy: related,
		}
	} else {
		o.R.LockedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			LockedByXsynAssets: XsynAssetSlice{o},
		}
	} else {
		related.R.LockedByXsynAssets = append(related.R.LockedByXsynAssets, o)
	}

	return nil
}

// RemoveLockedBy relationship.
// Sets o.R.LockedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *XsynAsset) RemoveLockedBy(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.LockedByID, nil)
	if _, err = o.Update(exec, boil.Whitelist("locked_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LockedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LockedByXsynAssets {
		if queries.Equal(o.LockedByID, ri.LockedByID) {
			continue
		}

		ln := len(related.R.LockedByXsynAssets)
		if ln > 1 && i < ln-1 {
			related.R.LockedByXsynAssets[i] = related.R.LockedByXsynAssets[ln-1]
		}
		related.R.LockedByXsynAssets = related.R.LockedByXsynAssets[:ln-1]
		break
	}
	return nil
}

// SetMetadataHashXsynMetadatum of the xsynAsset to the related item.
// Sets o.R.MetadataHashXsynMetadatum to related.
// Adds o to related.R.MetadataHashXsynAsset.
func (o *XsynAsset) SetMetadataHashXsynMetadatum(exec boil.Executor, insert bool, related *XsynMetadatum) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"metadata_hash"}),
		strmangle.WhereClause("\"", "\"", 2, xsynAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.MetadataHash}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MetadataHash = related.Hash
	if o.R == nil {
		o.R = &xsynAssetR{
			MetadataHashXsynMetadatum: related,
		}
	} else {
		o.R.MetadataHashXsynMetadatum = related
	}

	if related.R == nil {
		related.R = &xsynMetadatumR{
			MetadataHashXsynAsset: o,
		}
	} else {
		related.R.MetadataHashXsynAsset = o
	}

	return nil
}

// SetUser of the xsynAsset to the related item.
// Sets o.R.User to related.
// Adds o to related.R.XsynAssets.
func (o *XsynAsset) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xsyn_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, xsynAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MetadataHash}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &xsynAssetR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			XsynAssets: XsynAssetSlice{o},
		}
	} else {
		related.R.XsynAssets = append(related.R.XsynAssets, o)
	}

	return nil
}

// XsynAssets retrieves all the records using an executor.
func XsynAssets(mods ...qm.QueryMod) xsynAssetQuery {
	mods = append(mods, qm.From("\"xsyn_assets\""))
	return xsynAssetQuery{NewQuery(mods...)}
}

// FindXsynAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindXsynAsset(exec boil.Executor, metadataHash string, selectCols ...string) (*XsynAsset, error) {
	xsynAssetObj := &XsynAsset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"xsyn_assets\" where \"metadata_hash\"=$1", sel,
	)

	q := queries.Raw(query, metadataHash)

	err := q.Bind(nil, exec, xsynAssetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from xsyn_assets")
	}

	if err = xsynAssetObj.doAfterSelectHooks(exec); err != nil {
		return xsynAssetObj, err
	}

	return xsynAssetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *XsynAsset) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no xsyn_assets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xsynAssetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	xsynAssetInsertCacheMut.RLock()
	cache, cached := xsynAssetInsertCache[key]
	xsynAssetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			xsynAssetAllColumns,
			xsynAssetColumnsWithDefault,
			xsynAssetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(xsynAssetType, xsynAssetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(xsynAssetType, xsynAssetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"xsyn_assets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"xsyn_assets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into xsyn_assets")
	}

	if !cached {
		xsynAssetInsertCacheMut.Lock()
		xsynAssetInsertCache[key] = cache
		xsynAssetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the XsynAsset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *XsynAsset) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	xsynAssetUpdateCacheMut.RLock()
	cache, cached := xsynAssetUpdateCache[key]
	xsynAssetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			xsynAssetAllColumns,
			xsynAssetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update xsyn_assets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"xsyn_assets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, xsynAssetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(xsynAssetType, xsynAssetMapping, append(wl, xsynAssetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update xsyn_assets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for xsyn_assets")
	}

	if !cached {
		xsynAssetUpdateCacheMut.Lock()
		xsynAssetUpdateCache[key] = cache
		xsynAssetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q xsynAssetQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for xsyn_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for xsyn_assets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o XsynAssetSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"xsyn_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, xsynAssetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in xsynAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all xsynAsset")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *XsynAsset) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no xsyn_assets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xsynAssetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	xsynAssetUpsertCacheMut.RLock()
	cache, cached := xsynAssetUpsertCache[key]
	xsynAssetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			xsynAssetAllColumns,
			xsynAssetColumnsWithDefault,
			xsynAssetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			xsynAssetAllColumns,
			xsynAssetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert xsyn_assets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(xsynAssetPrimaryKeyColumns))
			copy(conflict, xsynAssetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"xsyn_assets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(xsynAssetType, xsynAssetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(xsynAssetType, xsynAssetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert xsyn_assets")
	}

	if !cached {
		xsynAssetUpsertCacheMut.Lock()
		xsynAssetUpsertCache[key] = cache
		xsynAssetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single XsynAsset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *XsynAsset) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no XsynAsset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), xsynAssetPrimaryKeyMapping)
	sql := "DELETE FROM \"xsyn_assets\" WHERE \"metadata_hash\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from xsyn_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for xsyn_assets")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q xsynAssetQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no xsynAssetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from xsyn_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for xsyn_assets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o XsynAssetSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(xsynAssetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"xsyn_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, xsynAssetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from xsynAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for xsyn_assets")
	}

	if len(xsynAssetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *XsynAsset) Reload(exec boil.Executor) error {
	ret, err := FindXsynAsset(exec, o.MetadataHash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XsynAssetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := XsynAssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xsynAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"xsyn_assets\".* FROM \"xsyn_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, xsynAssetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in XsynAssetSlice")
	}

	*o = slice

	return nil
}

// XsynAssetExists checks if the XsynAsset row exists.
func XsynAssetExists(exec boil.Executor, metadataHash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"xsyn_assets\" where \"metadata_hash\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, metadataHash)
	}
	row := exec.QueryRow(sql, metadataHash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if xsyn_assets exists")
	}

	return exists, nil
}
