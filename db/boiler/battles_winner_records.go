// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattlesWinnerRecord is an object representing the database table.
type BattlesWinnerRecord struct {
	BattleID       string    `boiler:"battle_id" boil:"battle_id" json:"battleID" toml:"battleID" yaml:"battleID"`
	WarMachineHash string    `boiler:"war_machine_hash" boil:"war_machine_hash" json:"warMachineHash" toml:"warMachineHash" yaml:"warMachineHash"`
	IsWinner       bool      `boiler:"is_winner" boil:"is_winner" json:"isWinner" toml:"isWinner" yaml:"isWinner"`
	FactionID      string    `boiler:"faction_id" boil:"faction_id" json:"factionID" toml:"factionID" yaml:"factionID"`
	OwnerID        string    `boiler:"owner_id" boil:"owner_id" json:"ownerID" toml:"ownerID" yaml:"ownerID"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *battlesWinnerRecordR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battlesWinnerRecordL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattlesWinnerRecordColumns = struct {
	BattleID       string
	WarMachineHash string
	IsWinner       string
	FactionID      string
	OwnerID        string
	CreatedAt      string
}{
	BattleID:       "battle_id",
	WarMachineHash: "war_machine_hash",
	IsWinner:       "is_winner",
	FactionID:      "faction_id",
	OwnerID:        "owner_id",
	CreatedAt:      "created_at",
}

var BattlesWinnerRecordTableColumns = struct {
	BattleID       string
	WarMachineHash string
	IsWinner       string
	FactionID      string
	OwnerID        string
	CreatedAt      string
}{
	BattleID:       "battles_winner_records.battle_id",
	WarMachineHash: "battles_winner_records.war_machine_hash",
	IsWinner:       "battles_winner_records.is_winner",
	FactionID:      "battles_winner_records.faction_id",
	OwnerID:        "battles_winner_records.owner_id",
	CreatedAt:      "battles_winner_records.created_at",
}

// Generated where

var BattlesWinnerRecordWhere = struct {
	BattleID       whereHelperstring
	WarMachineHash whereHelperstring
	IsWinner       whereHelperbool
	FactionID      whereHelperstring
	OwnerID        whereHelperstring
	CreatedAt      whereHelpertime_Time
}{
	BattleID:       whereHelperstring{field: "\"battles_winner_records\".\"battle_id\""},
	WarMachineHash: whereHelperstring{field: "\"battles_winner_records\".\"war_machine_hash\""},
	IsWinner:       whereHelperbool{field: "\"battles_winner_records\".\"is_winner\""},
	FactionID:      whereHelperstring{field: "\"battles_winner_records\".\"faction_id\""},
	OwnerID:        whereHelperstring{field: "\"battles_winner_records\".\"owner_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"battles_winner_records\".\"created_at\""},
}

// BattlesWinnerRecordRels is where relationship names are stored.
var BattlesWinnerRecordRels = struct {
}{}

// battlesWinnerRecordR is where relationships are stored.
type battlesWinnerRecordR struct {
}

// NewStruct creates a new relationship struct
func (*battlesWinnerRecordR) NewStruct() *battlesWinnerRecordR {
	return &battlesWinnerRecordR{}
}

// battlesWinnerRecordL is where Load methods for each relationship are stored.
type battlesWinnerRecordL struct{}

var (
	battlesWinnerRecordAllColumns            = []string{"battle_id", "war_machine_hash", "is_winner", "faction_id", "owner_id", "created_at"}
	battlesWinnerRecordColumnsWithoutDefault = []string{"battle_id", "war_machine_hash", "faction_id", "owner_id"}
	battlesWinnerRecordColumnsWithDefault    = []string{"is_winner", "created_at"}
	battlesWinnerRecordPrimaryKeyColumns     = []string{"battle_id", "war_machine_hash"}
)

type (
	// BattlesWinnerRecordSlice is an alias for a slice of pointers to BattlesWinnerRecord.
	// This should almost always be used instead of []BattlesWinnerRecord.
	BattlesWinnerRecordSlice []*BattlesWinnerRecord
	// BattlesWinnerRecordHook is the signature for custom BattlesWinnerRecord hook methods
	BattlesWinnerRecordHook func(boil.Executor, *BattlesWinnerRecord) error

	battlesWinnerRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battlesWinnerRecordType                 = reflect.TypeOf(&BattlesWinnerRecord{})
	battlesWinnerRecordMapping              = queries.MakeStructMapping(battlesWinnerRecordType)
	battlesWinnerRecordPrimaryKeyMapping, _ = queries.BindMapping(battlesWinnerRecordType, battlesWinnerRecordMapping, battlesWinnerRecordPrimaryKeyColumns)
	battlesWinnerRecordInsertCacheMut       sync.RWMutex
	battlesWinnerRecordInsertCache          = make(map[string]insertCache)
	battlesWinnerRecordUpdateCacheMut       sync.RWMutex
	battlesWinnerRecordUpdateCache          = make(map[string]updateCache)
	battlesWinnerRecordUpsertCacheMut       sync.RWMutex
	battlesWinnerRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battlesWinnerRecordBeforeInsertHooks []BattlesWinnerRecordHook
var battlesWinnerRecordBeforeUpdateHooks []BattlesWinnerRecordHook
var battlesWinnerRecordBeforeDeleteHooks []BattlesWinnerRecordHook
var battlesWinnerRecordBeforeUpsertHooks []BattlesWinnerRecordHook

var battlesWinnerRecordAfterInsertHooks []BattlesWinnerRecordHook
var battlesWinnerRecordAfterSelectHooks []BattlesWinnerRecordHook
var battlesWinnerRecordAfterUpdateHooks []BattlesWinnerRecordHook
var battlesWinnerRecordAfterDeleteHooks []BattlesWinnerRecordHook
var battlesWinnerRecordAfterUpsertHooks []BattlesWinnerRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattlesWinnerRecord) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattlesWinnerRecord) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattlesWinnerRecord) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattlesWinnerRecord) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattlesWinnerRecord) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattlesWinnerRecord) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattlesWinnerRecord) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattlesWinnerRecord) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattlesWinnerRecord) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battlesWinnerRecordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattlesWinnerRecordHook registers your hook function for all future operations.
func AddBattlesWinnerRecordHook(hookPoint boil.HookPoint, battlesWinnerRecordHook BattlesWinnerRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battlesWinnerRecordBeforeInsertHooks = append(battlesWinnerRecordBeforeInsertHooks, battlesWinnerRecordHook)
	case boil.BeforeUpdateHook:
		battlesWinnerRecordBeforeUpdateHooks = append(battlesWinnerRecordBeforeUpdateHooks, battlesWinnerRecordHook)
	case boil.BeforeDeleteHook:
		battlesWinnerRecordBeforeDeleteHooks = append(battlesWinnerRecordBeforeDeleteHooks, battlesWinnerRecordHook)
	case boil.BeforeUpsertHook:
		battlesWinnerRecordBeforeUpsertHooks = append(battlesWinnerRecordBeforeUpsertHooks, battlesWinnerRecordHook)
	case boil.AfterInsertHook:
		battlesWinnerRecordAfterInsertHooks = append(battlesWinnerRecordAfterInsertHooks, battlesWinnerRecordHook)
	case boil.AfterSelectHook:
		battlesWinnerRecordAfterSelectHooks = append(battlesWinnerRecordAfterSelectHooks, battlesWinnerRecordHook)
	case boil.AfterUpdateHook:
		battlesWinnerRecordAfterUpdateHooks = append(battlesWinnerRecordAfterUpdateHooks, battlesWinnerRecordHook)
	case boil.AfterDeleteHook:
		battlesWinnerRecordAfterDeleteHooks = append(battlesWinnerRecordAfterDeleteHooks, battlesWinnerRecordHook)
	case boil.AfterUpsertHook:
		battlesWinnerRecordAfterUpsertHooks = append(battlesWinnerRecordAfterUpsertHooks, battlesWinnerRecordHook)
	}
}

// One returns a single battlesWinnerRecord record from the query.
func (q battlesWinnerRecordQuery) One(exec boil.Executor) (*BattlesWinnerRecord, error) {
	o := &BattlesWinnerRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battles_winner_records")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattlesWinnerRecord records from the query.
func (q battlesWinnerRecordQuery) All(exec boil.Executor) (BattlesWinnerRecordSlice, error) {
	var o []*BattlesWinnerRecord

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattlesWinnerRecord slice")
	}

	if len(battlesWinnerRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattlesWinnerRecord records in the query.
func (q battlesWinnerRecordQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battles_winner_records rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battlesWinnerRecordQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battles_winner_records exists")
	}

	return count > 0, nil
}

// BattlesWinnerRecords retrieves all the records using an executor.
func BattlesWinnerRecords(mods ...qm.QueryMod) battlesWinnerRecordQuery {
	mods = append(mods, qm.From("\"battles_winner_records\""))
	return battlesWinnerRecordQuery{NewQuery(mods...)}
}

// FindBattlesWinnerRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattlesWinnerRecord(exec boil.Executor, battleID string, warMachineHash string, selectCols ...string) (*BattlesWinnerRecord, error) {
	battlesWinnerRecordObj := &BattlesWinnerRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battles_winner_records\" where \"battle_id\"=$1 AND \"war_machine_hash\"=$2", sel,
	)

	q := queries.Raw(query, battleID, warMachineHash)

	err := q.Bind(nil, exec, battlesWinnerRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battles_winner_records")
	}

	if err = battlesWinnerRecordObj.doAfterSelectHooks(exec); err != nil {
		return battlesWinnerRecordObj, err
	}

	return battlesWinnerRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattlesWinnerRecord) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battles_winner_records provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battlesWinnerRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battlesWinnerRecordInsertCacheMut.RLock()
	cache, cached := battlesWinnerRecordInsertCache[key]
	battlesWinnerRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battlesWinnerRecordAllColumns,
			battlesWinnerRecordColumnsWithDefault,
			battlesWinnerRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battlesWinnerRecordType, battlesWinnerRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battlesWinnerRecordType, battlesWinnerRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battles_winner_records\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battles_winner_records\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battles_winner_records")
	}

	if !cached {
		battlesWinnerRecordInsertCacheMut.Lock()
		battlesWinnerRecordInsertCache[key] = cache
		battlesWinnerRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattlesWinnerRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattlesWinnerRecord) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battlesWinnerRecordUpdateCacheMut.RLock()
	cache, cached := battlesWinnerRecordUpdateCache[key]
	battlesWinnerRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battlesWinnerRecordAllColumns,
			battlesWinnerRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battles_winner_records, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battles_winner_records\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battlesWinnerRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battlesWinnerRecordType, battlesWinnerRecordMapping, append(wl, battlesWinnerRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battles_winner_records row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battles_winner_records")
	}

	if !cached {
		battlesWinnerRecordUpdateCacheMut.Lock()
		battlesWinnerRecordUpdateCache[key] = cache
		battlesWinnerRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battlesWinnerRecordQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battles_winner_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battles_winner_records")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattlesWinnerRecordSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlesWinnerRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battles_winner_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battlesWinnerRecordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battlesWinnerRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battlesWinnerRecord")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattlesWinnerRecord) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battles_winner_records provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battlesWinnerRecordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battlesWinnerRecordUpsertCacheMut.RLock()
	cache, cached := battlesWinnerRecordUpsertCache[key]
	battlesWinnerRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battlesWinnerRecordAllColumns,
			battlesWinnerRecordColumnsWithDefault,
			battlesWinnerRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battlesWinnerRecordAllColumns,
			battlesWinnerRecordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battles_winner_records, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battlesWinnerRecordPrimaryKeyColumns))
			copy(conflict, battlesWinnerRecordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battles_winner_records\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battlesWinnerRecordType, battlesWinnerRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battlesWinnerRecordType, battlesWinnerRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battles_winner_records")
	}

	if !cached {
		battlesWinnerRecordUpsertCacheMut.Lock()
		battlesWinnerRecordUpsertCache[key] = cache
		battlesWinnerRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattlesWinnerRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattlesWinnerRecord) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattlesWinnerRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battlesWinnerRecordPrimaryKeyMapping)
	sql := "DELETE FROM \"battles_winner_records\" WHERE \"battle_id\"=$1 AND \"war_machine_hash\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battles_winner_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battles_winner_records")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battlesWinnerRecordQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battlesWinnerRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battles_winner_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battles_winner_records")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattlesWinnerRecordSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battlesWinnerRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlesWinnerRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battles_winner_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlesWinnerRecordPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battlesWinnerRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battles_winner_records")
	}

	if len(battlesWinnerRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattlesWinnerRecord) Reload(exec boil.Executor) error {
	ret, err := FindBattlesWinnerRecord(exec, o.BattleID, o.WarMachineHash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattlesWinnerRecordSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattlesWinnerRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlesWinnerRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battles_winner_records\".* FROM \"battles_winner_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlesWinnerRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattlesWinnerRecordSlice")
	}

	*o = slice

	return nil
}

// BattlesWinnerRecordExists checks if the BattlesWinnerRecord row exists.
func BattlesWinnerRecordExists(exec boil.Executor, battleID string, warMachineHash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battles_winner_records\" where \"battle_id\"=$1 AND \"war_machine_hash\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, battleID, warMachineHash)
	}
	row := exec.QueryRow(sql, battleID, warMachineHash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battles_winner_records exists")
	}

	return exists, nil
}
