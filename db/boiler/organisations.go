// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Organisation is an object representing the database table.
type Organisation struct {
	ID        string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug      string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Name      string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Keywords  null.String `boiler:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	DeletedAt null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *organisationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L organisationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganisationColumns = struct {
	ID        string
	Slug      string
	Name      string
	Keywords  string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	Slug:      "slug",
	Name:      "name",
	Keywords:  "keywords",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var OrganisationTableColumns = struct {
	ID        string
	Slug      string
	Name      string
	Keywords  string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "organisations.id",
	Slug:      "organisations.slug",
	Name:      "organisations.name",
	Keywords:  "organisations.keywords",
	DeletedAt: "organisations.deleted_at",
	UpdatedAt: "organisations.updated_at",
	CreatedAt: "organisations.created_at",
}

// Generated where

var OrganisationWhere = struct {
	ID        whereHelperstring
	Slug      whereHelperstring
	Name      whereHelperstring
	Keywords  whereHelpernull_String
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"organisations\".\"id\""},
	Slug:      whereHelperstring{field: "\"organisations\".\"slug\""},
	Name:      whereHelperstring{field: "\"organisations\".\"name\""},
	Keywords:  whereHelpernull_String{field: "\"organisations\".\"keywords\""},
	DeletedAt: whereHelpernull_Time{field: "\"organisations\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"organisations\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"organisations\".\"created_at\""},
}

// OrganisationRels is where relationship names are stored.
var OrganisationRels = struct {
	Users string
}{
	Users: "Users",
}

// organisationR is where relationships are stored.
type organisationR struct {
	Users UserSlice `boiler:"Users" boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*organisationR) NewStruct() *organisationR {
	return &organisationR{}
}

// organisationL is where Load methods for each relationship are stored.
type organisationL struct{}

var (
	organisationAllColumns            = []string{"id", "slug", "name", "keywords", "deleted_at", "updated_at", "created_at"}
	organisationColumnsWithoutDefault = []string{"slug", "name", "keywords", "deleted_at"}
	organisationColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	organisationPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganisationSlice is an alias for a slice of pointers to Organisation.
	// This should almost always be used instead of []Organisation.
	OrganisationSlice []*Organisation
	// OrganisationHook is the signature for custom Organisation hook methods
	OrganisationHook func(boil.Executor, *Organisation) error

	organisationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organisationType                 = reflect.TypeOf(&Organisation{})
	organisationMapping              = queries.MakeStructMapping(organisationType)
	organisationPrimaryKeyMapping, _ = queries.BindMapping(organisationType, organisationMapping, organisationPrimaryKeyColumns)
	organisationInsertCacheMut       sync.RWMutex
	organisationInsertCache          = make(map[string]insertCache)
	organisationUpdateCacheMut       sync.RWMutex
	organisationUpdateCache          = make(map[string]updateCache)
	organisationUpsertCacheMut       sync.RWMutex
	organisationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organisationBeforeInsertHooks []OrganisationHook
var organisationBeforeUpdateHooks []OrganisationHook
var organisationBeforeDeleteHooks []OrganisationHook
var organisationBeforeUpsertHooks []OrganisationHook

var organisationAfterInsertHooks []OrganisationHook
var organisationAfterSelectHooks []OrganisationHook
var organisationAfterUpdateHooks []OrganisationHook
var organisationAfterDeleteHooks []OrganisationHook
var organisationAfterUpsertHooks []OrganisationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organisation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organisation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organisation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organisation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organisation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organisation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organisation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organisation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organisation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organisationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganisationHook registers your hook function for all future operations.
func AddOrganisationHook(hookPoint boil.HookPoint, organisationHook OrganisationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organisationBeforeInsertHooks = append(organisationBeforeInsertHooks, organisationHook)
	case boil.BeforeUpdateHook:
		organisationBeforeUpdateHooks = append(organisationBeforeUpdateHooks, organisationHook)
	case boil.BeforeDeleteHook:
		organisationBeforeDeleteHooks = append(organisationBeforeDeleteHooks, organisationHook)
	case boil.BeforeUpsertHook:
		organisationBeforeUpsertHooks = append(organisationBeforeUpsertHooks, organisationHook)
	case boil.AfterInsertHook:
		organisationAfterInsertHooks = append(organisationAfterInsertHooks, organisationHook)
	case boil.AfterSelectHook:
		organisationAfterSelectHooks = append(organisationAfterSelectHooks, organisationHook)
	case boil.AfterUpdateHook:
		organisationAfterUpdateHooks = append(organisationAfterUpdateHooks, organisationHook)
	case boil.AfterDeleteHook:
		organisationAfterDeleteHooks = append(organisationAfterDeleteHooks, organisationHook)
	case boil.AfterUpsertHook:
		organisationAfterUpsertHooks = append(organisationAfterUpsertHooks, organisationHook)
	}
}

// One returns a single organisation record from the query.
func (q organisationQuery) One(exec boil.Executor) (*Organisation, error) {
	o := &Organisation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for organisations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Organisation records from the query.
func (q organisationQuery) All(exec boil.Executor) (OrganisationSlice, error) {
	var o []*Organisation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Organisation slice")
	}

	if len(organisationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Organisation records in the query.
func (q organisationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count organisations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organisationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if organisations exists")
	}

	return count > 0, nil
}

// Users retrieves all the user's Users with an executor.
func (o *Organisation) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"user_organisations\" on \"users\".\"id\" = \"user_organisations\".\"user_id\""),
		qm.Where("\"user_organisations\".\"organisation_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organisationL) LoadUsers(e boil.Executor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		object = maybeOrganisation.(*Organisation)
	} else {
		slice = *maybeOrganisation.(*[]*Organisation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".id, \"users\".username, \"users\".role_id, \"users\".avatar_id, \"users\".facebook_id, \"users\".google_id, \"users\".twitch_id, \"users\".twitter_id, \"users\".discord_id, \"users\".faction_id, \"users\".email, \"users\".first_name, \"users\".last_name, \"users\".verified, \"users\".old_password_required, \"users\".two_factor_authentication_activated, \"users\".two_factor_authentication_secret, \"users\".two_factor_authentication_is_set, \"users\".sups, \"users\".public_address, \"users\".private_address, \"users\".nonce, \"users\".keywords, \"users\".deleted_at, \"users\".updated_at, \"users\".created_at, \"users\".metadata, \"users\".mobile_number, \"a\".\"organisation_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"user_organisations\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"organisation_id\" in ?", args...),
		qmhelper.WhereIsNull("\"users\".\"deleted_at\""),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Username, &one.RoleID, &one.AvatarID, &one.FacebookID, &one.GoogleID, &one.TwitchID, &one.TwitterID, &one.DiscordID, &one.FactionID, &one.Email, &one.FirstName, &one.LastName, &one.Verified, &one.OldPasswordRequired, &one.TwoFactorAuthenticationActivated, &one.TwoFactorAuthenticationSecret, &one.TwoFactorAuthenticationIsSet, &one.Sups, &one.PublicAddress, &one.PrivateAddress, &one.Nonce, &one.Keywords, &one.DeletedAt, &one.UpdatedAt, &one.CreatedAt, &one.Metadata, &one.MobileNumber, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Organisations = append(foreign.R.Organisations, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the organisation, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Organisations appropriately.
func (o *Organisation) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"user_organisations\" (\"organisation_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &organisationR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Organisations: OrganisationSlice{o},
			}
		} else {
			rel.R.Organisations = append(rel.R.Organisations, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// organisation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organisations's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Organisations's Users accordingly.
func (o *Organisation) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"user_organisations\" where \"organisation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromOrganisationsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Organisations.
func (o *Organisation) RemoveUsers(exec boil.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"user_organisations\" where \"organisation_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromOrganisationsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromOrganisationsSlice(o *Organisation, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Organisations {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Organisations)
			if ln > 1 && i < ln-1 {
				rel.R.Organisations[i] = rel.R.Organisations[ln-1]
			}
			rel.R.Organisations = rel.R.Organisations[:ln-1]
			break
		}
	}
}

// Organisations retrieves all the records using an executor.
func Organisations(mods ...qm.QueryMod) organisationQuery {
	mods = append(mods, qm.From("\"organisations\""), qmhelper.WhereIsNull("\"organisations\".\"deleted_at\""))
	return organisationQuery{NewQuery(mods...)}
}

// FindOrganisation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganisation(exec boil.Executor, iD string, selectCols ...string) (*Organisation, error) {
	organisationObj := &Organisation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organisations\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, organisationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from organisations")
	}

	if err = organisationObj.doAfterSelectHooks(exec); err != nil {
		return organisationObj, err
	}

	return organisationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organisation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no organisations provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organisationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organisationInsertCacheMut.RLock()
	cache, cached := organisationInsertCache[key]
	organisationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organisationAllColumns,
			organisationColumnsWithDefault,
			organisationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organisationType, organisationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organisations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organisations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into organisations")
	}

	if !cached {
		organisationInsertCacheMut.Lock()
		organisationInsertCache[key] = cache
		organisationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Organisation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organisation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organisationUpdateCacheMut.RLock()
	cache, cached := organisationUpdateCache[key]
	organisationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organisationAllColumns,
			organisationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update organisations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organisations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organisationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, append(wl, organisationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update organisations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for organisations")
	}

	if !cached {
		organisationUpdateCacheMut.Lock()
		organisationUpdateCache[key] = cache
		organisationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organisationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for organisations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for organisations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganisationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organisations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organisationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in organisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all organisation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organisation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no organisations provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organisationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organisationUpsertCacheMut.RLock()
	cache, cached := organisationUpsertCache[key]
	organisationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organisationAllColumns,
			organisationColumnsWithDefault,
			organisationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organisationAllColumns,
			organisationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert organisations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organisationPrimaryKeyColumns))
			copy(conflict, organisationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organisations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organisationType, organisationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert organisations")
	}

	if !cached {
		organisationUpsertCacheMut.Lock()
		organisationUpsertCache[key] = cache
		organisationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Organisation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organisation) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Organisation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organisationPrimaryKeyMapping)
		sql = "DELETE FROM \"organisations\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"organisations\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(organisationType, organisationMapping, append(wl, organisationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from organisations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for organisations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organisationQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no organisationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from organisations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for organisations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganisationSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organisationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"organisations\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organisationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"organisations\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, organisationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from organisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for organisations")
	}

	if len(organisationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organisation) Reload(exec boil.Executor) error {
	ret, err := FindOrganisation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganisationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganisationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organisations\".* FROM \"organisations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organisationPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in OrganisationSlice")
	}

	*o = slice

	return nil
}

// OrganisationExists checks if the Organisation row exists.
func OrganisationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organisations\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if organisations exists")
	}

	return exists, nil
}
