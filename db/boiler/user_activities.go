// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserActivity is an object representing the database table.
type UserActivity struct {
	ID         string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string      `boiler:"user_id" boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`
	Action     string      `boiler:"action" boil:"action" json:"action" toml:"action" yaml:"action"`
	ObjectID   null.String `boiler:"object_id" boil:"object_id" json:"objectID,omitempty" toml:"objectID" yaml:"objectID,omitempty"`
	ObjectSlug null.String `boiler:"object_slug" boil:"object_slug" json:"objectSlug,omitempty" toml:"objectSlug" yaml:"objectSlug,omitempty"`
	ObjectName null.String `boiler:"object_name" boil:"object_name" json:"objectName,omitempty" toml:"objectName" yaml:"objectName,omitempty"`
	ObjectType string      `boiler:"object_type" boil:"object_type" json:"objectType" toml:"objectType" yaml:"objectType"`
	OldData    null.JSON   `boiler:"old_data" boil:"old_data" json:"oldData,omitempty" toml:"oldData" yaml:"oldData,omitempty"`
	NewData    null.JSON   `boiler:"new_data" boil:"new_data" json:"newData,omitempty" toml:"newData" yaml:"newData,omitempty"`
	Keywords   null.String `boiler:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	CreatedAt  time.Time   `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *userActivityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userActivityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserActivityColumns = struct {
	ID         string
	UserID     string
	Action     string
	ObjectID   string
	ObjectSlug string
	ObjectName string
	ObjectType string
	OldData    string
	NewData    string
	Keywords   string
	CreatedAt  string
}{
	ID:         "id",
	UserID:     "user_id",
	Action:     "action",
	ObjectID:   "object_id",
	ObjectSlug: "object_slug",
	ObjectName: "object_name",
	ObjectType: "object_type",
	OldData:    "old_data",
	NewData:    "new_data",
	Keywords:   "keywords",
	CreatedAt:  "created_at",
}

var UserActivityTableColumns = struct {
	ID         string
	UserID     string
	Action     string
	ObjectID   string
	ObjectSlug string
	ObjectName string
	ObjectType string
	OldData    string
	NewData    string
	Keywords   string
	CreatedAt  string
}{
	ID:         "user_activities.id",
	UserID:     "user_activities.user_id",
	Action:     "user_activities.action",
	ObjectID:   "user_activities.object_id",
	ObjectSlug: "user_activities.object_slug",
	ObjectName: "user_activities.object_name",
	ObjectType: "user_activities.object_type",
	OldData:    "user_activities.old_data",
	NewData:    "user_activities.new_data",
	Keywords:   "user_activities.keywords",
	CreatedAt:  "user_activities.created_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserActivityWhere = struct {
	ID         whereHelperstring
	UserID     whereHelperstring
	Action     whereHelperstring
	ObjectID   whereHelpernull_String
	ObjectSlug whereHelpernull_String
	ObjectName whereHelpernull_String
	ObjectType whereHelperstring
	OldData    whereHelpernull_JSON
	NewData    whereHelpernull_JSON
	Keywords   whereHelpernull_String
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"user_activities\".\"id\""},
	UserID:     whereHelperstring{field: "\"user_activities\".\"user_id\""},
	Action:     whereHelperstring{field: "\"user_activities\".\"action\""},
	ObjectID:   whereHelpernull_String{field: "\"user_activities\".\"object_id\""},
	ObjectSlug: whereHelpernull_String{field: "\"user_activities\".\"object_slug\""},
	ObjectName: whereHelpernull_String{field: "\"user_activities\".\"object_name\""},
	ObjectType: whereHelperstring{field: "\"user_activities\".\"object_type\""},
	OldData:    whereHelpernull_JSON{field: "\"user_activities\".\"old_data\""},
	NewData:    whereHelpernull_JSON{field: "\"user_activities\".\"new_data\""},
	Keywords:   whereHelpernull_String{field: "\"user_activities\".\"keywords\""},
	CreatedAt:  whereHelpertime_Time{field: "\"user_activities\".\"created_at\""},
}

// UserActivityRels is where relationship names are stored.
var UserActivityRels = struct {
	User string
}{
	User: "User",
}

// userActivityR is where relationships are stored.
type userActivityR struct {
	User *User `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userActivityR) NewStruct() *userActivityR {
	return &userActivityR{}
}

// userActivityL is where Load methods for each relationship are stored.
type userActivityL struct{}

var (
	userActivityAllColumns            = []string{"id", "user_id", "action", "object_id", "object_slug", "object_name", "object_type", "old_data", "new_data", "keywords", "created_at"}
	userActivityColumnsWithoutDefault = []string{"user_id", "action", "object_id", "object_slug", "object_name", "object_type", "old_data", "new_data", "keywords"}
	userActivityColumnsWithDefault    = []string{"id", "created_at"}
	userActivityPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserActivitySlice is an alias for a slice of pointers to UserActivity.
	// This should almost always be used instead of []UserActivity.
	UserActivitySlice []*UserActivity
	// UserActivityHook is the signature for custom UserActivity hook methods
	UserActivityHook func(boil.Executor, *UserActivity) error

	userActivityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userActivityType                 = reflect.TypeOf(&UserActivity{})
	userActivityMapping              = queries.MakeStructMapping(userActivityType)
	userActivityPrimaryKeyMapping, _ = queries.BindMapping(userActivityType, userActivityMapping, userActivityPrimaryKeyColumns)
	userActivityInsertCacheMut       sync.RWMutex
	userActivityInsertCache          = make(map[string]insertCache)
	userActivityUpdateCacheMut       sync.RWMutex
	userActivityUpdateCache          = make(map[string]updateCache)
	userActivityUpsertCacheMut       sync.RWMutex
	userActivityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userActivityBeforeInsertHooks []UserActivityHook
var userActivityBeforeUpdateHooks []UserActivityHook
var userActivityBeforeDeleteHooks []UserActivityHook
var userActivityBeforeUpsertHooks []UserActivityHook

var userActivityAfterInsertHooks []UserActivityHook
var userActivityAfterSelectHooks []UserActivityHook
var userActivityAfterUpdateHooks []UserActivityHook
var userActivityAfterDeleteHooks []UserActivityHook
var userActivityAfterUpsertHooks []UserActivityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserActivity) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserActivity) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserActivity) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserActivity) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserActivity) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserActivity) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserActivity) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserActivity) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserActivity) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userActivityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserActivityHook registers your hook function for all future operations.
func AddUserActivityHook(hookPoint boil.HookPoint, userActivityHook UserActivityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userActivityBeforeInsertHooks = append(userActivityBeforeInsertHooks, userActivityHook)
	case boil.BeforeUpdateHook:
		userActivityBeforeUpdateHooks = append(userActivityBeforeUpdateHooks, userActivityHook)
	case boil.BeforeDeleteHook:
		userActivityBeforeDeleteHooks = append(userActivityBeforeDeleteHooks, userActivityHook)
	case boil.BeforeUpsertHook:
		userActivityBeforeUpsertHooks = append(userActivityBeforeUpsertHooks, userActivityHook)
	case boil.AfterInsertHook:
		userActivityAfterInsertHooks = append(userActivityAfterInsertHooks, userActivityHook)
	case boil.AfterSelectHook:
		userActivityAfterSelectHooks = append(userActivityAfterSelectHooks, userActivityHook)
	case boil.AfterUpdateHook:
		userActivityAfterUpdateHooks = append(userActivityAfterUpdateHooks, userActivityHook)
	case boil.AfterDeleteHook:
		userActivityAfterDeleteHooks = append(userActivityAfterDeleteHooks, userActivityHook)
	case boil.AfterUpsertHook:
		userActivityAfterUpsertHooks = append(userActivityAfterUpsertHooks, userActivityHook)
	}
}

// One returns a single userActivity record from the query.
func (q userActivityQuery) One(exec boil.Executor) (*UserActivity, error) {
	o := &UserActivity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_activities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserActivity records from the query.
func (q userActivityQuery) All(exec boil.Executor) (UserActivitySlice, error) {
	var o []*UserActivity

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserActivity slice")
	}

	if len(userActivityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserActivity records in the query.
func (q userActivityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_activities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userActivityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_activities exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserActivity) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userActivityL) LoadUser(e boil.Executor, singular bool, maybeUserActivity interface{}, mods queries.Applicator) error {
	var slice []*UserActivity
	var object *UserActivity

	if singular {
		object = maybeUserActivity.(*UserActivity)
	} else {
		slice = *maybeUserActivity.(*[]*UserActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userActivityR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userActivityR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserActivities = append(foreign.R.UserActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserActivities = append(foreign.R.UserActivities, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userActivity to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserActivities.
func (o *UserActivity) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userActivityR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserActivities: UserActivitySlice{o},
		}
	} else {
		related.R.UserActivities = append(related.R.UserActivities, o)
	}

	return nil
}

// UserActivities retrieves all the records using an executor.
func UserActivities(mods ...qm.QueryMod) userActivityQuery {
	mods = append(mods, qm.From("\"user_activities\""))
	return userActivityQuery{NewQuery(mods...)}
}

// FindUserActivity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserActivity(exec boil.Executor, iD string, selectCols ...string) (*UserActivity, error) {
	userActivityObj := &UserActivity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_activities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userActivityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_activities")
	}

	if err = userActivityObj.doAfterSelectHooks(exec); err != nil {
		return userActivityObj, err
	}

	return userActivityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserActivity) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_activities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userActivityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userActivityInsertCacheMut.RLock()
	cache, cached := userActivityInsertCache[key]
	userActivityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userActivityAllColumns,
			userActivityColumnsWithDefault,
			userActivityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userActivityType, userActivityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userActivityType, userActivityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_activities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_activities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_activities")
	}

	if !cached {
		userActivityInsertCacheMut.Lock()
		userActivityInsertCache[key] = cache
		userActivityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserActivity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserActivity) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userActivityUpdateCacheMut.RLock()
	cache, cached := userActivityUpdateCache[key]
	userActivityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userActivityAllColumns,
			userActivityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_activities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userActivityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userActivityType, userActivityMapping, append(wl, userActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_activities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_activities")
	}

	if !cached {
		userActivityUpdateCacheMut.Lock()
		userActivityUpdateCache[key] = cache
		userActivityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userActivityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_activities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserActivitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userActivityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userActivity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserActivity) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_activities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userActivityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userActivityUpsertCacheMut.RLock()
	cache, cached := userActivityUpsertCache[key]
	userActivityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userActivityAllColumns,
			userActivityColumnsWithDefault,
			userActivityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userActivityAllColumns,
			userActivityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_activities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userActivityPrimaryKeyColumns))
			copy(conflict, userActivityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_activities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userActivityType, userActivityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userActivityType, userActivityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert user_activities")
	}

	if !cached {
		userActivityUpsertCacheMut.Lock()
		userActivityUpsertCache[key] = cache
		userActivityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserActivity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserActivity) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserActivity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userActivityPrimaryKeyMapping)
	sql := "DELETE FROM \"user_activities\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_activities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userActivityQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userActivityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_activities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserActivitySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userActivityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userActivityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_activities")
	}

	if len(userActivityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserActivity) Reload(exec boil.Executor) error {
	ret, err := FindUserActivity(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserActivitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserActivitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_activities\".* FROM \"user_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userActivityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserActivitySlice")
	}

	*o = slice

	return nil
}

// UserActivityExists checks if the UserActivity row exists.
func UserActivityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_activities\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_activities exists")
	}

	return exists, nil
}
