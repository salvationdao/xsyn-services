// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleEventsWarMachineDestroyedAssistedWarMachine is an object representing the database table.
type BattleEventsWarMachineDestroyedAssistedWarMachine struct {
	WarMachineDestroyedEventID string `boiler:"war_machine_destroyed_event_id" boil:"war_machine_destroyed_event_id" json:"warMachineDestroyedEventID" toml:"warMachineDestroyedEventID" yaml:"warMachineDestroyedEventID"`
	WarMachineHash             string `boiler:"war_machine_hash" boil:"war_machine_hash" json:"warMachineHash" toml:"warMachineHash" yaml:"warMachineHash"`
	ID                         string `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`

	R *battleEventsWarMachineDestroyedAssistedWarMachineR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleEventsWarMachineDestroyedAssistedWarMachineL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleEventsWarMachineDestroyedAssistedWarMachineColumns = struct {
	WarMachineDestroyedEventID string
	WarMachineHash             string
	ID                         string
}{
	WarMachineDestroyedEventID: "war_machine_destroyed_event_id",
	WarMachineHash:             "war_machine_hash",
	ID:                         "id",
}

var BattleEventsWarMachineDestroyedAssistedWarMachineTableColumns = struct {
	WarMachineDestroyedEventID string
	WarMachineHash             string
	ID                         string
}{
	WarMachineDestroyedEventID: "battle_events_war_machine_destroyed_assisted_war_machines.war_machine_destroyed_event_id",
	WarMachineHash:             "battle_events_war_machine_destroyed_assisted_war_machines.war_machine_hash",
	ID:                         "battle_events_war_machine_destroyed_assisted_war_machines.id",
}

// Generated where

var BattleEventsWarMachineDestroyedAssistedWarMachineWhere = struct {
	WarMachineDestroyedEventID whereHelperstring
	WarMachineHash             whereHelperstring
	ID                         whereHelperstring
}{
	WarMachineDestroyedEventID: whereHelperstring{field: "\"battle_events_war_machine_destroyed_assisted_war_machines\".\"war_machine_destroyed_event_id\""},
	WarMachineHash:             whereHelperstring{field: "\"battle_events_war_machine_destroyed_assisted_war_machines\".\"war_machine_hash\""},
	ID:                         whereHelperstring{field: "\"battle_events_war_machine_destroyed_assisted_war_machines\".\"id\""},
}

// BattleEventsWarMachineDestroyedAssistedWarMachineRels is where relationship names are stored.
var BattleEventsWarMachineDestroyedAssistedWarMachineRels = struct {
	WarMachineDestroyedEvent string
}{
	WarMachineDestroyedEvent: "WarMachineDestroyedEvent",
}

// battleEventsWarMachineDestroyedAssistedWarMachineR is where relationships are stored.
type battleEventsWarMachineDestroyedAssistedWarMachineR struct {
	WarMachineDestroyedEvent *BattleEventsWarMachineDestroyed `boiler:"WarMachineDestroyedEvent" boil:"WarMachineDestroyedEvent" json:"WarMachineDestroyedEvent" toml:"WarMachineDestroyedEvent" yaml:"WarMachineDestroyedEvent"`
}

// NewStruct creates a new relationship struct
func (*battleEventsWarMachineDestroyedAssistedWarMachineR) NewStruct() *battleEventsWarMachineDestroyedAssistedWarMachineR {
	return &battleEventsWarMachineDestroyedAssistedWarMachineR{}
}

// battleEventsWarMachineDestroyedAssistedWarMachineL is where Load methods for each relationship are stored.
type battleEventsWarMachineDestroyedAssistedWarMachineL struct{}

var (
	battleEventsWarMachineDestroyedAssistedWarMachineAllColumns            = []string{"war_machine_destroyed_event_id", "war_machine_hash", "id"}
	battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithoutDefault = []string{"war_machine_destroyed_event_id", "war_machine_hash"}
	battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithDefault    = []string{"id"}
	battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns     = []string{"id"}
)

type (
	// BattleEventsWarMachineDestroyedAssistedWarMachineSlice is an alias for a slice of pointers to BattleEventsWarMachineDestroyedAssistedWarMachine.
	// This should almost always be used instead of []BattleEventsWarMachineDestroyedAssistedWarMachine.
	BattleEventsWarMachineDestroyedAssistedWarMachineSlice []*BattleEventsWarMachineDestroyedAssistedWarMachine
	// BattleEventsWarMachineDestroyedAssistedWarMachineHook is the signature for custom BattleEventsWarMachineDestroyedAssistedWarMachine hook methods
	BattleEventsWarMachineDestroyedAssistedWarMachineHook func(boil.Executor, *BattleEventsWarMachineDestroyedAssistedWarMachine) error

	battleEventsWarMachineDestroyedAssistedWarMachineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleEventsWarMachineDestroyedAssistedWarMachineType                 = reflect.TypeOf(&BattleEventsWarMachineDestroyedAssistedWarMachine{})
	battleEventsWarMachineDestroyedAssistedWarMachineMapping              = queries.MakeStructMapping(battleEventsWarMachineDestroyedAssistedWarMachineType)
	battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyMapping, _ = queries.BindMapping(battleEventsWarMachineDestroyedAssistedWarMachineType, battleEventsWarMachineDestroyedAssistedWarMachineMapping, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns)
	battleEventsWarMachineDestroyedAssistedWarMachineInsertCacheMut       sync.RWMutex
	battleEventsWarMachineDestroyedAssistedWarMachineInsertCache          = make(map[string]insertCache)
	battleEventsWarMachineDestroyedAssistedWarMachineUpdateCacheMut       sync.RWMutex
	battleEventsWarMachineDestroyedAssistedWarMachineUpdateCache          = make(map[string]updateCache)
	battleEventsWarMachineDestroyedAssistedWarMachineUpsertCacheMut       sync.RWMutex
	battleEventsWarMachineDestroyedAssistedWarMachineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleEventsWarMachineDestroyedAssistedWarMachineBeforeInsertHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpdateHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineBeforeDeleteHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpsertHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook

var battleEventsWarMachineDestroyedAssistedWarMachineAfterInsertHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineAfterUpdateHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineAfterDeleteHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook
var battleEventsWarMachineDestroyedAssistedWarMachineAfterUpsertHooks []BattleEventsWarMachineDestroyedAssistedWarMachineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleEventsWarMachineDestroyedAssistedWarMachineAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleEventsWarMachineDestroyedAssistedWarMachineHook registers your hook function for all future operations.
func AddBattleEventsWarMachineDestroyedAssistedWarMachineHook(hookPoint boil.HookPoint, battleEventsWarMachineDestroyedAssistedWarMachineHook BattleEventsWarMachineDestroyedAssistedWarMachineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battleEventsWarMachineDestroyedAssistedWarMachineBeforeInsertHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineBeforeInsertHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.BeforeUpdateHook:
		battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpdateHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpdateHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.BeforeDeleteHook:
		battleEventsWarMachineDestroyedAssistedWarMachineBeforeDeleteHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineBeforeDeleteHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.BeforeUpsertHook:
		battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpsertHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineBeforeUpsertHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.AfterInsertHook:
		battleEventsWarMachineDestroyedAssistedWarMachineAfterInsertHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineAfterInsertHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.AfterSelectHook:
		battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.AfterUpdateHook:
		battleEventsWarMachineDestroyedAssistedWarMachineAfterUpdateHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineAfterUpdateHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.AfterDeleteHook:
		battleEventsWarMachineDestroyedAssistedWarMachineAfterDeleteHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineAfterDeleteHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	case boil.AfterUpsertHook:
		battleEventsWarMachineDestroyedAssistedWarMachineAfterUpsertHooks = append(battleEventsWarMachineDestroyedAssistedWarMachineAfterUpsertHooks, battleEventsWarMachineDestroyedAssistedWarMachineHook)
	}
}

// One returns a single battleEventsWarMachineDestroyedAssistedWarMachine record from the query.
func (q battleEventsWarMachineDestroyedAssistedWarMachineQuery) One(exec boil.Executor) (*BattleEventsWarMachineDestroyedAssistedWarMachine, error) {
	o := &BattleEventsWarMachineDestroyedAssistedWarMachine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleEventsWarMachineDestroyedAssistedWarMachine records from the query.
func (q battleEventsWarMachineDestroyedAssistedWarMachineQuery) All(exec boil.Executor) (BattleEventsWarMachineDestroyedAssistedWarMachineSlice, error) {
	var o []*BattleEventsWarMachineDestroyedAssistedWarMachine

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleEventsWarMachineDestroyedAssistedWarMachine slice")
	}

	if len(battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleEventsWarMachineDestroyedAssistedWarMachine records in the query.
func (q battleEventsWarMachineDestroyedAssistedWarMachineQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_events_war_machine_destroyed_assisted_war_machines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleEventsWarMachineDestroyedAssistedWarMachineQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_events_war_machine_destroyed_assisted_war_machines exists")
	}

	return count > 0, nil
}

// WarMachineDestroyedEvent pointed to by the foreign key.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) WarMachineDestroyedEvent(mods ...qm.QueryMod) battleEventsWarMachineDestroyedQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WarMachineDestroyedEventID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleEventsWarMachineDestroyeds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events_war_machine_destroyed\"")

	return query
}

// LoadWarMachineDestroyedEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleEventsWarMachineDestroyedAssistedWarMachineL) LoadWarMachineDestroyedEvent(e boil.Executor, singular bool, maybeBattleEventsWarMachineDestroyedAssistedWarMachine interface{}, mods queries.Applicator) error {
	var slice []*BattleEventsWarMachineDestroyedAssistedWarMachine
	var object *BattleEventsWarMachineDestroyedAssistedWarMachine

	if singular {
		object = maybeBattleEventsWarMachineDestroyedAssistedWarMachine.(*BattleEventsWarMachineDestroyedAssistedWarMachine)
	} else {
		slice = *maybeBattleEventsWarMachineDestroyedAssistedWarMachine.(*[]*BattleEventsWarMachineDestroyedAssistedWarMachine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleEventsWarMachineDestroyedAssistedWarMachineR{}
		}
		args = append(args, object.WarMachineDestroyedEventID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleEventsWarMachineDestroyedAssistedWarMachineR{}
			}

			for _, a := range args {
				if a == obj.WarMachineDestroyedEventID {
					continue Outer
				}
			}

			args = append(args, obj.WarMachineDestroyedEventID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events_war_machine_destroyed`),
		qm.WhereIn(`battle_events_war_machine_destroyed.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleEventsWarMachineDestroyed")
	}

	var resultSlice []*BattleEventsWarMachineDestroyed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleEventsWarMachineDestroyed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_events_war_machine_destroyed")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events_war_machine_destroyed")
	}

	if len(battleEventsWarMachineDestroyedAssistedWarMachineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WarMachineDestroyedEvent = foreign
		if foreign.R == nil {
			foreign.R = &battleEventsWarMachineDestroyedR{}
		}
		foreign.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines = append(foreign.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WarMachineDestroyedEventID == foreign.ID {
				local.R.WarMachineDestroyedEvent = foreign
				if foreign.R == nil {
					foreign.R = &battleEventsWarMachineDestroyedR{}
				}
				foreign.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines = append(foreign.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines, local)
				break
			}
		}
	}

	return nil
}

// SetWarMachineDestroyedEvent of the battleEventsWarMachineDestroyedAssistedWarMachine to the related item.
// Sets o.R.WarMachineDestroyedEvent to related.
// Adds o to related.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) SetWarMachineDestroyedEvent(exec boil.Executor, insert bool, related *BattleEventsWarMachineDestroyed) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_events_war_machine_destroyed_assisted_war_machines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_destroyed_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WarMachineDestroyedEventID = related.ID
	if o.R == nil {
		o.R = &battleEventsWarMachineDestroyedAssistedWarMachineR{
			WarMachineDestroyedEvent: related,
		}
	} else {
		o.R.WarMachineDestroyedEvent = related
	}

	if related.R == nil {
		related.R = &battleEventsWarMachineDestroyedR{
			WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines: BattleEventsWarMachineDestroyedAssistedWarMachineSlice{o},
		}
	} else {
		related.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines = append(related.R.WarMachineDestroyedEventBattleEventsWarMachineDestroyedAssistedWarMachines, o)
	}

	return nil
}

// BattleEventsWarMachineDestroyedAssistedWarMachines retrieves all the records using an executor.
func BattleEventsWarMachineDestroyedAssistedWarMachines(mods ...qm.QueryMod) battleEventsWarMachineDestroyedAssistedWarMachineQuery {
	mods = append(mods, qm.From("\"battle_events_war_machine_destroyed_assisted_war_machines\""))
	return battleEventsWarMachineDestroyedAssistedWarMachineQuery{NewQuery(mods...)}
}

// FindBattleEventsWarMachineDestroyedAssistedWarMachine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleEventsWarMachineDestroyedAssistedWarMachine(exec boil.Executor, iD string, selectCols ...string) (*BattleEventsWarMachineDestroyedAssistedWarMachine, error) {
	battleEventsWarMachineDestroyedAssistedWarMachineObj := &BattleEventsWarMachineDestroyedAssistedWarMachine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_events_war_machine_destroyed_assisted_war_machines\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleEventsWarMachineDestroyedAssistedWarMachineObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if err = battleEventsWarMachineDestroyedAssistedWarMachineObj.doAfterSelectHooks(exec); err != nil {
		return battleEventsWarMachineDestroyedAssistedWarMachineObj, err
	}

	return battleEventsWarMachineDestroyedAssistedWarMachineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events_war_machine_destroyed_assisted_war_machines provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleEventsWarMachineDestroyedAssistedWarMachineInsertCacheMut.RLock()
	cache, cached := battleEventsWarMachineDestroyedAssistedWarMachineInsertCache[key]
	battleEventsWarMachineDestroyedAssistedWarMachineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleEventsWarMachineDestroyedAssistedWarMachineAllColumns,
			battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithDefault,
			battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedAssistedWarMachineType, battleEventsWarMachineDestroyedAssistedWarMachineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedAssistedWarMachineType, battleEventsWarMachineDestroyedAssistedWarMachineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_events_war_machine_destroyed_assisted_war_machines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_events_war_machine_destroyed_assisted_war_machines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if !cached {
		battleEventsWarMachineDestroyedAssistedWarMachineInsertCacheMut.Lock()
		battleEventsWarMachineDestroyedAssistedWarMachineInsertCache[key] = cache
		battleEventsWarMachineDestroyedAssistedWarMachineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleEventsWarMachineDestroyedAssistedWarMachine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleEventsWarMachineDestroyedAssistedWarMachineUpdateCacheMut.RLock()
	cache, cached := battleEventsWarMachineDestroyedAssistedWarMachineUpdateCache[key]
	battleEventsWarMachineDestroyedAssistedWarMachineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleEventsWarMachineDestroyedAssistedWarMachineAllColumns,
			battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_events_war_machine_destroyed_assisted_war_machines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_events_war_machine_destroyed_assisted_war_machines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedAssistedWarMachineType, battleEventsWarMachineDestroyedAssistedWarMachineMapping, append(wl, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_events_war_machine_destroyed_assisted_war_machines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if !cached {
		battleEventsWarMachineDestroyedAssistedWarMachineUpdateCacheMut.Lock()
		battleEventsWarMachineDestroyedAssistedWarMachineUpdateCache[key] = cache
		battleEventsWarMachineDestroyedAssistedWarMachineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleEventsWarMachineDestroyedAssistedWarMachineQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleEventsWarMachineDestroyedAssistedWarMachineSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_events_war_machine_destroyed_assisted_war_machines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleEventsWarMachineDestroyedAssistedWarMachine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleEventsWarMachineDestroyedAssistedWarMachine")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_events_war_machine_destroyed_assisted_war_machines provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleEventsWarMachineDestroyedAssistedWarMachineUpsertCacheMut.RLock()
	cache, cached := battleEventsWarMachineDestroyedAssistedWarMachineUpsertCache[key]
	battleEventsWarMachineDestroyedAssistedWarMachineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleEventsWarMachineDestroyedAssistedWarMachineAllColumns,
			battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithDefault,
			battleEventsWarMachineDestroyedAssistedWarMachineColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battleEventsWarMachineDestroyedAssistedWarMachineAllColumns,
			battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_events_war_machine_destroyed_assisted_war_machines, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns))
			copy(conflict, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_events_war_machine_destroyed_assisted_war_machines\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedAssistedWarMachineType, battleEventsWarMachineDestroyedAssistedWarMachineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleEventsWarMachineDestroyedAssistedWarMachineType, battleEventsWarMachineDestroyedAssistedWarMachineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if !cached {
		battleEventsWarMachineDestroyedAssistedWarMachineUpsertCacheMut.Lock()
		battleEventsWarMachineDestroyedAssistedWarMachineUpsertCache[key] = cache
		battleEventsWarMachineDestroyedAssistedWarMachineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleEventsWarMachineDestroyedAssistedWarMachine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleEventsWarMachineDestroyedAssistedWarMachine provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyMapping)
	sql := "DELETE FROM \"battle_events_war_machine_destroyed_assisted_war_machines\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_events_war_machine_destroyed_assisted_war_machines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleEventsWarMachineDestroyedAssistedWarMachineQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleEventsWarMachineDestroyedAssistedWarMachineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_events_war_machine_destroyed_assisted_war_machines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleEventsWarMachineDestroyedAssistedWarMachineSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleEventsWarMachineDestroyedAssistedWarMachineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_events_war_machine_destroyed_assisted_war_machines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleEventsWarMachineDestroyedAssistedWarMachine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_events_war_machine_destroyed_assisted_war_machines")
	}

	if len(battleEventsWarMachineDestroyedAssistedWarMachineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachine) Reload(exec boil.Executor) error {
	ret, err := FindBattleEventsWarMachineDestroyedAssistedWarMachine(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleEventsWarMachineDestroyedAssistedWarMachineSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleEventsWarMachineDestroyedAssistedWarMachineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_events_war_machine_destroyed_assisted_war_machines\".* FROM \"battle_events_war_machine_destroyed_assisted_war_machines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleEventsWarMachineDestroyedAssistedWarMachinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleEventsWarMachineDestroyedAssistedWarMachineSlice")
	}

	*o = slice

	return nil
}

// BattleEventsWarMachineDestroyedAssistedWarMachineExists checks if the BattleEventsWarMachineDestroyedAssistedWarMachine row exists.
func BattleEventsWarMachineDestroyedAssistedWarMachineExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_events_war_machine_destroyed_assisted_war_machines\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_events_war_machine_destroyed_assisted_war_machines exists")
	}

	return exists, nil
}
