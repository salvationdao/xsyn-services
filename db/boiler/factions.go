// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Faction is an object representing the database table.
type Faction struct {
	ID               string     `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label            string     `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Theme            types.JSON `boiler:"theme" boil:"theme" json:"theme" toml:"theme" yaml:"theme"`
	LogoBlobID       string     `boiler:"logo_blob_id" boil:"logo_blob_id" json:"logo_blob_id" toml:"logo_blob_id" yaml:"logo_blob_id"`
	BackgroundBlobID string     `boiler:"background_blob_id" boil:"background_blob_id" json:"background_blob_id" toml:"background_blob_id" yaml:"background_blob_id"`
	Description      string     `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`

	R *factionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L factionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactionColumns = struct {
	ID               string
	Label            string
	Theme            string
	LogoBlobID       string
	BackgroundBlobID string
	Description      string
}{
	ID:               "id",
	Label:            "label",
	Theme:            "theme",
	LogoBlobID:       "logo_blob_id",
	BackgroundBlobID: "background_blob_id",
	Description:      "description",
}

var FactionTableColumns = struct {
	ID               string
	Label            string
	Theme            string
	LogoBlobID       string
	BackgroundBlobID string
	Description      string
}{
	ID:               "factions.id",
	Label:            "factions.label",
	Theme:            "factions.theme",
	LogoBlobID:       "factions.logo_blob_id",
	BackgroundBlobID: "factions.background_blob_id",
	Description:      "factions.description",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FactionWhere = struct {
	ID               whereHelperstring
	Label            whereHelperstring
	Theme            whereHelpertypes_JSON
	LogoBlobID       whereHelperstring
	BackgroundBlobID whereHelperstring
	Description      whereHelperstring
}{
	ID:               whereHelperstring{field: "\"factions\".\"id\""},
	Label:            whereHelperstring{field: "\"factions\".\"label\""},
	Theme:            whereHelpertypes_JSON{field: "\"factions\".\"theme\""},
	LogoBlobID:       whereHelperstring{field: "\"factions\".\"logo_blob_id\""},
	BackgroundBlobID: whereHelperstring{field: "\"factions\".\"background_blob_id\""},
	Description:      whereHelperstring{field: "\"factions\".\"description\""},
}

// FactionRels is where relationship names are stored.
var FactionRels = struct {
	BackgroundBlob string
	LogoBlob       string
	StoreItems     string
	Users          string
	XsynStores     string
}{
	BackgroundBlob: "BackgroundBlob",
	LogoBlob:       "LogoBlob",
	StoreItems:     "StoreItems",
	Users:          "Users",
	XsynStores:     "XsynStores",
}

// factionR is where relationships are stored.
type factionR struct {
	BackgroundBlob *Blob          `boiler:"BackgroundBlob" boil:"BackgroundBlob" json:"BackgroundBlob" toml:"BackgroundBlob" yaml:"BackgroundBlob"`
	LogoBlob       *Blob          `boiler:"LogoBlob" boil:"LogoBlob" json:"LogoBlob" toml:"LogoBlob" yaml:"LogoBlob"`
	StoreItems     StoreItemSlice `boiler:"StoreItems" boil:"StoreItems" json:"StoreItems" toml:"StoreItems" yaml:"StoreItems"`
	Users          UserSlice      `boiler:"Users" boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
	XsynStores     XsynStoreSlice `boiler:"XsynStores" boil:"XsynStores" json:"XsynStores" toml:"XsynStores" yaml:"XsynStores"`
}

// NewStruct creates a new relationship struct
func (*factionR) NewStruct() *factionR {
	return &factionR{}
}

// factionL is where Load methods for each relationship are stored.
type factionL struct{}

var (
	factionAllColumns            = []string{"id", "label", "theme", "logo_blob_id", "background_blob_id", "description"}
	factionColumnsWithoutDefault = []string{"label", "logo_blob_id", "background_blob_id"}
	factionColumnsWithDefault    = []string{"id", "theme", "description"}
	factionPrimaryKeyColumns     = []string{"id"}
	factionGeneratedColumns      = []string{}
)

type (
	// FactionSlice is an alias for a slice of pointers to Faction.
	// This should almost always be used instead of []Faction.
	FactionSlice []*Faction
	// FactionHook is the signature for custom Faction hook methods
	FactionHook func(boil.Executor, *Faction) error

	factionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factionType                 = reflect.TypeOf(&Faction{})
	factionMapping              = queries.MakeStructMapping(factionType)
	factionPrimaryKeyMapping, _ = queries.BindMapping(factionType, factionMapping, factionPrimaryKeyColumns)
	factionInsertCacheMut       sync.RWMutex
	factionInsertCache          = make(map[string]insertCache)
	factionUpdateCacheMut       sync.RWMutex
	factionUpdateCache          = make(map[string]updateCache)
	factionUpsertCacheMut       sync.RWMutex
	factionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factionAfterSelectHooks []FactionHook

var factionBeforeInsertHooks []FactionHook
var factionAfterInsertHooks []FactionHook

var factionBeforeUpdateHooks []FactionHook
var factionAfterUpdateHooks []FactionHook

var factionBeforeDeleteHooks []FactionHook
var factionAfterDeleteHooks []FactionHook

var factionBeforeUpsertHooks []FactionHook
var factionAfterUpsertHooks []FactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Faction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Faction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Faction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Faction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Faction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Faction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Faction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Faction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Faction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactionHook registers your hook function for all future operations.
func AddFactionHook(hookPoint boil.HookPoint, factionHook FactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		factionAfterSelectHooks = append(factionAfterSelectHooks, factionHook)
	case boil.BeforeInsertHook:
		factionBeforeInsertHooks = append(factionBeforeInsertHooks, factionHook)
	case boil.AfterInsertHook:
		factionAfterInsertHooks = append(factionAfterInsertHooks, factionHook)
	case boil.BeforeUpdateHook:
		factionBeforeUpdateHooks = append(factionBeforeUpdateHooks, factionHook)
	case boil.AfterUpdateHook:
		factionAfterUpdateHooks = append(factionAfterUpdateHooks, factionHook)
	case boil.BeforeDeleteHook:
		factionBeforeDeleteHooks = append(factionBeforeDeleteHooks, factionHook)
	case boil.AfterDeleteHook:
		factionAfterDeleteHooks = append(factionAfterDeleteHooks, factionHook)
	case boil.BeforeUpsertHook:
		factionBeforeUpsertHooks = append(factionBeforeUpsertHooks, factionHook)
	case boil.AfterUpsertHook:
		factionAfterUpsertHooks = append(factionAfterUpsertHooks, factionHook)
	}
}

// One returns a single faction record from the query.
func (q factionQuery) One(exec boil.Executor) (*Faction, error) {
	o := &Faction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for factions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Faction records from the query.
func (q factionQuery) All(exec boil.Executor) (FactionSlice, error) {
	var o []*Faction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Faction slice")
	}

	if len(factionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Faction records in the query.
func (q factionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count factions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if factions exists")
	}

	return count > 0, nil
}

// BackgroundBlob pointed to by the foreign key.
func (o *Faction) BackgroundBlob(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BackgroundBlobID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// LogoBlob pointed to by the foreign key.
func (o *Faction) LogoBlob(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LogoBlobID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// StoreItems retrieves all the store_item's StoreItems with an executor.
func (o *Faction) StoreItems(mods ...qm.QueryMod) storeItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"store_items\".\"faction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"store_items\".\"deleted_at\""),
	)

	query := StoreItems(queryMods...)
	queries.SetFrom(query.Query, "\"store_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"store_items\".*"})
	}

	return query
}

// Users retrieves all the user's Users with an executor.
func (o *Faction) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"faction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"users\".\"deleted_at\""),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// XsynStores retrieves all the xsyn_store's XsynStores with an executor.
func (o *Faction) XsynStores(mods ...qm.QueryMod) xsynStoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"xsyn_store\".\"faction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"xsyn_store\".\"deleted_at\""),
	)

	query := XsynStores(queryMods...)
	queries.SetFrom(query.Query, "\"xsyn_store\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"xsyn_store\".*"})
	}

	return query
}

// LoadBackgroundBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factionL) LoadBackgroundBlob(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.BackgroundBlobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if a == obj.BackgroundBlobID {
					continue Outer
				}
			}

			args = append(args, obj.BackgroundBlobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
		qmhelper.WhereIsNull(`blobs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(factionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BackgroundBlob = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.BackgroundBlobFactions = append(foreign.R.BackgroundBlobFactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BackgroundBlobID == foreign.ID {
				local.R.BackgroundBlob = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.BackgroundBlobFactions = append(foreign.R.BackgroundBlobFactions, local)
				break
			}
		}
	}

	return nil
}

// LoadLogoBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factionL) LoadLogoBlob(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.LogoBlobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if a == obj.LogoBlobID {
					continue Outer
				}
			}

			args = append(args, obj.LogoBlobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
		qmhelper.WhereIsNull(`blobs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(factionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LogoBlob = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.LogoBlobFactions = append(foreign.R.LogoBlobFactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LogoBlobID == foreign.ID {
				local.R.LogoBlob = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.LogoBlobFactions = append(foreign.R.LogoBlobFactions, local)
				break
			}
		}
	}

	return nil
}

// LoadStoreItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factionL) LoadStoreItems(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`store_items`),
		qm.WhereIn(`store_items.faction_id in ?`, args...),
		qmhelper.WhereIsNull(`store_items.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_items")
	}

	var resultSlice []*StoreItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_items")
	}

	if len(storeItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StoreItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeItemR{}
			}
			foreign.R.Faction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FactionID {
				local.R.StoreItems = append(local.R.StoreItems, foreign)
				if foreign.R == nil {
					foreign.R = &storeItemR{}
				}
				foreign.R.Faction = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factionL) LoadUsers(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.faction_id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Faction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FactionID) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Faction = local
				break
			}
		}
	}

	return nil
}

// LoadXsynStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factionL) LoadXsynStores(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`xsyn_store`),
		qm.WhereIn(`xsyn_store.faction_id in ?`, args...),
		qmhelper.WhereIsNull(`xsyn_store.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load xsyn_store")
	}

	var resultSlice []*XsynStore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice xsyn_store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on xsyn_store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for xsyn_store")
	}

	if len(xsynStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XsynStores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &xsynStoreR{}
			}
			foreign.R.Faction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FactionID) {
				local.R.XsynStores = append(local.R.XsynStores, foreign)
				if foreign.R == nil {
					foreign.R = &xsynStoreR{}
				}
				foreign.R.Faction = local
				break
			}
		}
	}

	return nil
}

// SetBackgroundBlob of the faction to the related item.
// Sets o.R.BackgroundBlob to related.
// Adds o to related.R.BackgroundBlobFactions.
func (o *Faction) SetBackgroundBlob(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"background_blob_id"}),
		strmangle.WhereClause("\"", "\"", 2, factionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BackgroundBlobID = related.ID
	if o.R == nil {
		o.R = &factionR{
			BackgroundBlob: related,
		}
	} else {
		o.R.BackgroundBlob = related
	}

	if related.R == nil {
		related.R = &blobR{
			BackgroundBlobFactions: FactionSlice{o},
		}
	} else {
		related.R.BackgroundBlobFactions = append(related.R.BackgroundBlobFactions, o)
	}

	return nil
}

// SetLogoBlob of the faction to the related item.
// Sets o.R.LogoBlob to related.
// Adds o to related.R.LogoBlobFactions.
func (o *Faction) SetLogoBlob(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"logo_blob_id"}),
		strmangle.WhereClause("\"", "\"", 2, factionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LogoBlobID = related.ID
	if o.R == nil {
		o.R = &factionR{
			LogoBlob: related,
		}
	} else {
		o.R.LogoBlob = related
	}

	if related.R == nil {
		related.R = &blobR{
			LogoBlobFactions: FactionSlice{o},
		}
	} else {
		related.R.LogoBlobFactions = append(related.R.LogoBlobFactions, o)
	}

	return nil
}

// AddStoreItems adds the given related objects to the existing relationships
// of the faction, optionally inserting them as new records.
// Appends related to o.R.StoreItems.
// Sets related.R.Faction appropriately.
func (o *Faction) AddStoreItems(exec boil.Executor, insert bool, related ...*StoreItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FactionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"store_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
				strmangle.WhereClause("\"", "\"", 2, storeItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &factionR{
			StoreItems: related,
		}
	} else {
		o.R.StoreItems = append(o.R.StoreItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeItemR{
				Faction: o,
			}
		} else {
			rel.R.Faction = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the faction, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Faction appropriately.
func (o *Faction) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &factionR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Faction: o,
			}
		} else {
			rel.R.Faction = o
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// faction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Faction's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Faction's Users accordingly.
func (o *Faction) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "update \"users\" set \"faction_id\" = null where \"faction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.FactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Faction = nil
		}

		o.R.Users = nil
	}
	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Faction.
func (o *Faction) RemoveUsers(exec boil.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FactionID, nil)
		if rel.R != nil {
			rel.R.Faction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("faction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// AddXsynStores adds the given related objects to the existing relationships
// of the faction, optionally inserting them as new records.
// Appends related to o.R.XsynStores.
// Sets related.R.Faction appropriately.
func (o *Faction) AddXsynStores(exec boil.Executor, insert bool, related ...*XsynStore) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"xsyn_store\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
				strmangle.WhereClause("\"", "\"", 2, xsynStorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &factionR{
			XsynStores: related,
		}
	} else {
		o.R.XsynStores = append(o.R.XsynStores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &xsynStoreR{
				Faction: o,
			}
		} else {
			rel.R.Faction = o
		}
	}
	return nil
}

// SetXsynStores removes all previously related items of the
// faction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Faction's XsynStores accordingly.
// Replaces o.R.XsynStores with related.
// Sets related.R.Faction's XsynStores accordingly.
func (o *Faction) SetXsynStores(exec boil.Executor, insert bool, related ...*XsynStore) error {
	query := "update \"xsyn_store\" set \"faction_id\" = null where \"faction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.XsynStores {
			queries.SetScanner(&rel.FactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Faction = nil
		}

		o.R.XsynStores = nil
	}
	return o.AddXsynStores(exec, insert, related...)
}

// RemoveXsynStores relationships from objects passed in.
// Removes related items from R.XsynStores (uses pointer comparison, removal does not keep order)
// Sets related.R.Faction.
func (o *Faction) RemoveXsynStores(exec boil.Executor, related ...*XsynStore) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FactionID, nil)
		if rel.R != nil {
			rel.R.Faction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("faction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.XsynStores {
			if rel != ri {
				continue
			}

			ln := len(o.R.XsynStores)
			if ln > 1 && i < ln-1 {
				o.R.XsynStores[i] = o.R.XsynStores[ln-1]
			}
			o.R.XsynStores = o.R.XsynStores[:ln-1]
			break
		}
	}

	return nil
}

// Factions retrieves all the records using an executor.
func Factions(mods ...qm.QueryMod) factionQuery {
	mods = append(mods, qm.From("\"factions\""))
	return factionQuery{NewQuery(mods...)}
}

// FindFaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFaction(exec boil.Executor, iD string, selectCols ...string) (*Faction, error) {
	factionObj := &Faction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"factions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, factionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from factions")
	}

	if err = factionObj.doAfterSelectHooks(exec); err != nil {
		return factionObj, err
	}

	return factionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Faction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no factions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factionInsertCacheMut.RLock()
	cache, cached := factionInsertCache[key]
	factionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factionAllColumns,
			factionColumnsWithDefault,
			factionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factionType, factionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"factions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"factions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into factions")
	}

	if !cached {
		factionInsertCacheMut.Lock()
		factionInsertCache[key] = cache
		factionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Faction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Faction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factionUpdateCacheMut.RLock()
	cache, cached := factionUpdateCache[key]
	factionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factionAllColumns,
			factionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update factions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"factions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, append(wl, factionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update factions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for factions")
	}

	if !cached {
		factionUpdateCacheMut.Lock()
		factionUpdateCache[key] = cache
		factionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for factions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"factions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in faction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all faction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Faction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no factions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factionUpsertCacheMut.RLock()
	cache, cached := factionUpsertCache[key]
	factionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factionAllColumns,
			factionColumnsWithDefault,
			factionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			factionAllColumns,
			factionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert factions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factionPrimaryKeyColumns))
			copy(conflict, factionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"factions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factionType, factionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert factions")
	}

	if !cached {
		factionUpsertCacheMut.Lock()
		factionUpsertCache[key] = cache
		factionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Faction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Faction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Faction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factionPrimaryKeyMapping)
	sql := "DELETE FROM \"factions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for factions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no factionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for factions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"factions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from faction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for factions")
	}

	if len(factionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Faction) Reload(exec boil.Executor) error {
	ret, err := FindFaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"factions\".* FROM \"factions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FactionSlice")
	}

	*o = slice

	return nil
}

// FactionExists checks if the Faction row exists.
func FactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"factions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if factions exists")
	}

	return exists, nil
}
