// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChainConfirmation is an object representing the database table.
type ChainConfirmation struct {
	TX                 string          `boiler:"tx" boil:"tx" json:"tx" toml:"tx" yaml:"tx"`
	TXID               null.String     `boiler:"tx_id" boil:"tx_id" json:"txID,omitempty" toml:"txID" yaml:"txID,omitempty"`
	Block              decimal.Decimal `boiler:"block" boil:"block" json:"block" toml:"block" yaml:"block"`
	ChainID            decimal.Decimal `boiler:"chain_id" boil:"chain_id" json:"chainID" toml:"chainID" yaml:"chainID"`
	ConfirmedAt        null.Time       `boiler:"confirmed_at" boil:"confirmed_at" json:"confirmedAt,omitempty" toml:"confirmedAt" yaml:"confirmedAt,omitempty"`
	DeletedAt          null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	CreatedAt          time.Time       `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	ConfirmationAmount int             `boiler:"confirmation_amount" boil:"confirmation_amount" json:"confirmationAmount" toml:"confirmationAmount" yaml:"confirmationAmount"`

	R *chainConfirmationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L chainConfirmationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChainConfirmationColumns = struct {
	TX                 string
	TXID               string
	Block              string
	ChainID            string
	ConfirmedAt        string
	DeletedAt          string
	CreatedAt          string
	ConfirmationAmount string
}{
	TX:                 "tx",
	TXID:               "tx_id",
	Block:              "block",
	ChainID:            "chain_id",
	ConfirmedAt:        "confirmed_at",
	DeletedAt:          "deleted_at",
	CreatedAt:          "created_at",
	ConfirmationAmount: "confirmation_amount",
}

var ChainConfirmationTableColumns = struct {
	TX                 string
	TXID               string
	Block              string
	ChainID            string
	ConfirmedAt        string
	DeletedAt          string
	CreatedAt          string
	ConfirmationAmount string
}{
	TX:                 "chain_confirmations.tx",
	TXID:               "chain_confirmations.tx_id",
	Block:              "chain_confirmations.block",
	ChainID:            "chain_confirmations.chain_id",
	ConfirmedAt:        "chain_confirmations.confirmed_at",
	DeletedAt:          "chain_confirmations.deleted_at",
	CreatedAt:          "chain_confirmations.created_at",
	ConfirmationAmount: "chain_confirmations.confirmation_amount",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChainConfirmationWhere = struct {
	TX                 whereHelperstring
	TXID               whereHelpernull_String
	Block              whereHelperdecimal_Decimal
	ChainID            whereHelperdecimal_Decimal
	ConfirmedAt        whereHelpernull_Time
	DeletedAt          whereHelpernull_Time
	CreatedAt          whereHelpertime_Time
	ConfirmationAmount whereHelperint
}{
	TX:                 whereHelperstring{field: "\"chain_confirmations\".\"tx\""},
	TXID:               whereHelpernull_String{field: "\"chain_confirmations\".\"tx_id\""},
	Block:              whereHelperdecimal_Decimal{field: "\"chain_confirmations\".\"block\""},
	ChainID:            whereHelperdecimal_Decimal{field: "\"chain_confirmations\".\"chain_id\""},
	ConfirmedAt:        whereHelpernull_Time{field: "\"chain_confirmations\".\"confirmed_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"chain_confirmations\".\"deleted_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"chain_confirmations\".\"created_at\""},
	ConfirmationAmount: whereHelperint{field: "\"chain_confirmations\".\"confirmation_amount\""},
}

// ChainConfirmationRels is where relationship names are stored.
var ChainConfirmationRels = struct {
}{}

// chainConfirmationR is where relationships are stored.
type chainConfirmationR struct {
}

// NewStruct creates a new relationship struct
func (*chainConfirmationR) NewStruct() *chainConfirmationR {
	return &chainConfirmationR{}
}

// chainConfirmationL is where Load methods for each relationship are stored.
type chainConfirmationL struct{}

var (
	chainConfirmationAllColumns            = []string{"tx", "tx_id", "block", "chain_id", "confirmed_at", "deleted_at", "created_at", "confirmation_amount"}
	chainConfirmationColumnsWithoutDefault = []string{"tx", "tx_id", "block", "chain_id", "confirmed_at", "deleted_at"}
	chainConfirmationColumnsWithDefault    = []string{"created_at", "confirmation_amount"}
	chainConfirmationPrimaryKeyColumns     = []string{"tx"}
)

type (
	// ChainConfirmationSlice is an alias for a slice of pointers to ChainConfirmation.
	// This should almost always be used instead of []ChainConfirmation.
	ChainConfirmationSlice []*ChainConfirmation
	// ChainConfirmationHook is the signature for custom ChainConfirmation hook methods
	ChainConfirmationHook func(boil.Executor, *ChainConfirmation) error

	chainConfirmationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chainConfirmationType                 = reflect.TypeOf(&ChainConfirmation{})
	chainConfirmationMapping              = queries.MakeStructMapping(chainConfirmationType)
	chainConfirmationPrimaryKeyMapping, _ = queries.BindMapping(chainConfirmationType, chainConfirmationMapping, chainConfirmationPrimaryKeyColumns)
	chainConfirmationInsertCacheMut       sync.RWMutex
	chainConfirmationInsertCache          = make(map[string]insertCache)
	chainConfirmationUpdateCacheMut       sync.RWMutex
	chainConfirmationUpdateCache          = make(map[string]updateCache)
	chainConfirmationUpsertCacheMut       sync.RWMutex
	chainConfirmationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chainConfirmationBeforeInsertHooks []ChainConfirmationHook
var chainConfirmationBeforeUpdateHooks []ChainConfirmationHook
var chainConfirmationBeforeDeleteHooks []ChainConfirmationHook
var chainConfirmationBeforeUpsertHooks []ChainConfirmationHook

var chainConfirmationAfterInsertHooks []ChainConfirmationHook
var chainConfirmationAfterSelectHooks []ChainConfirmationHook
var chainConfirmationAfterUpdateHooks []ChainConfirmationHook
var chainConfirmationAfterDeleteHooks []ChainConfirmationHook
var chainConfirmationAfterUpsertHooks []ChainConfirmationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChainConfirmation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChainConfirmation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChainConfirmation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChainConfirmation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChainConfirmation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChainConfirmation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChainConfirmation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChainConfirmation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChainConfirmation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chainConfirmationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChainConfirmationHook registers your hook function for all future operations.
func AddChainConfirmationHook(hookPoint boil.HookPoint, chainConfirmationHook ChainConfirmationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chainConfirmationBeforeInsertHooks = append(chainConfirmationBeforeInsertHooks, chainConfirmationHook)
	case boil.BeforeUpdateHook:
		chainConfirmationBeforeUpdateHooks = append(chainConfirmationBeforeUpdateHooks, chainConfirmationHook)
	case boil.BeforeDeleteHook:
		chainConfirmationBeforeDeleteHooks = append(chainConfirmationBeforeDeleteHooks, chainConfirmationHook)
	case boil.BeforeUpsertHook:
		chainConfirmationBeforeUpsertHooks = append(chainConfirmationBeforeUpsertHooks, chainConfirmationHook)
	case boil.AfterInsertHook:
		chainConfirmationAfterInsertHooks = append(chainConfirmationAfterInsertHooks, chainConfirmationHook)
	case boil.AfterSelectHook:
		chainConfirmationAfterSelectHooks = append(chainConfirmationAfterSelectHooks, chainConfirmationHook)
	case boil.AfterUpdateHook:
		chainConfirmationAfterUpdateHooks = append(chainConfirmationAfterUpdateHooks, chainConfirmationHook)
	case boil.AfterDeleteHook:
		chainConfirmationAfterDeleteHooks = append(chainConfirmationAfterDeleteHooks, chainConfirmationHook)
	case boil.AfterUpsertHook:
		chainConfirmationAfterUpsertHooks = append(chainConfirmationAfterUpsertHooks, chainConfirmationHook)
	}
}

// One returns a single chainConfirmation record from the query.
func (q chainConfirmationQuery) One(exec boil.Executor) (*ChainConfirmation, error) {
	o := &ChainConfirmation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for chain_confirmations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChainConfirmation records from the query.
func (q chainConfirmationQuery) All(exec boil.Executor) (ChainConfirmationSlice, error) {
	var o []*ChainConfirmation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ChainConfirmation slice")
	}

	if len(chainConfirmationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChainConfirmation records in the query.
func (q chainConfirmationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count chain_confirmations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chainConfirmationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if chain_confirmations exists")
	}

	return count > 0, nil
}

// ChainConfirmations retrieves all the records using an executor.
func ChainConfirmations(mods ...qm.QueryMod) chainConfirmationQuery {
	mods = append(mods, qm.From("\"chain_confirmations\""), qmhelper.WhereIsNull("\"chain_confirmations\".\"deleted_at\""))
	return chainConfirmationQuery{NewQuery(mods...)}
}

// FindChainConfirmation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChainConfirmation(exec boil.Executor, tX string, selectCols ...string) (*ChainConfirmation, error) {
	chainConfirmationObj := &ChainConfirmation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chain_confirmations\" where \"tx\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, tX)

	err := q.Bind(nil, exec, chainConfirmationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from chain_confirmations")
	}

	if err = chainConfirmationObj.doAfterSelectHooks(exec); err != nil {
		return chainConfirmationObj, err
	}

	return chainConfirmationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChainConfirmation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chain_confirmations provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chainConfirmationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chainConfirmationInsertCacheMut.RLock()
	cache, cached := chainConfirmationInsertCache[key]
	chainConfirmationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chainConfirmationAllColumns,
			chainConfirmationColumnsWithDefault,
			chainConfirmationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chainConfirmationType, chainConfirmationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chainConfirmationType, chainConfirmationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chain_confirmations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chain_confirmations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into chain_confirmations")
	}

	if !cached {
		chainConfirmationInsertCacheMut.Lock()
		chainConfirmationInsertCache[key] = cache
		chainConfirmationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ChainConfirmation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChainConfirmation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chainConfirmationUpdateCacheMut.RLock()
	cache, cached := chainConfirmationUpdateCache[key]
	chainConfirmationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chainConfirmationAllColumns,
			chainConfirmationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update chain_confirmations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chain_confirmations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chainConfirmationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chainConfirmationType, chainConfirmationMapping, append(wl, chainConfirmationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update chain_confirmations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for chain_confirmations")
	}

	if !cached {
		chainConfirmationUpdateCacheMut.Lock()
		chainConfirmationUpdateCache[key] = cache
		chainConfirmationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chainConfirmationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for chain_confirmations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for chain_confirmations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChainConfirmationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainConfirmationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chain_confirmations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chainConfirmationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in chainConfirmation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all chainConfirmation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChainConfirmation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chain_confirmations provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chainConfirmationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chainConfirmationUpsertCacheMut.RLock()
	cache, cached := chainConfirmationUpsertCache[key]
	chainConfirmationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chainConfirmationAllColumns,
			chainConfirmationColumnsWithDefault,
			chainConfirmationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chainConfirmationAllColumns,
			chainConfirmationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert chain_confirmations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chainConfirmationPrimaryKeyColumns))
			copy(conflict, chainConfirmationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chain_confirmations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chainConfirmationType, chainConfirmationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chainConfirmationType, chainConfirmationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert chain_confirmations")
	}

	if !cached {
		chainConfirmationUpsertCacheMut.Lock()
		chainConfirmationUpsertCache[key] = cache
		chainConfirmationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ChainConfirmation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChainConfirmation) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ChainConfirmation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chainConfirmationPrimaryKeyMapping)
		sql = "DELETE FROM \"chain_confirmations\" WHERE \"tx\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"chain_confirmations\" SET %s WHERE \"tx\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(chainConfirmationType, chainConfirmationMapping, append(wl, chainConfirmationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from chain_confirmations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for chain_confirmations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chainConfirmationQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no chainConfirmationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chain_confirmations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chain_confirmations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChainConfirmationSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chainConfirmationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainConfirmationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"chain_confirmations\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chainConfirmationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainConfirmationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"chain_confirmations\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, chainConfirmationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chainConfirmation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chain_confirmations")
	}

	if len(chainConfirmationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChainConfirmation) Reload(exec boil.Executor) error {
	ret, err := FindChainConfirmation(exec, o.TX)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChainConfirmationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChainConfirmationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainConfirmationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chain_confirmations\".* FROM \"chain_confirmations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chainConfirmationPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ChainConfirmationSlice")
	}

	*o = slice

	return nil
}

// ChainConfirmationExists checks if the ChainConfirmation row exists.
func ChainConfirmationExists(exec boil.Executor, tX string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chain_confirmations\" where \"tx\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tX)
	}
	row := exec.QueryRow(sql, tX)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if chain_confirmations exists")
	}

	return exists, nil
}
