// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionsMaster is an object representing the database table.
type TransactionsMaster struct {
	ID                   string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Description          string          `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	TransactionReference string          `boiler:"transaction_reference" boil:"transaction_reference" json:"transaction_reference" toml:"transaction_reference" yaml:"transaction_reference"`
	Amount               decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Credit               string          `boiler:"credit" boil:"credit" json:"credit" toml:"credit" yaml:"credit"`
	Debit                string          `boiler:"debit" boil:"debit" json:"debit" toml:"debit" yaml:"debit"`
	Reason               null.String     `boiler:"reason" boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	CreatedAt            time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Group                string          `boiler:"group" boil:"group" json:"group" toml:"group" yaml:"group"`
	SubGroup             null.String     `boiler:"sub_group" boil:"sub_group" json:"sub_group,omitempty" toml:"sub_group" yaml:"sub_group,omitempty"`
	RelatedTransactionID null.String     `boiler:"related_transaction_id" boil:"related_transaction_id" json:"related_transaction_id,omitempty" toml:"related_transaction_id" yaml:"related_transaction_id,omitempty"`
	ServiceID            null.String     `boiler:"service_id" boil:"service_id" json:"service_id,omitempty" toml:"service_id" yaml:"service_id,omitempty"`

	R *transactionsMasterR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionsMasterL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionsMasterColumns = struct {
	ID                   string
	Description          string
	TransactionReference string
	Amount               string
	Credit               string
	Debit                string
	Reason               string
	CreatedAt            string
	Group                string
	SubGroup             string
	RelatedTransactionID string
	ServiceID            string
}{
	ID:                   "id",
	Description:          "description",
	TransactionReference: "transaction_reference",
	Amount:               "amount",
	Credit:               "credit",
	Debit:                "debit",
	Reason:               "reason",
	CreatedAt:            "created_at",
	Group:                "group",
	SubGroup:             "sub_group",
	RelatedTransactionID: "related_transaction_id",
	ServiceID:            "service_id",
}

var TransactionsMasterTableColumns = struct {
	ID                   string
	Description          string
	TransactionReference string
	Amount               string
	Credit               string
	Debit                string
	Reason               string
	CreatedAt            string
	Group                string
	SubGroup             string
	RelatedTransactionID string
	ServiceID            string
}{
	ID:                   "transactions_master.id",
	Description:          "transactions_master.description",
	TransactionReference: "transactions_master.transaction_reference",
	Amount:               "transactions_master.amount",
	Credit:               "transactions_master.credit",
	Debit:                "transactions_master.debit",
	Reason:               "transactions_master.reason",
	CreatedAt:            "transactions_master.created_at",
	Group:                "transactions_master.group",
	SubGroup:             "transactions_master.sub_group",
	RelatedTransactionID: "transactions_master.related_transaction_id",
	ServiceID:            "transactions_master.service_id",
}

// Generated where

var TransactionsMasterWhere = struct {
	ID                   whereHelperstring
	Description          whereHelperstring
	TransactionReference whereHelperstring
	Amount               whereHelperdecimal_Decimal
	Credit               whereHelperstring
	Debit                whereHelperstring
	Reason               whereHelpernull_String
	CreatedAt            whereHelpertime_Time
	Group                whereHelperstring
	SubGroup             whereHelpernull_String
	RelatedTransactionID whereHelpernull_String
	ServiceID            whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"transactions_master\".\"id\""},
	Description:          whereHelperstring{field: "\"transactions_master\".\"description\""},
	TransactionReference: whereHelperstring{field: "\"transactions_master\".\"transaction_reference\""},
	Amount:               whereHelperdecimal_Decimal{field: "\"transactions_master\".\"amount\""},
	Credit:               whereHelperstring{field: "\"transactions_master\".\"credit\""},
	Debit:                whereHelperstring{field: "\"transactions_master\".\"debit\""},
	Reason:               whereHelpernull_String{field: "\"transactions_master\".\"reason\""},
	CreatedAt:            whereHelpertime_Time{field: "\"transactions_master\".\"created_at\""},
	Group:                whereHelperstring{field: "\"transactions_master\".\"group\""},
	SubGroup:             whereHelpernull_String{field: "\"transactions_master\".\"sub_group\""},
	RelatedTransactionID: whereHelpernull_String{field: "\"transactions_master\".\"related_transaction_id\""},
	ServiceID:            whereHelpernull_String{field: "\"transactions_master\".\"service_id\""},
}

// TransactionsMasterRels is where relationship names are stored.
var TransactionsMasterRels = struct {
}{}

// transactionsMasterR is where relationships are stored.
type transactionsMasterR struct {
}

// NewStruct creates a new relationship struct
func (*transactionsMasterR) NewStruct() *transactionsMasterR {
	return &transactionsMasterR{}
}

// transactionsMasterL is where Load methods for each relationship are stored.
type transactionsMasterL struct{}

var (
	transactionsMasterAllColumns            = []string{"id", "description", "transaction_reference", "amount", "credit", "debit", "reason", "created_at", "group", "sub_group", "related_transaction_id", "service_id"}
	transactionsMasterColumnsWithoutDefault = []string{"id", "amount", "credit", "debit"}
	transactionsMasterColumnsWithDefault    = []string{"description", "transaction_reference", "reason", "created_at", "group", "sub_group", "related_transaction_id", "service_id"}
	transactionsMasterPrimaryKeyColumns     = []string{"id", "created_at"}
	transactionsMasterGeneratedColumns      = []string{}
)

type (
	// TransactionsMasterSlice is an alias for a slice of pointers to TransactionsMaster.
	// This should almost always be used instead of []TransactionsMaster.
	TransactionsMasterSlice []*TransactionsMaster
	// TransactionsMasterHook is the signature for custom TransactionsMaster hook methods
	TransactionsMasterHook func(boil.Executor, *TransactionsMaster) error

	transactionsMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionsMasterType                 = reflect.TypeOf(&TransactionsMaster{})
	transactionsMasterMapping              = queries.MakeStructMapping(transactionsMasterType)
	transactionsMasterPrimaryKeyMapping, _ = queries.BindMapping(transactionsMasterType, transactionsMasterMapping, transactionsMasterPrimaryKeyColumns)
	transactionsMasterInsertCacheMut       sync.RWMutex
	transactionsMasterInsertCache          = make(map[string]insertCache)
	transactionsMasterUpdateCacheMut       sync.RWMutex
	transactionsMasterUpdateCache          = make(map[string]updateCache)
	transactionsMasterUpsertCacheMut       sync.RWMutex
	transactionsMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactionsMasterAfterSelectHooks []TransactionsMasterHook

var transactionsMasterBeforeInsertHooks []TransactionsMasterHook
var transactionsMasterAfterInsertHooks []TransactionsMasterHook

var transactionsMasterBeforeUpdateHooks []TransactionsMasterHook
var transactionsMasterAfterUpdateHooks []TransactionsMasterHook

var transactionsMasterBeforeDeleteHooks []TransactionsMasterHook
var transactionsMasterAfterDeleteHooks []TransactionsMasterHook

var transactionsMasterBeforeUpsertHooks []TransactionsMasterHook
var transactionsMasterAfterUpsertHooks []TransactionsMasterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactionsMaster) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactionsMaster) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactionsMaster) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactionsMaster) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactionsMaster) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactionsMaster) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactionsMaster) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactionsMaster) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactionsMaster) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsMasterAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionsMasterHook registers your hook function for all future operations.
func AddTransactionsMasterHook(hookPoint boil.HookPoint, transactionsMasterHook TransactionsMasterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transactionsMasterAfterSelectHooks = append(transactionsMasterAfterSelectHooks, transactionsMasterHook)
	case boil.BeforeInsertHook:
		transactionsMasterBeforeInsertHooks = append(transactionsMasterBeforeInsertHooks, transactionsMasterHook)
	case boil.AfterInsertHook:
		transactionsMasterAfterInsertHooks = append(transactionsMasterAfterInsertHooks, transactionsMasterHook)
	case boil.BeforeUpdateHook:
		transactionsMasterBeforeUpdateHooks = append(transactionsMasterBeforeUpdateHooks, transactionsMasterHook)
	case boil.AfterUpdateHook:
		transactionsMasterAfterUpdateHooks = append(transactionsMasterAfterUpdateHooks, transactionsMasterHook)
	case boil.BeforeDeleteHook:
		transactionsMasterBeforeDeleteHooks = append(transactionsMasterBeforeDeleteHooks, transactionsMasterHook)
	case boil.AfterDeleteHook:
		transactionsMasterAfterDeleteHooks = append(transactionsMasterAfterDeleteHooks, transactionsMasterHook)
	case boil.BeforeUpsertHook:
		transactionsMasterBeforeUpsertHooks = append(transactionsMasterBeforeUpsertHooks, transactionsMasterHook)
	case boil.AfterUpsertHook:
		transactionsMasterAfterUpsertHooks = append(transactionsMasterAfterUpsertHooks, transactionsMasterHook)
	}
}

// One returns a single transactionsMaster record from the query.
func (q transactionsMasterQuery) One(exec boil.Executor) (*TransactionsMaster, error) {
	o := &TransactionsMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for transactions_master")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TransactionsMaster records from the query.
func (q transactionsMasterQuery) All(exec boil.Executor) (TransactionsMasterSlice, error) {
	var o []*TransactionsMaster

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TransactionsMaster slice")
	}

	if len(transactionsMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TransactionsMaster records in the query.
func (q transactionsMasterQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count transactions_master rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionsMasterQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if transactions_master exists")
	}

	return count > 0, nil
}

// TransactionsMasters retrieves all the records using an executor.
func TransactionsMasters(mods ...qm.QueryMod) transactionsMasterQuery {
	mods = append(mods, qm.From("\"transactions_master\""))
	return transactionsMasterQuery{NewQuery(mods...)}
}

// FindTransactionsMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionsMaster(exec boil.Executor, iD string, createdAt time.Time, selectCols ...string) (*TransactionsMaster, error) {
	transactionsMasterObj := &TransactionsMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transactions_master\" where \"id\"=$1 AND \"created_at\"=$2", sel,
	)

	q := queries.Raw(query, iD, createdAt)

	err := q.Bind(nil, exec, transactionsMasterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from transactions_master")
	}

	if err = transactionsMasterObj.doAfterSelectHooks(exec); err != nil {
		return transactionsMasterObj, err
	}

	return transactionsMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionsMaster) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no transactions_master provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionsMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionsMasterInsertCacheMut.RLock()
	cache, cached := transactionsMasterInsertCache[key]
	transactionsMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionsMasterAllColumns,
			transactionsMasterColumnsWithDefault,
			transactionsMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionsMasterType, transactionsMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionsMasterType, transactionsMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transactions_master\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transactions_master\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into transactions_master")
	}

	if !cached {
		transactionsMasterInsertCacheMut.Lock()
		transactionsMasterInsertCache[key] = cache
		transactionsMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TransactionsMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionsMaster) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionsMasterUpdateCacheMut.RLock()
	cache, cached := transactionsMasterUpdateCache[key]
	transactionsMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionsMasterAllColumns,
			transactionsMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update transactions_master, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transactions_master\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionsMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionsMasterType, transactionsMasterMapping, append(wl, transactionsMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update transactions_master row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for transactions_master")
	}

	if !cached {
		transactionsMasterUpdateCacheMut.Lock()
		transactionsMasterUpdateCache[key] = cache
		transactionsMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionsMasterQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for transactions_master")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for transactions_master")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionsMasterSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transactions_master\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionsMasterPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in transactionsMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all transactionsMaster")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionsMaster) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no transactions_master provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionsMasterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionsMasterUpsertCacheMut.RLock()
	cache, cached := transactionsMasterUpsertCache[key]
	transactionsMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionsMasterAllColumns,
			transactionsMasterColumnsWithDefault,
			transactionsMasterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionsMasterAllColumns,
			transactionsMasterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert transactions_master, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionsMasterPrimaryKeyColumns))
			copy(conflict, transactionsMasterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transactions_master\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionsMasterType, transactionsMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionsMasterType, transactionsMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert transactions_master")
	}

	if !cached {
		transactionsMasterUpsertCacheMut.Lock()
		transactionsMasterUpsertCache[key] = cache
		transactionsMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TransactionsMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionsMaster) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TransactionsMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionsMasterPrimaryKeyMapping)
	sql := "DELETE FROM \"transactions_master\" WHERE \"id\"=$1 AND \"created_at\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from transactions_master")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for transactions_master")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionsMasterQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no transactionsMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from transactions_master")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for transactions_master")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionsMasterSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionsMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transactions_master\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionsMasterPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from transactionsMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for transactions_master")
	}

	if len(transactionsMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionsMaster) Reload(exec boil.Executor) error {
	ret, err := FindTransactionsMaster(exec, o.ID, o.CreatedAt)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionsMasterSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionsMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transactions_master\".* FROM \"transactions_master\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionsMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TransactionsMasterSlice")
	}

	*o = slice

	return nil
}

// TransactionsMasterExists checks if the TransactionsMaster row exists.
func TransactionsMasterExists(exec boil.Executor, iD string, createdAt time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transactions_master\" where \"id\"=$1 AND \"created_at\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD, createdAt)
	}
	row := exec.QueryRow(sql, iD, createdAt)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if transactions_master exists")
	}

	return exists, nil
}
