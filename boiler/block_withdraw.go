// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlockWithdraw is an object representing the database table.
type BlockWithdraw struct {
	PublicAddress      string      `boiler:"public_address" boil:"public_address" json:"public_address" toml:"public_address" yaml:"public_address"`
	Note               null.String `boiler:"note" boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	CreatedAt          time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ID                 string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockSupsWithdraws time.Time   `boiler:"block_sups_withdraws" boil:"block_sups_withdraws" json:"block_sups_withdraws" toml:"block_sups_withdraws" yaml:"block_sups_withdraws"`
	BlockNFTWithdraws  time.Time   `boiler:"block_nft_withdraws" boil:"block_nft_withdraws" json:"block_nft_withdraws" toml:"block_nft_withdraws" yaml:"block_nft_withdraws"`

	R *blockWithdrawR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockWithdrawL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockWithdrawColumns = struct {
	PublicAddress      string
	Note               string
	CreatedAt          string
	ID                 string
	BlockSupsWithdraws string
	BlockNFTWithdraws  string
}{
	PublicAddress:      "public_address",
	Note:               "note",
	CreatedAt:          "created_at",
	ID:                 "id",
	BlockSupsWithdraws: "block_sups_withdraws",
	BlockNFTWithdraws:  "block_nft_withdraws",
}

var BlockWithdrawTableColumns = struct {
	PublicAddress      string
	Note               string
	CreatedAt          string
	ID                 string
	BlockSupsWithdraws string
	BlockNFTWithdraws  string
}{
	PublicAddress:      "block_withdraw.public_address",
	Note:               "block_withdraw.note",
	CreatedAt:          "block_withdraw.created_at",
	ID:                 "block_withdraw.id",
	BlockSupsWithdraws: "block_withdraw.block_sups_withdraws",
	BlockNFTWithdraws:  "block_withdraw.block_nft_withdraws",
}

// Generated where

var BlockWithdrawWhere = struct {
	PublicAddress      whereHelperstring
	Note               whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	ID                 whereHelperstring
	BlockSupsWithdraws whereHelpertime_Time
	BlockNFTWithdraws  whereHelpertime_Time
}{
	PublicAddress:      whereHelperstring{field: "\"block_withdraw\".\"public_address\""},
	Note:               whereHelpernull_String{field: "\"block_withdraw\".\"note\""},
	CreatedAt:          whereHelpertime_Time{field: "\"block_withdraw\".\"created_at\""},
	ID:                 whereHelperstring{field: "\"block_withdraw\".\"id\""},
	BlockSupsWithdraws: whereHelpertime_Time{field: "\"block_withdraw\".\"block_sups_withdraws\""},
	BlockNFTWithdraws:  whereHelpertime_Time{field: "\"block_withdraw\".\"block_nft_withdraws\""},
}

// BlockWithdrawRels is where relationship names are stored.
var BlockWithdrawRels = struct {
}{}

// blockWithdrawR is where relationships are stored.
type blockWithdrawR struct {
}

// NewStruct creates a new relationship struct
func (*blockWithdrawR) NewStruct() *blockWithdrawR {
	return &blockWithdrawR{}
}

// blockWithdrawL is where Load methods for each relationship are stored.
type blockWithdrawL struct{}

var (
	blockWithdrawAllColumns            = []string{"public_address", "note", "created_at", "id", "block_sups_withdraws", "block_nft_withdraws"}
	blockWithdrawColumnsWithoutDefault = []string{"public_address"}
	blockWithdrawColumnsWithDefault    = []string{"note", "created_at", "id", "block_sups_withdraws", "block_nft_withdraws"}
	blockWithdrawPrimaryKeyColumns     = []string{"id"}
	blockWithdrawGeneratedColumns      = []string{}
)

type (
	// BlockWithdrawSlice is an alias for a slice of pointers to BlockWithdraw.
	// This should almost always be used instead of []BlockWithdraw.
	BlockWithdrawSlice []*BlockWithdraw
	// BlockWithdrawHook is the signature for custom BlockWithdraw hook methods
	BlockWithdrawHook func(boil.Executor, *BlockWithdraw) error

	blockWithdrawQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockWithdrawType                 = reflect.TypeOf(&BlockWithdraw{})
	blockWithdrawMapping              = queries.MakeStructMapping(blockWithdrawType)
	blockWithdrawPrimaryKeyMapping, _ = queries.BindMapping(blockWithdrawType, blockWithdrawMapping, blockWithdrawPrimaryKeyColumns)
	blockWithdrawInsertCacheMut       sync.RWMutex
	blockWithdrawInsertCache          = make(map[string]insertCache)
	blockWithdrawUpdateCacheMut       sync.RWMutex
	blockWithdrawUpdateCache          = make(map[string]updateCache)
	blockWithdrawUpsertCacheMut       sync.RWMutex
	blockWithdrawUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blockWithdrawAfterSelectHooks []BlockWithdrawHook

var blockWithdrawBeforeInsertHooks []BlockWithdrawHook
var blockWithdrawAfterInsertHooks []BlockWithdrawHook

var blockWithdrawBeforeUpdateHooks []BlockWithdrawHook
var blockWithdrawAfterUpdateHooks []BlockWithdrawHook

var blockWithdrawBeforeDeleteHooks []BlockWithdrawHook
var blockWithdrawAfterDeleteHooks []BlockWithdrawHook

var blockWithdrawBeforeUpsertHooks []BlockWithdrawHook
var blockWithdrawAfterUpsertHooks []BlockWithdrawHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlockWithdraw) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlockWithdraw) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlockWithdraw) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlockWithdraw) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlockWithdraw) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlockWithdraw) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlockWithdraw) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlockWithdraw) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlockWithdraw) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockWithdrawAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlockWithdrawHook registers your hook function for all future operations.
func AddBlockWithdrawHook(hookPoint boil.HookPoint, blockWithdrawHook BlockWithdrawHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blockWithdrawAfterSelectHooks = append(blockWithdrawAfterSelectHooks, blockWithdrawHook)
	case boil.BeforeInsertHook:
		blockWithdrawBeforeInsertHooks = append(blockWithdrawBeforeInsertHooks, blockWithdrawHook)
	case boil.AfterInsertHook:
		blockWithdrawAfterInsertHooks = append(blockWithdrawAfterInsertHooks, blockWithdrawHook)
	case boil.BeforeUpdateHook:
		blockWithdrawBeforeUpdateHooks = append(blockWithdrawBeforeUpdateHooks, blockWithdrawHook)
	case boil.AfterUpdateHook:
		blockWithdrawAfterUpdateHooks = append(blockWithdrawAfterUpdateHooks, blockWithdrawHook)
	case boil.BeforeDeleteHook:
		blockWithdrawBeforeDeleteHooks = append(blockWithdrawBeforeDeleteHooks, blockWithdrawHook)
	case boil.AfterDeleteHook:
		blockWithdrawAfterDeleteHooks = append(blockWithdrawAfterDeleteHooks, blockWithdrawHook)
	case boil.BeforeUpsertHook:
		blockWithdrawBeforeUpsertHooks = append(blockWithdrawBeforeUpsertHooks, blockWithdrawHook)
	case boil.AfterUpsertHook:
		blockWithdrawAfterUpsertHooks = append(blockWithdrawAfterUpsertHooks, blockWithdrawHook)
	}
}

// One returns a single blockWithdraw record from the query.
func (q blockWithdrawQuery) One(exec boil.Executor) (*BlockWithdraw, error) {
	o := &BlockWithdraw{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for block_withdraw")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlockWithdraw records from the query.
func (q blockWithdrawQuery) All(exec boil.Executor) (BlockWithdrawSlice, error) {
	var o []*BlockWithdraw

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlockWithdraw slice")
	}

	if len(blockWithdrawAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlockWithdraw records in the query.
func (q blockWithdrawQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count block_withdraw rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blockWithdrawQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if block_withdraw exists")
	}

	return count > 0, nil
}

// BlockWithdraws retrieves all the records using an executor.
func BlockWithdraws(mods ...qm.QueryMod) blockWithdrawQuery {
	mods = append(mods, qm.From("\"block_withdraw\""))
	return blockWithdrawQuery{NewQuery(mods...)}
}

// FindBlockWithdraw retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlockWithdraw(exec boil.Executor, iD string, selectCols ...string) (*BlockWithdraw, error) {
	blockWithdrawObj := &BlockWithdraw{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"block_withdraw\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blockWithdrawObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from block_withdraw")
	}

	if err = blockWithdrawObj.doAfterSelectHooks(exec); err != nil {
		return blockWithdrawObj, err
	}

	return blockWithdrawObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlockWithdraw) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no block_withdraw provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blockWithdrawColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockWithdrawInsertCacheMut.RLock()
	cache, cached := blockWithdrawInsertCache[key]
	blockWithdrawInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockWithdrawAllColumns,
			blockWithdrawColumnsWithDefault,
			blockWithdrawColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockWithdrawType, blockWithdrawMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockWithdrawType, blockWithdrawMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"block_withdraw\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"block_withdraw\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into block_withdraw")
	}

	if !cached {
		blockWithdrawInsertCacheMut.Lock()
		blockWithdrawInsertCache[key] = cache
		blockWithdrawInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlockWithdraw.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlockWithdraw) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blockWithdrawUpdateCacheMut.RLock()
	cache, cached := blockWithdrawUpdateCache[key]
	blockWithdrawUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockWithdrawAllColumns,
			blockWithdrawPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update block_withdraw, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"block_withdraw\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blockWithdrawPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockWithdrawType, blockWithdrawMapping, append(wl, blockWithdrawPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update block_withdraw row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for block_withdraw")
	}

	if !cached {
		blockWithdrawUpdateCacheMut.Lock()
		blockWithdrawUpdateCache[key] = cache
		blockWithdrawUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blockWithdrawQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for block_withdraw")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for block_withdraw")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockWithdrawSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockWithdrawPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"block_withdraw\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blockWithdrawPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blockWithdraw slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blockWithdraw")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlockWithdraw) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no block_withdraw provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blockWithdrawColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockWithdrawUpsertCacheMut.RLock()
	cache, cached := blockWithdrawUpsertCache[key]
	blockWithdrawUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockWithdrawAllColumns,
			blockWithdrawColumnsWithDefault,
			blockWithdrawColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blockWithdrawAllColumns,
			blockWithdrawPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert block_withdraw, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blockWithdrawPrimaryKeyColumns))
			copy(conflict, blockWithdrawPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"block_withdraw\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blockWithdrawType, blockWithdrawMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockWithdrawType, blockWithdrawMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert block_withdraw")
	}

	if !cached {
		blockWithdrawUpsertCacheMut.Lock()
		blockWithdrawUpsertCache[key] = cache
		blockWithdrawUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlockWithdraw record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlockWithdraw) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlockWithdraw provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockWithdrawPrimaryKeyMapping)
	sql := "DELETE FROM \"block_withdraw\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from block_withdraw")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for block_withdraw")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blockWithdrawQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blockWithdrawQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from block_withdraw")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for block_withdraw")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockWithdrawSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blockWithdrawBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockWithdrawPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"block_withdraw\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blockWithdrawPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blockWithdraw slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for block_withdraw")
	}

	if len(blockWithdrawAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlockWithdraw) Reload(exec boil.Executor) error {
	ret, err := FindBlockWithdraw(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockWithdrawSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockWithdrawSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockWithdrawPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"block_withdraw\".* FROM \"block_withdraw\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blockWithdrawPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlockWithdrawSlice")
	}

	*o = slice

	return nil
}

// BlockWithdrawExists checks if the BlockWithdraw row exists.
func BlockWithdrawExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"block_withdraw\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if block_withdraw exists")
	}

	return exists, nil
}
