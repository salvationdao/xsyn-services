// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PurchasedItem is an object representing the database table.
type PurchasedItem struct {
	ID              string     `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID    string     `boiler:"collection_id" boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	StoreItemID     string     `boiler:"store_item_id" boil:"store_item_id" json:"store_item_id" toml:"store_item_id" yaml:"store_item_id"`
	ExternalTokenID int        `boiler:"external_token_id" boil:"external_token_id" json:"external_token_id" toml:"external_token_id" yaml:"external_token_id"`
	IsDefault       bool       `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	Tier            string     `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Hash            string     `boiler:"hash" boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	OwnerID         string     `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Data            types.JSON `boiler:"data" boil:"data" json:"data" toml:"data" yaml:"data"`
	UnlockedAt      time.Time  `boiler:"unlocked_at" boil:"unlocked_at" json:"unlocked_at" toml:"unlocked_at" yaml:"unlocked_at"`
	MintedAt        null.Time  `boiler:"minted_at" boil:"minted_at" json:"minted_at,omitempty" toml:"minted_at" yaml:"minted_at,omitempty"`
	DeletedAt       null.Time  `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	RefreshesAt     time.Time  `boiler:"refreshes_at" boil:"refreshes_at" json:"refreshes_at" toml:"refreshes_at" yaml:"refreshes_at"`
	UpdatedAt       time.Time  `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt       time.Time  `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	OnChainStatus   string     `boiler:"on_chain_status" boil:"on_chain_status" json:"on_chain_status" toml:"on_chain_status" yaml:"on_chain_status"`

	R *purchasedItemR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L purchasedItemL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PurchasedItemColumns = struct {
	ID              string
	CollectionID    string
	StoreItemID     string
	ExternalTokenID string
	IsDefault       string
	Tier            string
	Hash            string
	OwnerID         string
	Data            string
	UnlockedAt      string
	MintedAt        string
	DeletedAt       string
	RefreshesAt     string
	UpdatedAt       string
	CreatedAt       string
	OnChainStatus   string
}{
	ID:              "id",
	CollectionID:    "collection_id",
	StoreItemID:     "store_item_id",
	ExternalTokenID: "external_token_id",
	IsDefault:       "is_default",
	Tier:            "tier",
	Hash:            "hash",
	OwnerID:         "owner_id",
	Data:            "data",
	UnlockedAt:      "unlocked_at",
	MintedAt:        "minted_at",
	DeletedAt:       "deleted_at",
	RefreshesAt:     "refreshes_at",
	UpdatedAt:       "updated_at",
	CreatedAt:       "created_at",
	OnChainStatus:   "on_chain_status",
}

var PurchasedItemTableColumns = struct {
	ID              string
	CollectionID    string
	StoreItemID     string
	ExternalTokenID string
	IsDefault       string
	Tier            string
	Hash            string
	OwnerID         string
	Data            string
	UnlockedAt      string
	MintedAt        string
	DeletedAt       string
	RefreshesAt     string
	UpdatedAt       string
	CreatedAt       string
	OnChainStatus   string
}{
	ID:              "purchased_items.id",
	CollectionID:    "purchased_items.collection_id",
	StoreItemID:     "purchased_items.store_item_id",
	ExternalTokenID: "purchased_items.external_token_id",
	IsDefault:       "purchased_items.is_default",
	Tier:            "purchased_items.tier",
	Hash:            "purchased_items.hash",
	OwnerID:         "purchased_items.owner_id",
	Data:            "purchased_items.data",
	UnlockedAt:      "purchased_items.unlocked_at",
	MintedAt:        "purchased_items.minted_at",
	DeletedAt:       "purchased_items.deleted_at",
	RefreshesAt:     "purchased_items.refreshes_at",
	UpdatedAt:       "purchased_items.updated_at",
	CreatedAt:       "purchased_items.created_at",
	OnChainStatus:   "purchased_items.on_chain_status",
}

// Generated where

var PurchasedItemWhere = struct {
	ID              whereHelperstring
	CollectionID    whereHelperstring
	StoreItemID     whereHelperstring
	ExternalTokenID whereHelperint
	IsDefault       whereHelperbool
	Tier            whereHelperstring
	Hash            whereHelperstring
	OwnerID         whereHelperstring
	Data            whereHelpertypes_JSON
	UnlockedAt      whereHelpertime_Time
	MintedAt        whereHelpernull_Time
	DeletedAt       whereHelpernull_Time
	RefreshesAt     whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	OnChainStatus   whereHelperstring
}{
	ID:              whereHelperstring{field: "\"purchased_items\".\"id\""},
	CollectionID:    whereHelperstring{field: "\"purchased_items\".\"collection_id\""},
	StoreItemID:     whereHelperstring{field: "\"purchased_items\".\"store_item_id\""},
	ExternalTokenID: whereHelperint{field: "\"purchased_items\".\"external_token_id\""},
	IsDefault:       whereHelperbool{field: "\"purchased_items\".\"is_default\""},
	Tier:            whereHelperstring{field: "\"purchased_items\".\"tier\""},
	Hash:            whereHelperstring{field: "\"purchased_items\".\"hash\""},
	OwnerID:         whereHelperstring{field: "\"purchased_items\".\"owner_id\""},
	Data:            whereHelpertypes_JSON{field: "\"purchased_items\".\"data\""},
	UnlockedAt:      whereHelpertime_Time{field: "\"purchased_items\".\"unlocked_at\""},
	MintedAt:        whereHelpernull_Time{field: "\"purchased_items\".\"minted_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"purchased_items\".\"deleted_at\""},
	RefreshesAt:     whereHelpertime_Time{field: "\"purchased_items\".\"refreshes_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"purchased_items\".\"updated_at\""},
	CreatedAt:       whereHelpertime_Time{field: "\"purchased_items\".\"created_at\""},
	OnChainStatus:   whereHelperstring{field: "\"purchased_items\".\"on_chain_status\""},
}

// PurchasedItemRels is where relationship names are stored.
var PurchasedItemRels = struct {
	Collection string
	Owner      string
	StoreItem  string
}{
	Collection: "Collection",
	Owner:      "Owner",
	StoreItem:  "StoreItem",
}

// purchasedItemR is where relationships are stored.
type purchasedItemR struct {
	Collection *Collection `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	Owner      *User       `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	StoreItem  *StoreItem  `boiler:"StoreItem" boil:"StoreItem" json:"StoreItem" toml:"StoreItem" yaml:"StoreItem"`
}

// NewStruct creates a new relationship struct
func (*purchasedItemR) NewStruct() *purchasedItemR {
	return &purchasedItemR{}
}

// purchasedItemL is where Load methods for each relationship are stored.
type purchasedItemL struct{}

var (
	purchasedItemAllColumns            = []string{"id", "collection_id", "store_item_id", "external_token_id", "is_default", "tier", "hash", "owner_id", "data", "unlocked_at", "minted_at", "deleted_at", "refreshes_at", "updated_at", "created_at", "on_chain_status"}
	purchasedItemColumnsWithoutDefault = []string{"collection_id", "store_item_id", "external_token_id", "is_default", "tier", "hash", "owner_id", "data", "minted_at", "deleted_at"}
	purchasedItemColumnsWithDefault    = []string{"id", "unlocked_at", "refreshes_at", "updated_at", "created_at", "on_chain_status"}
	purchasedItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// PurchasedItemSlice is an alias for a slice of pointers to PurchasedItem.
	// This should almost always be used instead of []PurchasedItem.
	PurchasedItemSlice []*PurchasedItem
	// PurchasedItemHook is the signature for custom PurchasedItem hook methods
	PurchasedItemHook func(boil.Executor, *PurchasedItem) error

	purchasedItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchasedItemType                 = reflect.TypeOf(&PurchasedItem{})
	purchasedItemMapping              = queries.MakeStructMapping(purchasedItemType)
	purchasedItemPrimaryKeyMapping, _ = queries.BindMapping(purchasedItemType, purchasedItemMapping, purchasedItemPrimaryKeyColumns)
	purchasedItemInsertCacheMut       sync.RWMutex
	purchasedItemInsertCache          = make(map[string]insertCache)
	purchasedItemUpdateCacheMut       sync.RWMutex
	purchasedItemUpdateCache          = make(map[string]updateCache)
	purchasedItemUpsertCacheMut       sync.RWMutex
	purchasedItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var purchasedItemBeforeInsertHooks []PurchasedItemHook
var purchasedItemBeforeUpdateHooks []PurchasedItemHook
var purchasedItemBeforeDeleteHooks []PurchasedItemHook
var purchasedItemBeforeUpsertHooks []PurchasedItemHook

var purchasedItemAfterInsertHooks []PurchasedItemHook
var purchasedItemAfterSelectHooks []PurchasedItemHook
var purchasedItemAfterUpdateHooks []PurchasedItemHook
var purchasedItemAfterDeleteHooks []PurchasedItemHook
var purchasedItemAfterUpsertHooks []PurchasedItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PurchasedItem) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PurchasedItem) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PurchasedItem) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PurchasedItem) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PurchasedItem) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PurchasedItem) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PurchasedItem) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PurchasedItem) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PurchasedItem) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range purchasedItemAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchasedItemHook registers your hook function for all future operations.
func AddPurchasedItemHook(hookPoint boil.HookPoint, purchasedItemHook PurchasedItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		purchasedItemBeforeInsertHooks = append(purchasedItemBeforeInsertHooks, purchasedItemHook)
	case boil.BeforeUpdateHook:
		purchasedItemBeforeUpdateHooks = append(purchasedItemBeforeUpdateHooks, purchasedItemHook)
	case boil.BeforeDeleteHook:
		purchasedItemBeforeDeleteHooks = append(purchasedItemBeforeDeleteHooks, purchasedItemHook)
	case boil.BeforeUpsertHook:
		purchasedItemBeforeUpsertHooks = append(purchasedItemBeforeUpsertHooks, purchasedItemHook)
	case boil.AfterInsertHook:
		purchasedItemAfterInsertHooks = append(purchasedItemAfterInsertHooks, purchasedItemHook)
	case boil.AfterSelectHook:
		purchasedItemAfterSelectHooks = append(purchasedItemAfterSelectHooks, purchasedItemHook)
	case boil.AfterUpdateHook:
		purchasedItemAfterUpdateHooks = append(purchasedItemAfterUpdateHooks, purchasedItemHook)
	case boil.AfterDeleteHook:
		purchasedItemAfterDeleteHooks = append(purchasedItemAfterDeleteHooks, purchasedItemHook)
	case boil.AfterUpsertHook:
		purchasedItemAfterUpsertHooks = append(purchasedItemAfterUpsertHooks, purchasedItemHook)
	}
}

// One returns a single purchasedItem record from the query.
func (q purchasedItemQuery) One(exec boil.Executor) (*PurchasedItem, error) {
	o := &PurchasedItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for purchased_items")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PurchasedItem records from the query.
func (q purchasedItemQuery) All(exec boil.Executor) (PurchasedItemSlice, error) {
	var o []*PurchasedItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PurchasedItem slice")
	}

	if len(purchasedItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PurchasedItem records in the query.
func (q purchasedItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count purchased_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchasedItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if purchased_items exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *PurchasedItem) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *PurchasedItem) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// StoreItem pointed to by the foreign key.
func (o *PurchasedItem) StoreItem(mods ...qm.QueryMod) storeItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StoreItemID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := StoreItems(queryMods...)
	queries.SetFrom(query.Query, "\"store_items\"")

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchasedItemL) LoadCollection(e boil.Executor, singular bool, maybePurchasedItem interface{}, mods queries.Applicator) error {
	var slice []*PurchasedItem
	var object *PurchasedItem

	if singular {
		object = maybePurchasedItem.(*PurchasedItem)
	} else {
		slice = *maybePurchasedItem.(*[]*PurchasedItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchasedItemR{}
		}
		args = append(args, object.CollectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchasedItemR{}
			}

			for _, a := range args {
				if a == obj.CollectionID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(purchasedItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.PurchasedItems = append(foreign.R.PurchasedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.PurchasedItems = append(foreign.R.PurchasedItems, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchasedItemL) LoadOwner(e boil.Executor, singular bool, maybePurchasedItem interface{}, mods queries.Applicator) error {
	var slice []*PurchasedItem
	var object *PurchasedItem

	if singular {
		object = maybePurchasedItem.(*PurchasedItem)
	} else {
		slice = *maybePurchasedItem.(*[]*PurchasedItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchasedItemR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchasedItemR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(purchasedItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerPurchasedItems = append(foreign.R.OwnerPurchasedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerPurchasedItems = append(foreign.R.OwnerPurchasedItems, local)
				break
			}
		}
	}

	return nil
}

// LoadStoreItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchasedItemL) LoadStoreItem(e boil.Executor, singular bool, maybePurchasedItem interface{}, mods queries.Applicator) error {
	var slice []*PurchasedItem
	var object *PurchasedItem

	if singular {
		object = maybePurchasedItem.(*PurchasedItem)
	} else {
		slice = *maybePurchasedItem.(*[]*PurchasedItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchasedItemR{}
		}
		args = append(args, object.StoreItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchasedItemR{}
			}

			for _, a := range args {
				if a == obj.StoreItemID {
					continue Outer
				}
			}

			args = append(args, obj.StoreItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`store_items`),
		qm.WhereIn(`store_items.id in ?`, args...),
		qmhelper.WhereIsNull(`store_items.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StoreItem")
	}

	var resultSlice []*StoreItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StoreItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_items")
	}

	if len(purchasedItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StoreItem = foreign
		if foreign.R == nil {
			foreign.R = &storeItemR{}
		}
		foreign.R.PurchasedItems = append(foreign.R.PurchasedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreItemID == foreign.ID {
				local.R.StoreItem = foreign
				if foreign.R == nil {
					foreign.R = &storeItemR{}
				}
				foreign.R.PurchasedItems = append(foreign.R.PurchasedItems, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the purchasedItem to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.PurchasedItems.
func (o *PurchasedItem) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchased_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, purchasedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &purchasedItemR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			PurchasedItems: PurchasedItemSlice{o},
		}
	} else {
		related.R.PurchasedItems = append(related.R.PurchasedItems, o)
	}

	return nil
}

// SetOwner of the purchasedItem to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerPurchasedItems.
func (o *PurchasedItem) SetOwner(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchased_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, purchasedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &purchasedItemR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerPurchasedItems: PurchasedItemSlice{o},
		}
	} else {
		related.R.OwnerPurchasedItems = append(related.R.OwnerPurchasedItems, o)
	}

	return nil
}

// SetStoreItem of the purchasedItem to the related item.
// Sets o.R.StoreItem to related.
// Adds o to related.R.PurchasedItems.
func (o *PurchasedItem) SetStoreItem(exec boil.Executor, insert bool, related *StoreItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchased_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, purchasedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreItemID = related.ID
	if o.R == nil {
		o.R = &purchasedItemR{
			StoreItem: related,
		}
	} else {
		o.R.StoreItem = related
	}

	if related.R == nil {
		related.R = &storeItemR{
			PurchasedItems: PurchasedItemSlice{o},
		}
	} else {
		related.R.PurchasedItems = append(related.R.PurchasedItems, o)
	}

	return nil
}

// PurchasedItems retrieves all the records using an executor.
func PurchasedItems(mods ...qm.QueryMod) purchasedItemQuery {
	mods = append(mods, qm.From("\"purchased_items\""), qmhelper.WhereIsNull("\"purchased_items\".\"deleted_at\""))
	return purchasedItemQuery{NewQuery(mods...)}
}

// FindPurchasedItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPurchasedItem(exec boil.Executor, iD string, selectCols ...string) (*PurchasedItem, error) {
	purchasedItemObj := &PurchasedItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchased_items\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, purchasedItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from purchased_items")
	}

	if err = purchasedItemObj.doAfterSelectHooks(exec); err != nil {
		return purchasedItemObj, err
	}

	return purchasedItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PurchasedItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no purchased_items provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchasedItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchasedItemInsertCacheMut.RLock()
	cache, cached := purchasedItemInsertCache[key]
	purchasedItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchasedItemAllColumns,
			purchasedItemColumnsWithDefault,
			purchasedItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(purchasedItemType, purchasedItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchasedItemType, purchasedItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchased_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchased_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into purchased_items")
	}

	if !cached {
		purchasedItemInsertCacheMut.Lock()
		purchasedItemInsertCache[key] = cache
		purchasedItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PurchasedItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PurchasedItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	purchasedItemUpdateCacheMut.RLock()
	cache, cached := purchasedItemUpdateCache[key]
	purchasedItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			purchasedItemAllColumns,
			purchasedItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update purchased_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchased_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, purchasedItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(purchasedItemType, purchasedItemMapping, append(wl, purchasedItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update purchased_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for purchased_items")
	}

	if !cached {
		purchasedItemUpdateCacheMut.Lock()
		purchasedItemUpdateCache[key] = cache
		purchasedItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q purchasedItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for purchased_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for purchased_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PurchasedItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchased_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, purchasedItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in purchasedItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all purchasedItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PurchasedItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no purchased_items provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchasedItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchasedItemUpsertCacheMut.RLock()
	cache, cached := purchasedItemUpsertCache[key]
	purchasedItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			purchasedItemAllColumns,
			purchasedItemColumnsWithDefault,
			purchasedItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			purchasedItemAllColumns,
			purchasedItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert purchased_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(purchasedItemPrimaryKeyColumns))
			copy(conflict, purchasedItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchased_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(purchasedItemType, purchasedItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchasedItemType, purchasedItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert purchased_items")
	}

	if !cached {
		purchasedItemUpsertCacheMut.Lock()
		purchasedItemUpsertCache[key] = cache
		purchasedItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PurchasedItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PurchasedItem) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PurchasedItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), purchasedItemPrimaryKeyMapping)
		sql = "DELETE FROM \"purchased_items\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"purchased_items\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(purchasedItemType, purchasedItemMapping, append(wl, purchasedItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from purchased_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for purchased_items")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q purchasedItemQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no purchasedItemQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from purchased_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for purchased_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PurchasedItemSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(purchasedItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"purchased_items\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, purchasedItemPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"purchased_items\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, purchasedItemPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from purchasedItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for purchased_items")
	}

	if len(purchasedItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PurchasedItem) Reload(exec boil.Executor) error {
	ret, err := FindPurchasedItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PurchasedItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PurchasedItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchased_items\".* FROM \"purchased_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, purchasedItemPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PurchasedItemSlice")
	}

	*o = slice

	return nil
}

// PurchasedItemExists checks if the PurchasedItem row exists.
func PurchasedItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchased_items\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if purchased_items exists")
	}

	return exists, nil
}
