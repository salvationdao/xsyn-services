// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID                   string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Description          string          `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	TransactionReference string          `boiler:"transaction_reference" boil:"transaction_reference" json:"transaction_reference" toml:"transaction_reference" yaml:"transaction_reference"`
	Amount               decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Reason               null.String     `boiler:"reason" boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	CreatedAt            time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Group                string          `boiler:"group" boil:"group" json:"group" toml:"group" yaml:"group"`
	SubGroup             null.String     `boiler:"sub_group" boil:"sub_group" json:"sub_group,omitempty" toml:"sub_group" yaml:"sub_group,omitempty"`
	RelatedTransactionID null.String     `boiler:"related_transaction_id" boil:"related_transaction_id" json:"related_transaction_id,omitempty" toml:"related_transaction_id" yaml:"related_transaction_id,omitempty"`
	ServiceID            null.String     `boiler:"service_id" boil:"service_id" json:"service_id,omitempty" toml:"service_id" yaml:"service_id,omitempty"`
	DebitAccountID       string          `boiler:"debit_account_id" boil:"debit_account_id" json:"debit_account_id" toml:"debit_account_id" yaml:"debit_account_id"`
	CreditAccountID      string          `boiler:"credit_account_id" boil:"credit_account_id" json:"credit_account_id" toml:"credit_account_id" yaml:"credit_account_id"`

	R *transactionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionColumns = struct {
	ID                   string
	Description          string
	TransactionReference string
	Amount               string
	Reason               string
	CreatedAt            string
	Group                string
	SubGroup             string
	RelatedTransactionID string
	ServiceID            string
	DebitAccountID       string
	CreditAccountID      string
}{
	ID:                   "id",
	Description:          "description",
	TransactionReference: "transaction_reference",
	Amount:               "amount",
	Reason:               "reason",
	CreatedAt:            "created_at",
	Group:                "group",
	SubGroup:             "sub_group",
	RelatedTransactionID: "related_transaction_id",
	ServiceID:            "service_id",
	DebitAccountID:       "debit_account_id",
	CreditAccountID:      "credit_account_id",
}

var TransactionTableColumns = struct {
	ID                   string
	Description          string
	TransactionReference string
	Amount               string
	Reason               string
	CreatedAt            string
	Group                string
	SubGroup             string
	RelatedTransactionID string
	ServiceID            string
	DebitAccountID       string
	CreditAccountID      string
}{
	ID:                   "transactions.id",
	Description:          "transactions.description",
	TransactionReference: "transactions.transaction_reference",
	Amount:               "transactions.amount",
	Reason:               "transactions.reason",
	CreatedAt:            "transactions.created_at",
	Group:                "transactions.group",
	SubGroup:             "transactions.sub_group",
	RelatedTransactionID: "transactions.related_transaction_id",
	ServiceID:            "transactions.service_id",
	DebitAccountID:       "transactions.debit_account_id",
	CreditAccountID:      "transactions.credit_account_id",
}

// Generated where

var TransactionWhere = struct {
	ID                   whereHelperstring
	Description          whereHelperstring
	TransactionReference whereHelperstring
	Amount               whereHelperdecimal_Decimal
	Reason               whereHelpernull_String
	CreatedAt            whereHelpertime_Time
	Group                whereHelperstring
	SubGroup             whereHelpernull_String
	RelatedTransactionID whereHelpernull_String
	ServiceID            whereHelpernull_String
	DebitAccountID       whereHelperstring
	CreditAccountID      whereHelperstring
}{
	ID:                   whereHelperstring{field: "\"transactions\".\"id\""},
	Description:          whereHelperstring{field: "\"transactions\".\"description\""},
	TransactionReference: whereHelperstring{field: "\"transactions\".\"transaction_reference\""},
	Amount:               whereHelperdecimal_Decimal{field: "\"transactions\".\"amount\""},
	Reason:               whereHelpernull_String{field: "\"transactions\".\"reason\""},
	CreatedAt:            whereHelpertime_Time{field: "\"transactions\".\"created_at\""},
	Group:                whereHelperstring{field: "\"transactions\".\"group\""},
	SubGroup:             whereHelpernull_String{field: "\"transactions\".\"sub_group\""},
	RelatedTransactionID: whereHelpernull_String{field: "\"transactions\".\"related_transaction_id\""},
	ServiceID:            whereHelpernull_String{field: "\"transactions\".\"service_id\""},
	DebitAccountID:       whereHelperstring{field: "\"transactions\".\"debit_account_id\""},
	CreditAccountID:      whereHelperstring{field: "\"transactions\".\"credit_account_id\""},
}

// TransactionRels is where relationship names are stored.
var TransactionRels = struct {
	CreditAccount                            string
	DebitAccount                             string
	RelatedTransaction                       string
	Service                                  string
	TransferTXAsset1155ServiceTransferEvents string
	TransferTXAssetServiceTransferEvents     string
	TransferTXAssetTransferEvents            string
	ReversalTransactionPendingRefunds        string
	TransactionReferencePendingRefunds       string
	WithdrawTransactionPendingRefunds        string
	RelatedTransactionTransactions           string
}{
	CreditAccount:                            "CreditAccount",
	DebitAccount:                             "DebitAccount",
	RelatedTransaction:                       "RelatedTransaction",
	Service:                                  "Service",
	TransferTXAsset1155ServiceTransferEvents: "TransferTXAsset1155ServiceTransferEvents",
	TransferTXAssetServiceTransferEvents:     "TransferTXAssetServiceTransferEvents",
	TransferTXAssetTransferEvents:            "TransferTXAssetTransferEvents",
	ReversalTransactionPendingRefunds:        "ReversalTransactionPendingRefunds",
	TransactionReferencePendingRefunds:       "TransactionReferencePendingRefunds",
	WithdrawTransactionPendingRefunds:        "WithdrawTransactionPendingRefunds",
	RelatedTransactionTransactions:           "RelatedTransactionTransactions",
}

// transactionR is where relationships are stored.
type transactionR struct {
	CreditAccount                            *Account                           `boiler:"CreditAccount" boil:"CreditAccount" json:"CreditAccount" toml:"CreditAccount" yaml:"CreditAccount"`
	DebitAccount                             *Account                           `boiler:"DebitAccount" boil:"DebitAccount" json:"DebitAccount" toml:"DebitAccount" yaml:"DebitAccount"`
	RelatedTransaction                       *Transaction                       `boiler:"RelatedTransaction" boil:"RelatedTransaction" json:"RelatedTransaction" toml:"RelatedTransaction" yaml:"RelatedTransaction"`
	Service                                  *User                              `boiler:"Service" boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
	TransferTXAsset1155ServiceTransferEvents Asset1155ServiceTransferEventSlice `boiler:"TransferTXAsset1155ServiceTransferEvents" boil:"TransferTXAsset1155ServiceTransferEvents" json:"TransferTXAsset1155ServiceTransferEvents" toml:"TransferTXAsset1155ServiceTransferEvents" yaml:"TransferTXAsset1155ServiceTransferEvents"`
	TransferTXAssetServiceTransferEvents     AssetServiceTransferEventSlice     `boiler:"TransferTXAssetServiceTransferEvents" boil:"TransferTXAssetServiceTransferEvents" json:"TransferTXAssetServiceTransferEvents" toml:"TransferTXAssetServiceTransferEvents" yaml:"TransferTXAssetServiceTransferEvents"`
	TransferTXAssetTransferEvents            AssetTransferEventSlice            `boiler:"TransferTXAssetTransferEvents" boil:"TransferTXAssetTransferEvents" json:"TransferTXAssetTransferEvents" toml:"TransferTXAssetTransferEvents" yaml:"TransferTXAssetTransferEvents"`
	ReversalTransactionPendingRefunds        PendingRefundSlice                 `boiler:"ReversalTransactionPendingRefunds" boil:"ReversalTransactionPendingRefunds" json:"ReversalTransactionPendingRefunds" toml:"ReversalTransactionPendingRefunds" yaml:"ReversalTransactionPendingRefunds"`
	TransactionReferencePendingRefunds       PendingRefundSlice                 `boiler:"TransactionReferencePendingRefunds" boil:"TransactionReferencePendingRefunds" json:"TransactionReferencePendingRefunds" toml:"TransactionReferencePendingRefunds" yaml:"TransactionReferencePendingRefunds"`
	WithdrawTransactionPendingRefunds        PendingRefundSlice                 `boiler:"WithdrawTransactionPendingRefunds" boil:"WithdrawTransactionPendingRefunds" json:"WithdrawTransactionPendingRefunds" toml:"WithdrawTransactionPendingRefunds" yaml:"WithdrawTransactionPendingRefunds"`
	RelatedTransactionTransactions           TransactionSlice                   `boiler:"RelatedTransactionTransactions" boil:"RelatedTransactionTransactions" json:"RelatedTransactionTransactions" toml:"RelatedTransactionTransactions" yaml:"RelatedTransactionTransactions"`
}

// NewStruct creates a new relationship struct
func (*transactionR) NewStruct() *transactionR {
	return &transactionR{}
}

// transactionL is where Load methods for each relationship are stored.
type transactionL struct{}

var (
	transactionAllColumns            = []string{"id", "description", "transaction_reference", "amount", "reason", "created_at", "group", "sub_group", "related_transaction_id", "service_id", "debit_account_id", "credit_account_id"}
	transactionColumnsWithoutDefault = []string{"id", "amount", "debit_account_id", "credit_account_id"}
	transactionColumnsWithDefault    = []string{"description", "transaction_reference", "reason", "created_at", "group", "sub_group", "related_transaction_id", "service_id"}
	transactionPrimaryKeyColumns     = []string{"id"}
	transactionGeneratedColumns      = []string{}
)

type (
	// TransactionSlice is an alias for a slice of pointers to Transaction.
	// This should almost always be used instead of []Transaction.
	TransactionSlice []*Transaction
	// TransactionHook is the signature for custom Transaction hook methods
	TransactionHook func(boil.Executor, *Transaction) error

	transactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionType                 = reflect.TypeOf(&Transaction{})
	transactionMapping              = queries.MakeStructMapping(transactionType)
	transactionPrimaryKeyMapping, _ = queries.BindMapping(transactionType, transactionMapping, transactionPrimaryKeyColumns)
	transactionInsertCacheMut       sync.RWMutex
	transactionInsertCache          = make(map[string]insertCache)
	transactionUpdateCacheMut       sync.RWMutex
	transactionUpdateCache          = make(map[string]updateCache)
	transactionUpsertCacheMut       sync.RWMutex
	transactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactionAfterSelectHooks []TransactionHook

var transactionBeforeInsertHooks []TransactionHook
var transactionAfterInsertHooks []TransactionHook

var transactionBeforeUpdateHooks []TransactionHook
var transactionAfterUpdateHooks []TransactionHook

var transactionBeforeDeleteHooks []TransactionHook
var transactionAfterDeleteHooks []TransactionHook

var transactionBeforeUpsertHooks []TransactionHook
var transactionAfterUpsertHooks []TransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionHook registers your hook function for all future operations.
func AddTransactionHook(hookPoint boil.HookPoint, transactionHook TransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transactionAfterSelectHooks = append(transactionAfterSelectHooks, transactionHook)
	case boil.BeforeInsertHook:
		transactionBeforeInsertHooks = append(transactionBeforeInsertHooks, transactionHook)
	case boil.AfterInsertHook:
		transactionAfterInsertHooks = append(transactionAfterInsertHooks, transactionHook)
	case boil.BeforeUpdateHook:
		transactionBeforeUpdateHooks = append(transactionBeforeUpdateHooks, transactionHook)
	case boil.AfterUpdateHook:
		transactionAfterUpdateHooks = append(transactionAfterUpdateHooks, transactionHook)
	case boil.BeforeDeleteHook:
		transactionBeforeDeleteHooks = append(transactionBeforeDeleteHooks, transactionHook)
	case boil.AfterDeleteHook:
		transactionAfterDeleteHooks = append(transactionAfterDeleteHooks, transactionHook)
	case boil.BeforeUpsertHook:
		transactionBeforeUpsertHooks = append(transactionBeforeUpsertHooks, transactionHook)
	case boil.AfterUpsertHook:
		transactionAfterUpsertHooks = append(transactionAfterUpsertHooks, transactionHook)
	}
}

// One returns a single transaction record from the query.
func (q transactionQuery) One(exec boil.Executor) (*Transaction, error) {
	o := &Transaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for transactions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Transaction records from the query.
func (q transactionQuery) All(exec boil.Executor) (TransactionSlice, error) {
	var o []*Transaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Transaction slice")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Transaction records in the query.
func (q transactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if transactions exists")
	}

	return count > 0, nil
}

// CreditAccount pointed to by the foreign key.
func (o *Transaction) CreditAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreditAccountID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"accounts\"")

	return query
}

// DebitAccount pointed to by the foreign key.
func (o *Transaction) DebitAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DebitAccountID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"accounts\"")

	return query
}

// RelatedTransaction pointed to by the foreign key.
func (o *Transaction) RelatedTransaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedTransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// Service pointed to by the foreign key.
func (o *Transaction) Service(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// TransferTXAsset1155ServiceTransferEvents retrieves all the asset1155_service_transfer_event's Asset1155ServiceTransferEvents with an executor via transfer_tx_id column.
func (o *Transaction) TransferTXAsset1155ServiceTransferEvents(mods ...qm.QueryMod) asset1155ServiceTransferEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"asset1155_service_transfer_events\".\"transfer_tx_id\"=?", o.ID),
	)

	query := Asset1155ServiceTransferEvents(queryMods...)
	queries.SetFrom(query.Query, "\"asset1155_service_transfer_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"asset1155_service_transfer_events\".*"})
	}

	return query
}

// TransferTXAssetServiceTransferEvents retrieves all the asset_service_transfer_event's AssetServiceTransferEvents with an executor via transfer_tx_id column.
func (o *Transaction) TransferTXAssetServiceTransferEvents(mods ...qm.QueryMod) assetServiceTransferEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"asset_service_transfer_events\".\"transfer_tx_id\"=?", o.ID),
	)

	query := AssetServiceTransferEvents(queryMods...)
	queries.SetFrom(query.Query, "\"asset_service_transfer_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"asset_service_transfer_events\".*"})
	}

	return query
}

// TransferTXAssetTransferEvents retrieves all the asset_transfer_event's AssetTransferEvents with an executor via transfer_tx_id column.
func (o *Transaction) TransferTXAssetTransferEvents(mods ...qm.QueryMod) assetTransferEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"asset_transfer_events\".\"transfer_tx_id\"=?", o.ID),
	)

	query := AssetTransferEvents(queryMods...)
	queries.SetFrom(query.Query, "\"asset_transfer_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"asset_transfer_events\".*"})
	}

	return query
}

// ReversalTransactionPendingRefunds retrieves all the pending_refund's PendingRefunds with an executor via reversal_transaction_id column.
func (o *Transaction) ReversalTransactionPendingRefunds(mods ...qm.QueryMod) pendingRefundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pending_refund\".\"reversal_transaction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"pending_refund\".\"deleted_at\""),
	)

	query := PendingRefunds(queryMods...)
	queries.SetFrom(query.Query, "\"pending_refund\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pending_refund\".*"})
	}

	return query
}

// TransactionReferencePendingRefunds retrieves all the pending_refund's PendingRefunds with an executor via transaction_reference column.
func (o *Transaction) TransactionReferencePendingRefunds(mods ...qm.QueryMod) pendingRefundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pending_refund\".\"transaction_reference\"=?", o.TransactionReference),
		qmhelper.WhereIsNull("\"pending_refund\".\"deleted_at\""),
	)

	query := PendingRefunds(queryMods...)
	queries.SetFrom(query.Query, "\"pending_refund\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pending_refund\".*"})
	}

	return query
}

// WithdrawTransactionPendingRefunds retrieves all the pending_refund's PendingRefunds with an executor via withdraw_transaction_id column.
func (o *Transaction) WithdrawTransactionPendingRefunds(mods ...qm.QueryMod) pendingRefundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pending_refund\".\"withdraw_transaction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"pending_refund\".\"deleted_at\""),
	)

	query := PendingRefunds(queryMods...)
	queries.SetFrom(query.Query, "\"pending_refund\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pending_refund\".*"})
	}

	return query
}

// RelatedTransactionTransactions retrieves all the transaction's Transactions with an executor via related_transaction_id column.
func (o *Transaction) RelatedTransactionTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"related_transaction_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// LoadCreditAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadCreditAccount(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.CreditAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.CreditAccountID {
					continue Outer
				}
			}

			args = append(args, obj.CreditAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, args...),
		qmhelper.WhereIsNull(`accounts.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.CreditAccountTransactions = append(foreign.R.CreditAccountTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreditAccountID == foreign.ID {
				local.R.CreditAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.CreditAccountTransactions = append(foreign.R.CreditAccountTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadDebitAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadDebitAccount(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.DebitAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.DebitAccountID {
					continue Outer
				}
			}

			args = append(args, obj.DebitAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, args...),
		qmhelper.WhereIsNull(`accounts.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebitAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.DebitAccountTransactions = append(foreign.R.DebitAccountTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DebitAccountID == foreign.ID {
				local.R.DebitAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.DebitAccountTransactions = append(foreign.R.DebitAccountTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadRelatedTransaction(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		if !queries.IsNil(object.RelatedTransactionID) {
			args = append(args, object.RelatedTransactionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedTransactionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedTransactionID) {
				args = append(args, obj.RelatedTransactionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedTransaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.RelatedTransactionTransactions = append(foreign.R.RelatedTransactionTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedTransactionID, foreign.ID) {
				local.R.RelatedTransaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.RelatedTransactionTransactions = append(foreign.R.RelatedTransactionTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadService(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		if !queries.IsNil(object.ServiceID) {
			args = append(args, object.ServiceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ServiceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ServiceID) {
				args = append(args, obj.ServiceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ServiceTransactions = append(foreign.R.ServiceTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ServiceID, foreign.ID) {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ServiceTransactions = append(foreign.R.ServiceTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferTXAsset1155ServiceTransferEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransferTXAsset1155ServiceTransferEvents(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`asset1155_service_transfer_events`),
		qm.WhereIn(`asset1155_service_transfer_events.transfer_tx_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load asset1155_service_transfer_events")
	}

	var resultSlice []*Asset1155ServiceTransferEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice asset1155_service_transfer_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on asset1155_service_transfer_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset1155_service_transfer_events")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransferTXAsset1155ServiceTransferEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &asset1155ServiceTransferEventR{}
			}
			foreign.R.TransferTX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransferTXID {
				local.R.TransferTXAsset1155ServiceTransferEvents = append(local.R.TransferTXAsset1155ServiceTransferEvents, foreign)
				if foreign.R == nil {
					foreign.R = &asset1155ServiceTransferEventR{}
				}
				foreign.R.TransferTX = local
				break
			}
		}
	}

	return nil
}

// LoadTransferTXAssetServiceTransferEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransferTXAssetServiceTransferEvents(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`asset_service_transfer_events`),
		qm.WhereIn(`asset_service_transfer_events.transfer_tx_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load asset_service_transfer_events")
	}

	var resultSlice []*AssetServiceTransferEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice asset_service_transfer_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on asset_service_transfer_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset_service_transfer_events")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransferTXAssetServiceTransferEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assetServiceTransferEventR{}
			}
			foreign.R.TransferTX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransferTXID {
				local.R.TransferTXAssetServiceTransferEvents = append(local.R.TransferTXAssetServiceTransferEvents, foreign)
				if foreign.R == nil {
					foreign.R = &assetServiceTransferEventR{}
				}
				foreign.R.TransferTX = local
				break
			}
		}
	}

	return nil
}

// LoadTransferTXAssetTransferEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransferTXAssetTransferEvents(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`asset_transfer_events`),
		qm.WhereIn(`asset_transfer_events.transfer_tx_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load asset_transfer_events")
	}

	var resultSlice []*AssetTransferEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice asset_transfer_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on asset_transfer_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset_transfer_events")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransferTXAssetTransferEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assetTransferEventR{}
			}
			foreign.R.TransferTX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TransferTXID) {
				local.R.TransferTXAssetTransferEvents = append(local.R.TransferTXAssetTransferEvents, foreign)
				if foreign.R == nil {
					foreign.R = &assetTransferEventR{}
				}
				foreign.R.TransferTX = local
				break
			}
		}
	}

	return nil
}

// LoadReversalTransactionPendingRefunds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadReversalTransactionPendingRefunds(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pending_refund`),
		qm.WhereIn(`pending_refund.reversal_transaction_id in ?`, args...),
		qmhelper.WhereIsNull(`pending_refund.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pending_refund")
	}

	var resultSlice []*PendingRefund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pending_refund")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pending_refund")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pending_refund")
	}

	if len(pendingRefundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReversalTransactionPendingRefunds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pendingRefundR{}
			}
			foreign.R.ReversalTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ReversalTransactionID) {
				local.R.ReversalTransactionPendingRefunds = append(local.R.ReversalTransactionPendingRefunds, foreign)
				if foreign.R == nil {
					foreign.R = &pendingRefundR{}
				}
				foreign.R.ReversalTransaction = local
				break
			}
		}
	}

	return nil
}

// LoadTransactionReferencePendingRefunds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadTransactionReferencePendingRefunds(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.TransactionReference)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if a == obj.TransactionReference {
					continue Outer
				}
			}

			args = append(args, obj.TransactionReference)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pending_refund`),
		qm.WhereIn(`pending_refund.transaction_reference in ?`, args...),
		qmhelper.WhereIsNull(`pending_refund.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pending_refund")
	}

	var resultSlice []*PendingRefund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pending_refund")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pending_refund")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pending_refund")
	}

	if len(pendingRefundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransactionReferencePendingRefunds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pendingRefundR{}
			}
			foreign.R.TransactionReferenceTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TransactionReference == foreign.TransactionReference {
				local.R.TransactionReferencePendingRefunds = append(local.R.TransactionReferencePendingRefunds, foreign)
				if foreign.R == nil {
					foreign.R = &pendingRefundR{}
				}
				foreign.R.TransactionReferenceTransaction = local
				break
			}
		}
	}

	return nil
}

// LoadWithdrawTransactionPendingRefunds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadWithdrawTransactionPendingRefunds(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pending_refund`),
		qm.WhereIn(`pending_refund.withdraw_transaction_id in ?`, args...),
		qmhelper.WhereIsNull(`pending_refund.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pending_refund")
	}

	var resultSlice []*PendingRefund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pending_refund")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pending_refund")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pending_refund")
	}

	if len(pendingRefundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WithdrawTransactionPendingRefunds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pendingRefundR{}
			}
			foreign.R.WithdrawTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WithdrawTransactionID) {
				local.R.WithdrawTransactionPendingRefunds = append(local.R.WithdrawTransactionPendingRefunds, foreign)
				if foreign.R == nil {
					foreign.R = &pendingRefundR{}
				}
				foreign.R.WithdrawTransaction = local
				break
			}
		}
	}

	return nil
}

// LoadRelatedTransactionTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadRelatedTransactionTransactions(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.related_transaction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedTransactionTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.RelatedTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedTransactionID) {
				local.R.RelatedTransactionTransactions = append(local.R.RelatedTransactionTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.RelatedTransaction = local
				break
			}
		}
	}

	return nil
}

// SetCreditAccount of the transaction to the related item.
// Sets o.R.CreditAccount to related.
// Adds o to related.R.CreditAccountTransactions.
func (o *Transaction) SetCreditAccount(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"credit_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreditAccountID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			CreditAccount: related,
		}
	} else {
		o.R.CreditAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			CreditAccountTransactions: TransactionSlice{o},
		}
	} else {
		related.R.CreditAccountTransactions = append(related.R.CreditAccountTransactions, o)
	}

	return nil
}

// SetDebitAccount of the transaction to the related item.
// Sets o.R.DebitAccount to related.
// Adds o to related.R.DebitAccountTransactions.
func (o *Transaction) SetDebitAccount(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"debit_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DebitAccountID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			DebitAccount: related,
		}
	} else {
		o.R.DebitAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			DebitAccountTransactions: TransactionSlice{o},
		}
	} else {
		related.R.DebitAccountTransactions = append(related.R.DebitAccountTransactions, o)
	}

	return nil
}

// SetRelatedTransaction of the transaction to the related item.
// Sets o.R.RelatedTransaction to related.
// Adds o to related.R.RelatedTransactionTransactions.
func (o *Transaction) SetRelatedTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedTransactionID, related.ID)
	if o.R == nil {
		o.R = &transactionR{
			RelatedTransaction: related,
		}
	} else {
		o.R.RelatedTransaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			RelatedTransactionTransactions: TransactionSlice{o},
		}
	} else {
		related.R.RelatedTransactionTransactions = append(related.R.RelatedTransactionTransactions, o)
	}

	return nil
}

// RemoveRelatedTransaction relationship.
// Sets o.R.RelatedTransaction to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Transaction) RemoveRelatedTransaction(exec boil.Executor, related *Transaction) error {
	var err error

	queries.SetScanner(&o.RelatedTransactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_transaction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedTransaction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedTransactionTransactions {
		if queries.Equal(o.RelatedTransactionID, ri.RelatedTransactionID) {
			continue
		}

		ln := len(related.R.RelatedTransactionTransactions)
		if ln > 1 && i < ln-1 {
			related.R.RelatedTransactionTransactions[i] = related.R.RelatedTransactionTransactions[ln-1]
		}
		related.R.RelatedTransactionTransactions = related.R.RelatedTransactionTransactions[:ln-1]
		break
	}
	return nil
}

// SetService of the transaction to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.ServiceTransactions.
func (o *Transaction) SetService(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ServiceID, related.ID)
	if o.R == nil {
		o.R = &transactionR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &userR{
			ServiceTransactions: TransactionSlice{o},
		}
	} else {
		related.R.ServiceTransactions = append(related.R.ServiceTransactions, o)
	}

	return nil
}

// RemoveService relationship.
// Sets o.R.Service to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Transaction) RemoveService(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.ServiceID, nil)
	if _, err = o.Update(exec, boil.Whitelist("service_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Service = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ServiceTransactions {
		if queries.Equal(o.ServiceID, ri.ServiceID) {
			continue
		}

		ln := len(related.R.ServiceTransactions)
		if ln > 1 && i < ln-1 {
			related.R.ServiceTransactions[i] = related.R.ServiceTransactions[ln-1]
		}
		related.R.ServiceTransactions = related.R.ServiceTransactions[:ln-1]
		break
	}
	return nil
}

// AddTransferTXAsset1155ServiceTransferEvents adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransferTXAsset1155ServiceTransferEvents.
// Sets related.R.TransferTX appropriately.
func (o *Transaction) AddTransferTXAsset1155ServiceTransferEvents(exec boil.Executor, insert bool, related ...*Asset1155ServiceTransferEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransferTXID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_tx_id"}),
				strmangle.WhereClause("\"", "\"", 2, asset1155ServiceTransferEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransferTXID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransferTXAsset1155ServiceTransferEvents: related,
		}
	} else {
		o.R.TransferTXAsset1155ServiceTransferEvents = append(o.R.TransferTXAsset1155ServiceTransferEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &asset1155ServiceTransferEventR{
				TransferTX: o,
			}
		} else {
			rel.R.TransferTX = o
		}
	}
	return nil
}

// AddTransferTXAssetServiceTransferEvents adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransferTXAssetServiceTransferEvents.
// Sets related.R.TransferTX appropriately.
func (o *Transaction) AddTransferTXAssetServiceTransferEvents(exec boil.Executor, insert bool, related ...*AssetServiceTransferEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransferTXID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_tx_id"}),
				strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransferTXID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransferTXAssetServiceTransferEvents: related,
		}
	} else {
		o.R.TransferTXAssetServiceTransferEvents = append(o.R.TransferTXAssetServiceTransferEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetServiceTransferEventR{
				TransferTX: o,
			}
		} else {
			rel.R.TransferTX = o
		}
	}
	return nil
}

// AddTransferTXAssetTransferEvents adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransferTXAssetTransferEvents.
// Sets related.R.TransferTX appropriately.
func (o *Transaction) AddTransferTXAssetTransferEvents(exec boil.Executor, insert bool, related ...*AssetTransferEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransferTXID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"asset_transfer_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_tx_id"}),
				strmangle.WhereClause("\"", "\"", 2, assetTransferEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransferTXID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransferTXAssetTransferEvents: related,
		}
	} else {
		o.R.TransferTXAssetTransferEvents = append(o.R.TransferTXAssetTransferEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetTransferEventR{
				TransferTX: o,
			}
		} else {
			rel.R.TransferTX = o
		}
	}
	return nil
}

// SetTransferTXAssetTransferEvents removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransferTX's TransferTXAssetTransferEvents accordingly.
// Replaces o.R.TransferTXAssetTransferEvents with related.
// Sets related.R.TransferTX's TransferTXAssetTransferEvents accordingly.
func (o *Transaction) SetTransferTXAssetTransferEvents(exec boil.Executor, insert bool, related ...*AssetTransferEvent) error {
	query := "update \"asset_transfer_events\" set \"transfer_tx_id\" = null where \"transfer_tx_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransferTXAssetTransferEvents {
			queries.SetScanner(&rel.TransferTXID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TransferTX = nil
		}

		o.R.TransferTXAssetTransferEvents = nil
	}
	return o.AddTransferTXAssetTransferEvents(exec, insert, related...)
}

// RemoveTransferTXAssetTransferEvents relationships from objects passed in.
// Removes related items from R.TransferTXAssetTransferEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.TransferTX.
func (o *Transaction) RemoveTransferTXAssetTransferEvents(exec boil.Executor, related ...*AssetTransferEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransferTXID, nil)
		if rel.R != nil {
			rel.R.TransferTX = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("transfer_tx_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransferTXAssetTransferEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransferTXAssetTransferEvents)
			if ln > 1 && i < ln-1 {
				o.R.TransferTXAssetTransferEvents[i] = o.R.TransferTXAssetTransferEvents[ln-1]
			}
			o.R.TransferTXAssetTransferEvents = o.R.TransferTXAssetTransferEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddReversalTransactionPendingRefunds adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.ReversalTransactionPendingRefunds.
// Sets related.R.ReversalTransaction appropriately.
func (o *Transaction) AddReversalTransactionPendingRefunds(exec boil.Executor, insert bool, related ...*PendingRefund) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReversalTransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pending_refund\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reversal_transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, pendingRefundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReversalTransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			ReversalTransactionPendingRefunds: related,
		}
	} else {
		o.R.ReversalTransactionPendingRefunds = append(o.R.ReversalTransactionPendingRefunds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pendingRefundR{
				ReversalTransaction: o,
			}
		} else {
			rel.R.ReversalTransaction = o
		}
	}
	return nil
}

// SetReversalTransactionPendingRefunds removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReversalTransaction's ReversalTransactionPendingRefunds accordingly.
// Replaces o.R.ReversalTransactionPendingRefunds with related.
// Sets related.R.ReversalTransaction's ReversalTransactionPendingRefunds accordingly.
func (o *Transaction) SetReversalTransactionPendingRefunds(exec boil.Executor, insert bool, related ...*PendingRefund) error {
	query := "update \"pending_refund\" set \"reversal_transaction_id\" = null where \"reversal_transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReversalTransactionPendingRefunds {
			queries.SetScanner(&rel.ReversalTransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReversalTransaction = nil
		}

		o.R.ReversalTransactionPendingRefunds = nil
	}
	return o.AddReversalTransactionPendingRefunds(exec, insert, related...)
}

// RemoveReversalTransactionPendingRefunds relationships from objects passed in.
// Removes related items from R.ReversalTransactionPendingRefunds (uses pointer comparison, removal does not keep order)
// Sets related.R.ReversalTransaction.
func (o *Transaction) RemoveReversalTransactionPendingRefunds(exec boil.Executor, related ...*PendingRefund) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReversalTransactionID, nil)
		if rel.R != nil {
			rel.R.ReversalTransaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("reversal_transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReversalTransactionPendingRefunds {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReversalTransactionPendingRefunds)
			if ln > 1 && i < ln-1 {
				o.R.ReversalTransactionPendingRefunds[i] = o.R.ReversalTransactionPendingRefunds[ln-1]
			}
			o.R.ReversalTransactionPendingRefunds = o.R.ReversalTransactionPendingRefunds[:ln-1]
			break
		}
	}

	return nil
}

// AddTransactionReferencePendingRefunds adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionReferencePendingRefunds.
// Sets related.R.TransactionReferenceTransaction appropriately.
func (o *Transaction) AddTransactionReferencePendingRefunds(exec boil.Executor, insert bool, related ...*PendingRefund) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionReference = o.TransactionReference
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pending_refund\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_reference"}),
				strmangle.WhereClause("\"", "\"", 2, pendingRefundPrimaryKeyColumns),
			)
			values := []interface{}{o.TransactionReference, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionReference = o.TransactionReference
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionReferencePendingRefunds: related,
		}
	} else {
		o.R.TransactionReferencePendingRefunds = append(o.R.TransactionReferencePendingRefunds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pendingRefundR{
				TransactionReferenceTransaction: o,
			}
		} else {
			rel.R.TransactionReferenceTransaction = o
		}
	}
	return nil
}

// AddWithdrawTransactionPendingRefunds adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.WithdrawTransactionPendingRefunds.
// Sets related.R.WithdrawTransaction appropriately.
func (o *Transaction) AddWithdrawTransactionPendingRefunds(exec boil.Executor, insert bool, related ...*PendingRefund) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WithdrawTransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pending_refund\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"withdraw_transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, pendingRefundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WithdrawTransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			WithdrawTransactionPendingRefunds: related,
		}
	} else {
		o.R.WithdrawTransactionPendingRefunds = append(o.R.WithdrawTransactionPendingRefunds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pendingRefundR{
				WithdrawTransaction: o,
			}
		} else {
			rel.R.WithdrawTransaction = o
		}
	}
	return nil
}

// SetWithdrawTransactionPendingRefunds removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WithdrawTransaction's WithdrawTransactionPendingRefunds accordingly.
// Replaces o.R.WithdrawTransactionPendingRefunds with related.
// Sets related.R.WithdrawTransaction's WithdrawTransactionPendingRefunds accordingly.
func (o *Transaction) SetWithdrawTransactionPendingRefunds(exec boil.Executor, insert bool, related ...*PendingRefund) error {
	query := "update \"pending_refund\" set \"withdraw_transaction_id\" = null where \"withdraw_transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WithdrawTransactionPendingRefunds {
			queries.SetScanner(&rel.WithdrawTransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WithdrawTransaction = nil
		}

		o.R.WithdrawTransactionPendingRefunds = nil
	}
	return o.AddWithdrawTransactionPendingRefunds(exec, insert, related...)
}

// RemoveWithdrawTransactionPendingRefunds relationships from objects passed in.
// Removes related items from R.WithdrawTransactionPendingRefunds (uses pointer comparison, removal does not keep order)
// Sets related.R.WithdrawTransaction.
func (o *Transaction) RemoveWithdrawTransactionPendingRefunds(exec boil.Executor, related ...*PendingRefund) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WithdrawTransactionID, nil)
		if rel.R != nil {
			rel.R.WithdrawTransaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("withdraw_transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WithdrawTransactionPendingRefunds {
			if rel != ri {
				continue
			}

			ln := len(o.R.WithdrawTransactionPendingRefunds)
			if ln > 1 && i < ln-1 {
				o.R.WithdrawTransactionPendingRefunds[i] = o.R.WithdrawTransactionPendingRefunds[ln-1]
			}
			o.R.WithdrawTransactionPendingRefunds = o.R.WithdrawTransactionPendingRefunds[:ln-1]
			break
		}
	}

	return nil
}

// AddRelatedTransactionTransactions adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.RelatedTransactionTransactions.
// Sets related.R.RelatedTransaction appropriately.
func (o *Transaction) AddRelatedTransactionTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedTransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedTransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			RelatedTransactionTransactions: related,
		}
	} else {
		o.R.RelatedTransactionTransactions = append(o.R.RelatedTransactionTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				RelatedTransaction: o,
			}
		} else {
			rel.R.RelatedTransaction = o
		}
	}
	return nil
}

// SetRelatedTransactionTransactions removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedTransaction's RelatedTransactionTransactions accordingly.
// Replaces o.R.RelatedTransactionTransactions with related.
// Sets related.R.RelatedTransaction's RelatedTransactionTransactions accordingly.
func (o *Transaction) SetRelatedTransactionTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"related_transaction_id\" = null where \"related_transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedTransactionTransactions {
			queries.SetScanner(&rel.RelatedTransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedTransaction = nil
		}

		o.R.RelatedTransactionTransactions = nil
	}
	return o.AddRelatedTransactionTransactions(exec, insert, related...)
}

// RemoveRelatedTransactionTransactions relationships from objects passed in.
// Removes related items from R.RelatedTransactionTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedTransaction.
func (o *Transaction) RemoveRelatedTransactionTransactions(exec boil.Executor, related ...*Transaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedTransactionID, nil)
		if rel.R != nil {
			rel.R.RelatedTransaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedTransactionTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedTransactionTransactions)
			if ln > 1 && i < ln-1 {
				o.R.RelatedTransactionTransactions[i] = o.R.RelatedTransactionTransactions[ln-1]
			}
			o.R.RelatedTransactionTransactions = o.R.RelatedTransactionTransactions[:ln-1]
			break
		}
	}

	return nil
}

// Transactions retrieves all the records using an executor.
func Transactions(mods ...qm.QueryMod) transactionQuery {
	mods = append(mods, qm.From("\"transactions\""))
	return transactionQuery{NewQuery(mods...)}
}

// FindTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransaction(exec boil.Executor, iD string, selectCols ...string) (*Transaction, error) {
	transactionObj := &Transaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, transactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from transactions")
	}

	if err = transactionObj.doAfterSelectHooks(exec); err != nil {
		return transactionObj, err
	}

	return transactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no transactions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionInsertCacheMut.RLock()
	cache, cached := transactionInsertCache[key]
	transactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into transactions")
	}

	if !cached {
		transactionInsertCacheMut.Lock()
		transactionInsertCache[key] = cache
		transactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Transaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionUpdateCacheMut.RLock()
	cache, cached := transactionUpdateCache[key]
	transactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, append(wl, transactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for transactions")
	}

	if !cached {
		transactionUpdateCacheMut.Lock()
		transactionUpdateCache[key] = cache
		transactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in transaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all transaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no transactions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionUpsertCacheMut.RLock()
	cache, cached := transactionUpsertCache[key]
	transactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert transactions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionPrimaryKeyColumns))
			copy(conflict, transactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transactions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert transactions")
	}

	if !cached {
		transactionUpsertCacheMut.Lock()
		transactionUpsertCache[key] = cache
		transactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Transaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Transaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionPrimaryKeyMapping)
	sql := "DELETE FROM \"transactions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for transactions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no transactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from transaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for transactions")
	}

	if len(transactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transaction) Reload(exec boil.Executor) error {
	ret, err := FindTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transactions\".* FROM \"transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TransactionSlice")
	}

	*o = slice

	return nil
}

// TransactionExists checks if the Transaction row exists.
func TransactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transactions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if transactions exists")
	}

	return exists, nil
}
