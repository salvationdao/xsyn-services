// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pending1155Rollback is an object representing the database table.
type Pending1155Rollback struct {
	ID               string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           string    `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AssetID          string    `boiler:"asset_id" boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	Count            int       `boiler:"count" boil:"count" json:"count" toml:"count" yaml:"count"`
	IsRefunded       bool      `boiler:"is_refunded" boil:"is_refunded" json:"is_refunded" toml:"is_refunded" yaml:"is_refunded"`
	RefundedAt       time.Time `boiler:"refunded_at" boil:"refunded_at" json:"refunded_at" toml:"refunded_at" yaml:"refunded_at"`
	RefundCanceledAt null.Time `boiler:"refund_canceled_at" boil:"refund_canceled_at" json:"refund_canceled_at,omitempty" toml:"refund_canceled_at" yaml:"refund_canceled_at,omitempty"`
	TXHash           string    `boiler:"tx_hash" boil:"tx_hash" json:"tx_hash" toml:"tx_hash" yaml:"tx_hash"`
	CreatedAt        time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt        null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *pending1155RollbackR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L pending1155RollbackL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Pending1155RollbackColumns = struct {
	ID               string
	UserID           string
	AssetID          string
	Count            string
	IsRefunded       string
	RefundedAt       string
	RefundCanceledAt string
	TXHash           string
	CreatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	AssetID:          "asset_id",
	Count:            "count",
	IsRefunded:       "is_refunded",
	RefundedAt:       "refunded_at",
	RefundCanceledAt: "refund_canceled_at",
	TXHash:           "tx_hash",
	CreatedAt:        "created_at",
	DeletedAt:        "deleted_at",
}

var Pending1155RollbackTableColumns = struct {
	ID               string
	UserID           string
	AssetID          string
	Count            string
	IsRefunded       string
	RefundedAt       string
	RefundCanceledAt string
	TXHash           string
	CreatedAt        string
	DeletedAt        string
}{
	ID:               "pending_1155_rollback.id",
	UserID:           "pending_1155_rollback.user_id",
	AssetID:          "pending_1155_rollback.asset_id",
	Count:            "pending_1155_rollback.count",
	IsRefunded:       "pending_1155_rollback.is_refunded",
	RefundedAt:       "pending_1155_rollback.refunded_at",
	RefundCanceledAt: "pending_1155_rollback.refund_canceled_at",
	TXHash:           "pending_1155_rollback.tx_hash",
	CreatedAt:        "pending_1155_rollback.created_at",
	DeletedAt:        "pending_1155_rollback.deleted_at",
}

// Generated where

var Pending1155RollbackWhere = struct {
	ID               whereHelperstring
	UserID           whereHelperstring
	AssetID          whereHelperstring
	Count            whereHelperint
	IsRefunded       whereHelperbool
	RefundedAt       whereHelpertime_Time
	RefundCanceledAt whereHelpernull_Time
	TXHash           whereHelperstring
	CreatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"pending_1155_rollback\".\"id\""},
	UserID:           whereHelperstring{field: "\"pending_1155_rollback\".\"user_id\""},
	AssetID:          whereHelperstring{field: "\"pending_1155_rollback\".\"asset_id\""},
	Count:            whereHelperint{field: "\"pending_1155_rollback\".\"count\""},
	IsRefunded:       whereHelperbool{field: "\"pending_1155_rollback\".\"is_refunded\""},
	RefundedAt:       whereHelpertime_Time{field: "\"pending_1155_rollback\".\"refunded_at\""},
	RefundCanceledAt: whereHelpernull_Time{field: "\"pending_1155_rollback\".\"refund_canceled_at\""},
	TXHash:           whereHelperstring{field: "\"pending_1155_rollback\".\"tx_hash\""},
	CreatedAt:        whereHelpertime_Time{field: "\"pending_1155_rollback\".\"created_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"pending_1155_rollback\".\"deleted_at\""},
}

// Pending1155RollbackRels is where relationship names are stored.
var Pending1155RollbackRels = struct {
	Asset string
	User  string
}{
	Asset: "Asset",
	User:  "User",
}

// pending1155RollbackR is where relationships are stored.
type pending1155RollbackR struct {
	Asset *UserAssets1155 `boiler:"Asset" boil:"Asset" json:"Asset" toml:"Asset" yaml:"Asset"`
	User  *User           `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*pending1155RollbackR) NewStruct() *pending1155RollbackR {
	return &pending1155RollbackR{}
}

// pending1155RollbackL is where Load methods for each relationship are stored.
type pending1155RollbackL struct{}

var (
	pending1155RollbackAllColumns            = []string{"id", "user_id", "asset_id", "count", "is_refunded", "refunded_at", "refund_canceled_at", "tx_hash", "created_at", "deleted_at"}
	pending1155RollbackColumnsWithoutDefault = []string{"user_id", "asset_id", "refunded_at", "refund_canceled_at", "deleted_at"}
	pending1155RollbackColumnsWithDefault    = []string{"id", "count", "is_refunded", "tx_hash", "created_at"}
	pending1155RollbackPrimaryKeyColumns     = []string{"id"}
)

type (
	// Pending1155RollbackSlice is an alias for a slice of pointers to Pending1155Rollback.
	// This should almost always be used instead of []Pending1155Rollback.
	Pending1155RollbackSlice []*Pending1155Rollback
	// Pending1155RollbackHook is the signature for custom Pending1155Rollback hook methods
	Pending1155RollbackHook func(boil.Executor, *Pending1155Rollback) error

	pending1155RollbackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pending1155RollbackType                 = reflect.TypeOf(&Pending1155Rollback{})
	pending1155RollbackMapping              = queries.MakeStructMapping(pending1155RollbackType)
	pending1155RollbackPrimaryKeyMapping, _ = queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, pending1155RollbackPrimaryKeyColumns)
	pending1155RollbackInsertCacheMut       sync.RWMutex
	pending1155RollbackInsertCache          = make(map[string]insertCache)
	pending1155RollbackUpdateCacheMut       sync.RWMutex
	pending1155RollbackUpdateCache          = make(map[string]updateCache)
	pending1155RollbackUpsertCacheMut       sync.RWMutex
	pending1155RollbackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pending1155RollbackBeforeInsertHooks []Pending1155RollbackHook
var pending1155RollbackBeforeUpdateHooks []Pending1155RollbackHook
var pending1155RollbackBeforeDeleteHooks []Pending1155RollbackHook
var pending1155RollbackBeforeUpsertHooks []Pending1155RollbackHook

var pending1155RollbackAfterInsertHooks []Pending1155RollbackHook
var pending1155RollbackAfterSelectHooks []Pending1155RollbackHook
var pending1155RollbackAfterUpdateHooks []Pending1155RollbackHook
var pending1155RollbackAfterDeleteHooks []Pending1155RollbackHook
var pending1155RollbackAfterUpsertHooks []Pending1155RollbackHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pending1155Rollback) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pending1155Rollback) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pending1155Rollback) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pending1155Rollback) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pending1155Rollback) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pending1155Rollback) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pending1155Rollback) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pending1155Rollback) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pending1155Rollback) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pending1155RollbackAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPending1155RollbackHook registers your hook function for all future operations.
func AddPending1155RollbackHook(hookPoint boil.HookPoint, pending1155RollbackHook Pending1155RollbackHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pending1155RollbackBeforeInsertHooks = append(pending1155RollbackBeforeInsertHooks, pending1155RollbackHook)
	case boil.BeforeUpdateHook:
		pending1155RollbackBeforeUpdateHooks = append(pending1155RollbackBeforeUpdateHooks, pending1155RollbackHook)
	case boil.BeforeDeleteHook:
		pending1155RollbackBeforeDeleteHooks = append(pending1155RollbackBeforeDeleteHooks, pending1155RollbackHook)
	case boil.BeforeUpsertHook:
		pending1155RollbackBeforeUpsertHooks = append(pending1155RollbackBeforeUpsertHooks, pending1155RollbackHook)
	case boil.AfterInsertHook:
		pending1155RollbackAfterInsertHooks = append(pending1155RollbackAfterInsertHooks, pending1155RollbackHook)
	case boil.AfterSelectHook:
		pending1155RollbackAfterSelectHooks = append(pending1155RollbackAfterSelectHooks, pending1155RollbackHook)
	case boil.AfterUpdateHook:
		pending1155RollbackAfterUpdateHooks = append(pending1155RollbackAfterUpdateHooks, pending1155RollbackHook)
	case boil.AfterDeleteHook:
		pending1155RollbackAfterDeleteHooks = append(pending1155RollbackAfterDeleteHooks, pending1155RollbackHook)
	case boil.AfterUpsertHook:
		pending1155RollbackAfterUpsertHooks = append(pending1155RollbackAfterUpsertHooks, pending1155RollbackHook)
	}
}

// One returns a single pending1155Rollback record from the query.
func (q pending1155RollbackQuery) One(exec boil.Executor) (*Pending1155Rollback, error) {
	o := &Pending1155Rollback{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for pending_1155_rollback")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pending1155Rollback records from the query.
func (q pending1155RollbackQuery) All(exec boil.Executor) (Pending1155RollbackSlice, error) {
	var o []*Pending1155Rollback

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Pending1155Rollback slice")
	}

	if len(pending1155RollbackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pending1155Rollback records in the query.
func (q pending1155RollbackQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count pending_1155_rollback rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pending1155RollbackQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if pending_1155_rollback exists")
	}

	return count > 0, nil
}

// Asset pointed to by the foreign key.
func (o *Pending1155Rollback) Asset(mods ...qm.QueryMod) userAssets1155Query {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssetID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAssets1155S(queryMods...)
	queries.SetFrom(query.Query, "\"user_assets_1155\"")

	return query
}

// User pointed to by the foreign key.
func (o *Pending1155Rollback) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pending1155RollbackL) LoadAsset(e boil.Executor, singular bool, maybePending1155Rollback interface{}, mods queries.Applicator) error {
	var slice []*Pending1155Rollback
	var object *Pending1155Rollback

	if singular {
		object = maybePending1155Rollback.(*Pending1155Rollback)
	} else {
		slice = *maybePending1155Rollback.(*[]*Pending1155Rollback)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pending1155RollbackR{}
		}
		args = append(args, object.AssetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pending1155RollbackR{}
			}

			for _, a := range args {
				if a == obj.AssetID {
					continue Outer
				}
			}

			args = append(args, obj.AssetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_assets_1155`),
		qm.WhereIn(`user_assets_1155.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAssets1155")
	}

	var resultSlice []*UserAssets1155
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAssets1155")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_assets_1155")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_assets_1155")
	}

	if len(pending1155RollbackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Asset = foreign
		if foreign.R == nil {
			foreign.R = &userAssets1155R{}
		}
		foreign.R.AssetPending1155Rollbacks = append(foreign.R.AssetPending1155Rollbacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssetID == foreign.ID {
				local.R.Asset = foreign
				if foreign.R == nil {
					foreign.R = &userAssets1155R{}
				}
				foreign.R.AssetPending1155Rollbacks = append(foreign.R.AssetPending1155Rollbacks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pending1155RollbackL) LoadUser(e boil.Executor, singular bool, maybePending1155Rollback interface{}, mods queries.Applicator) error {
	var slice []*Pending1155Rollback
	var object *Pending1155Rollback

	if singular {
		object = maybePending1155Rollback.(*Pending1155Rollback)
	} else {
		slice = *maybePending1155Rollback.(*[]*Pending1155Rollback)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pending1155RollbackR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pending1155RollbackR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(pending1155RollbackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Pending1155Rollbacks = append(foreign.R.Pending1155Rollbacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Pending1155Rollbacks = append(foreign.R.Pending1155Rollbacks, local)
				break
			}
		}
	}

	return nil
}

// SetAsset of the pending1155Rollback to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.AssetPending1155Rollbacks.
func (o *Pending1155Rollback) SetAsset(exec boil.Executor, insert bool, related *UserAssets1155) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pending_1155_rollback\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asset_id"}),
		strmangle.WhereClause("\"", "\"", 2, pending1155RollbackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssetID = related.ID
	if o.R == nil {
		o.R = &pending1155RollbackR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &userAssets1155R{
			AssetPending1155Rollbacks: Pending1155RollbackSlice{o},
		}
	} else {
		related.R.AssetPending1155Rollbacks = append(related.R.AssetPending1155Rollbacks, o)
	}

	return nil
}

// SetUser of the pending1155Rollback to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Pending1155Rollbacks.
func (o *Pending1155Rollback) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pending_1155_rollback\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, pending1155RollbackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &pending1155RollbackR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Pending1155Rollbacks: Pending1155RollbackSlice{o},
		}
	} else {
		related.R.Pending1155Rollbacks = append(related.R.Pending1155Rollbacks, o)
	}

	return nil
}

// Pending1155Rollbacks retrieves all the records using an executor.
func Pending1155Rollbacks(mods ...qm.QueryMod) pending1155RollbackQuery {
	mods = append(mods, qm.From("\"pending_1155_rollback\""), qmhelper.WhereIsNull("\"pending_1155_rollback\".\"deleted_at\""))
	return pending1155RollbackQuery{NewQuery(mods...)}
}

// FindPending1155Rollback retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPending1155Rollback(exec boil.Executor, iD string, selectCols ...string) (*Pending1155Rollback, error) {
	pending1155RollbackObj := &Pending1155Rollback{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pending_1155_rollback\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, pending1155RollbackObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from pending_1155_rollback")
	}

	if err = pending1155RollbackObj.doAfterSelectHooks(exec); err != nil {
		return pending1155RollbackObj, err
	}

	return pending1155RollbackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pending1155Rollback) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no pending_1155_rollback provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pending1155RollbackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pending1155RollbackInsertCacheMut.RLock()
	cache, cached := pending1155RollbackInsertCache[key]
	pending1155RollbackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pending1155RollbackAllColumns,
			pending1155RollbackColumnsWithDefault,
			pending1155RollbackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pending_1155_rollback\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pending_1155_rollback\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into pending_1155_rollback")
	}

	if !cached {
		pending1155RollbackInsertCacheMut.Lock()
		pending1155RollbackInsertCache[key] = cache
		pending1155RollbackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Pending1155Rollback.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pending1155Rollback) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pending1155RollbackUpdateCacheMut.RLock()
	cache, cached := pending1155RollbackUpdateCache[key]
	pending1155RollbackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pending1155RollbackAllColumns,
			pending1155RollbackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update pending_1155_rollback, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pending_1155_rollback\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pending1155RollbackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, append(wl, pending1155RollbackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update pending_1155_rollback row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for pending_1155_rollback")
	}

	if !cached {
		pending1155RollbackUpdateCacheMut.Lock()
		pending1155RollbackUpdateCache[key] = cache
		pending1155RollbackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pending1155RollbackQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for pending_1155_rollback")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for pending_1155_rollback")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Pending1155RollbackSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pending1155RollbackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pending_1155_rollback\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pending1155RollbackPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in pending1155Rollback slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all pending1155Rollback")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pending1155Rollback) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no pending_1155_rollback provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pending1155RollbackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pending1155RollbackUpsertCacheMut.RLock()
	cache, cached := pending1155RollbackUpsertCache[key]
	pending1155RollbackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pending1155RollbackAllColumns,
			pending1155RollbackColumnsWithDefault,
			pending1155RollbackColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pending1155RollbackAllColumns,
			pending1155RollbackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert pending_1155_rollback, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pending1155RollbackPrimaryKeyColumns))
			copy(conflict, pending1155RollbackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pending_1155_rollback\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert pending_1155_rollback")
	}

	if !cached {
		pending1155RollbackUpsertCacheMut.Lock()
		pending1155RollbackUpsertCache[key] = cache
		pending1155RollbackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Pending1155Rollback record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pending1155Rollback) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Pending1155Rollback provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pending1155RollbackPrimaryKeyMapping)
		sql = "DELETE FROM \"pending_1155_rollback\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"pending_1155_rollback\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(pending1155RollbackType, pending1155RollbackMapping, append(wl, pending1155RollbackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from pending_1155_rollback")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for pending_1155_rollback")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pending1155RollbackQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no pending1155RollbackQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from pending_1155_rollback")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for pending_1155_rollback")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Pending1155RollbackSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pending1155RollbackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pending1155RollbackPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"pending_1155_rollback\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pending1155RollbackPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pending1155RollbackPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"pending_1155_rollback\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, pending1155RollbackPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from pending1155Rollback slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for pending_1155_rollback")
	}

	if len(pending1155RollbackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pending1155Rollback) Reload(exec boil.Executor) error {
	ret, err := FindPending1155Rollback(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Pending1155RollbackSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Pending1155RollbackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pending1155RollbackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pending_1155_rollback\".* FROM \"pending_1155_rollback\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pending1155RollbackPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in Pending1155RollbackSlice")
	}

	*o = slice

	return nil
}

// Pending1155RollbackExists checks if the Pending1155Rollback row exists.
func Pending1155RollbackExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pending_1155_rollback\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if pending_1155_rollback exists")
	}

	return exists, nil
}
