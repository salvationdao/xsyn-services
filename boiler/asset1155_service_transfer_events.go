// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Asset1155ServiceTransferEvent is an object representing the database table.
type Asset1155ServiceTransferEvent struct {
	ID              int64       `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	User1155AssetID string      `boiler:"user1155_asset_id" boil:"user1155_asset_id" json:"user1155_asset_id" toml:"user1155_asset_id" yaml:"user1155_asset_id"`
	UserID          string      `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	InitiatedFrom   string      `boiler:"initiated_from" boil:"initiated_from" json:"initiated_from" toml:"initiated_from" yaml:"initiated_from"`
	Amount          int         `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	FromService     null.String `boiler:"from_service" boil:"from_service" json:"from_service,omitempty" toml:"from_service" yaml:"from_service,omitempty"`
	ToService       null.String `boiler:"to_service" boil:"to_service" json:"to_service,omitempty" toml:"to_service" yaml:"to_service,omitempty"`
	TransferTXID    string      `boiler:"transfer_tx_id" boil:"transfer_tx_id" json:"transfer_tx_id" toml:"transfer_tx_id" yaml:"transfer_tx_id"`
	TransferredAt   time.Time   `boiler:"transferred_at" boil:"transferred_at" json:"transferred_at" toml:"transferred_at" yaml:"transferred_at"`

	R *asset1155ServiceTransferEventR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L asset1155ServiceTransferEventL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Asset1155ServiceTransferEventColumns = struct {
	ID              string
	User1155AssetID string
	UserID          string
	InitiatedFrom   string
	Amount          string
	FromService     string
	ToService       string
	TransferTXID    string
	TransferredAt   string
}{
	ID:              "id",
	User1155AssetID: "user1155_asset_id",
	UserID:          "user_id",
	InitiatedFrom:   "initiated_from",
	Amount:          "amount",
	FromService:     "from_service",
	ToService:       "to_service",
	TransferTXID:    "transfer_tx_id",
	TransferredAt:   "transferred_at",
}

var Asset1155ServiceTransferEventTableColumns = struct {
	ID              string
	User1155AssetID string
	UserID          string
	InitiatedFrom   string
	Amount          string
	FromService     string
	ToService       string
	TransferTXID    string
	TransferredAt   string
}{
	ID:              "asset1155_service_transfer_events.id",
	User1155AssetID: "asset1155_service_transfer_events.user1155_asset_id",
	UserID:          "asset1155_service_transfer_events.user_id",
	InitiatedFrom:   "asset1155_service_transfer_events.initiated_from",
	Amount:          "asset1155_service_transfer_events.amount",
	FromService:     "asset1155_service_transfer_events.from_service",
	ToService:       "asset1155_service_transfer_events.to_service",
	TransferTXID:    "asset1155_service_transfer_events.transfer_tx_id",
	TransferredAt:   "asset1155_service_transfer_events.transferred_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var Asset1155ServiceTransferEventWhere = struct {
	ID              whereHelperint64
	User1155AssetID whereHelperstring
	UserID          whereHelperstring
	InitiatedFrom   whereHelperstring
	Amount          whereHelperint
	FromService     whereHelpernull_String
	ToService       whereHelpernull_String
	TransferTXID    whereHelperstring
	TransferredAt   whereHelpertime_Time
}{
	ID:              whereHelperint64{field: "\"asset1155_service_transfer_events\".\"id\""},
	User1155AssetID: whereHelperstring{field: "\"asset1155_service_transfer_events\".\"user1155_asset_id\""},
	UserID:          whereHelperstring{field: "\"asset1155_service_transfer_events\".\"user_id\""},
	InitiatedFrom:   whereHelperstring{field: "\"asset1155_service_transfer_events\".\"initiated_from\""},
	Amount:          whereHelperint{field: "\"asset1155_service_transfer_events\".\"amount\""},
	FromService:     whereHelpernull_String{field: "\"asset1155_service_transfer_events\".\"from_service\""},
	ToService:       whereHelpernull_String{field: "\"asset1155_service_transfer_events\".\"to_service\""},
	TransferTXID:    whereHelperstring{field: "\"asset1155_service_transfer_events\".\"transfer_tx_id\""},
	TransferredAt:   whereHelpertime_Time{field: "\"asset1155_service_transfer_events\".\"transferred_at\""},
}

// Asset1155ServiceTransferEventRels is where relationship names are stored.
var Asset1155ServiceTransferEventRels = struct {
	FromServiceUser string
	ToServiceUser   string
	TransferTX      string
	User1155Asset   string
	User            string
}{
	FromServiceUser: "FromServiceUser",
	ToServiceUser:   "ToServiceUser",
	TransferTX:      "TransferTX",
	User1155Asset:   "User1155Asset",
	User:            "User",
}

// asset1155ServiceTransferEventR is where relationships are stored.
type asset1155ServiceTransferEventR struct {
	FromServiceUser *User           `boiler:"FromServiceUser" boil:"FromServiceUser" json:"FromServiceUser" toml:"FromServiceUser" yaml:"FromServiceUser"`
	ToServiceUser   *User           `boiler:"ToServiceUser" boil:"ToServiceUser" json:"ToServiceUser" toml:"ToServiceUser" yaml:"ToServiceUser"`
	TransferTX      *Transaction    `boiler:"TransferTX" boil:"TransferTX" json:"TransferTX" toml:"TransferTX" yaml:"TransferTX"`
	User1155Asset   *UserAssets1155 `boiler:"User1155Asset" boil:"User1155Asset" json:"User1155Asset" toml:"User1155Asset" yaml:"User1155Asset"`
	User            *User           `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*asset1155ServiceTransferEventR) NewStruct() *asset1155ServiceTransferEventR {
	return &asset1155ServiceTransferEventR{}
}

// asset1155ServiceTransferEventL is where Load methods for each relationship are stored.
type asset1155ServiceTransferEventL struct{}

var (
	asset1155ServiceTransferEventAllColumns            = []string{"id", "user1155_asset_id", "user_id", "initiated_from", "amount", "from_service", "to_service", "transfer_tx_id", "transferred_at"}
	asset1155ServiceTransferEventColumnsWithoutDefault = []string{"user1155_asset_id", "user_id", "amount", "transfer_tx_id"}
	asset1155ServiceTransferEventColumnsWithDefault    = []string{"id", "initiated_from", "from_service", "to_service", "transferred_at"}
	asset1155ServiceTransferEventPrimaryKeyColumns     = []string{"id"}
	asset1155ServiceTransferEventGeneratedColumns      = []string{}
)

type (
	// Asset1155ServiceTransferEventSlice is an alias for a slice of pointers to Asset1155ServiceTransferEvent.
	// This should almost always be used instead of []Asset1155ServiceTransferEvent.
	Asset1155ServiceTransferEventSlice []*Asset1155ServiceTransferEvent
	// Asset1155ServiceTransferEventHook is the signature for custom Asset1155ServiceTransferEvent hook methods
	Asset1155ServiceTransferEventHook func(boil.Executor, *Asset1155ServiceTransferEvent) error

	asset1155ServiceTransferEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	asset1155ServiceTransferEventType                 = reflect.TypeOf(&Asset1155ServiceTransferEvent{})
	asset1155ServiceTransferEventMapping              = queries.MakeStructMapping(asset1155ServiceTransferEventType)
	asset1155ServiceTransferEventPrimaryKeyMapping, _ = queries.BindMapping(asset1155ServiceTransferEventType, asset1155ServiceTransferEventMapping, asset1155ServiceTransferEventPrimaryKeyColumns)
	asset1155ServiceTransferEventInsertCacheMut       sync.RWMutex
	asset1155ServiceTransferEventInsertCache          = make(map[string]insertCache)
	asset1155ServiceTransferEventUpdateCacheMut       sync.RWMutex
	asset1155ServiceTransferEventUpdateCache          = make(map[string]updateCache)
	asset1155ServiceTransferEventUpsertCacheMut       sync.RWMutex
	asset1155ServiceTransferEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var asset1155ServiceTransferEventAfterSelectHooks []Asset1155ServiceTransferEventHook

var asset1155ServiceTransferEventBeforeInsertHooks []Asset1155ServiceTransferEventHook
var asset1155ServiceTransferEventAfterInsertHooks []Asset1155ServiceTransferEventHook

var asset1155ServiceTransferEventBeforeUpdateHooks []Asset1155ServiceTransferEventHook
var asset1155ServiceTransferEventAfterUpdateHooks []Asset1155ServiceTransferEventHook

var asset1155ServiceTransferEventBeforeDeleteHooks []Asset1155ServiceTransferEventHook
var asset1155ServiceTransferEventAfterDeleteHooks []Asset1155ServiceTransferEventHook

var asset1155ServiceTransferEventBeforeUpsertHooks []Asset1155ServiceTransferEventHook
var asset1155ServiceTransferEventAfterUpsertHooks []Asset1155ServiceTransferEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Asset1155ServiceTransferEvent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Asset1155ServiceTransferEvent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Asset1155ServiceTransferEvent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Asset1155ServiceTransferEvent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Asset1155ServiceTransferEvent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Asset1155ServiceTransferEvent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Asset1155ServiceTransferEvent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Asset1155ServiceTransferEvent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Asset1155ServiceTransferEvent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range asset1155ServiceTransferEventAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAsset1155ServiceTransferEventHook registers your hook function for all future operations.
func AddAsset1155ServiceTransferEventHook(hookPoint boil.HookPoint, asset1155ServiceTransferEventHook Asset1155ServiceTransferEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		asset1155ServiceTransferEventAfterSelectHooks = append(asset1155ServiceTransferEventAfterSelectHooks, asset1155ServiceTransferEventHook)
	case boil.BeforeInsertHook:
		asset1155ServiceTransferEventBeforeInsertHooks = append(asset1155ServiceTransferEventBeforeInsertHooks, asset1155ServiceTransferEventHook)
	case boil.AfterInsertHook:
		asset1155ServiceTransferEventAfterInsertHooks = append(asset1155ServiceTransferEventAfterInsertHooks, asset1155ServiceTransferEventHook)
	case boil.BeforeUpdateHook:
		asset1155ServiceTransferEventBeforeUpdateHooks = append(asset1155ServiceTransferEventBeforeUpdateHooks, asset1155ServiceTransferEventHook)
	case boil.AfterUpdateHook:
		asset1155ServiceTransferEventAfterUpdateHooks = append(asset1155ServiceTransferEventAfterUpdateHooks, asset1155ServiceTransferEventHook)
	case boil.BeforeDeleteHook:
		asset1155ServiceTransferEventBeforeDeleteHooks = append(asset1155ServiceTransferEventBeforeDeleteHooks, asset1155ServiceTransferEventHook)
	case boil.AfterDeleteHook:
		asset1155ServiceTransferEventAfterDeleteHooks = append(asset1155ServiceTransferEventAfterDeleteHooks, asset1155ServiceTransferEventHook)
	case boil.BeforeUpsertHook:
		asset1155ServiceTransferEventBeforeUpsertHooks = append(asset1155ServiceTransferEventBeforeUpsertHooks, asset1155ServiceTransferEventHook)
	case boil.AfterUpsertHook:
		asset1155ServiceTransferEventAfterUpsertHooks = append(asset1155ServiceTransferEventAfterUpsertHooks, asset1155ServiceTransferEventHook)
	}
}

// One returns a single asset1155ServiceTransferEvent record from the query.
func (q asset1155ServiceTransferEventQuery) One(exec boil.Executor) (*Asset1155ServiceTransferEvent, error) {
	o := &Asset1155ServiceTransferEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for asset1155_service_transfer_events")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Asset1155ServiceTransferEvent records from the query.
func (q asset1155ServiceTransferEventQuery) All(exec boil.Executor) (Asset1155ServiceTransferEventSlice, error) {
	var o []*Asset1155ServiceTransferEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Asset1155ServiceTransferEvent slice")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Asset1155ServiceTransferEvent records in the query.
func (q asset1155ServiceTransferEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count asset1155_service_transfer_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q asset1155ServiceTransferEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if asset1155_service_transfer_events exists")
	}

	return count > 0, nil
}

// FromServiceUser pointed to by the foreign key.
func (o *Asset1155ServiceTransferEvent) FromServiceUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromService),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ToServiceUser pointed to by the foreign key.
func (o *Asset1155ServiceTransferEvent) ToServiceUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToService),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// TransferTX pointed to by the foreign key.
func (o *Asset1155ServiceTransferEvent) TransferTX(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransferTXID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// User1155Asset pointed to by the foreign key.
func (o *Asset1155ServiceTransferEvent) User1155Asset(mods ...qm.QueryMod) userAssets1155Query {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.User1155AssetID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAssets1155S(queryMods...)
	queries.SetFrom(query.Query, "\"user_assets_1155\"")

	return query
}

// User pointed to by the foreign key.
func (o *Asset1155ServiceTransferEvent) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadFromServiceUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (asset1155ServiceTransferEventL) LoadFromServiceUser(e boil.Executor, singular bool, maybeAsset1155ServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*Asset1155ServiceTransferEvent
	var object *Asset1155ServiceTransferEvent

	if singular {
		object = maybeAsset1155ServiceTransferEvent.(*Asset1155ServiceTransferEvent)
	} else {
		slice = *maybeAsset1155ServiceTransferEvent.(*[]*Asset1155ServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asset1155ServiceTransferEventR{}
		}
		if !queries.IsNil(object.FromService) {
			args = append(args, object.FromService)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asset1155ServiceTransferEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FromService) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FromService) {
				args = append(args, obj.FromService)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromServiceUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FromServiceAsset1155ServiceTransferEvents = append(foreign.R.FromServiceAsset1155ServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FromService, foreign.ID) {
				local.R.FromServiceUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FromServiceAsset1155ServiceTransferEvents = append(foreign.R.FromServiceAsset1155ServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadToServiceUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (asset1155ServiceTransferEventL) LoadToServiceUser(e boil.Executor, singular bool, maybeAsset1155ServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*Asset1155ServiceTransferEvent
	var object *Asset1155ServiceTransferEvent

	if singular {
		object = maybeAsset1155ServiceTransferEvent.(*Asset1155ServiceTransferEvent)
	} else {
		slice = *maybeAsset1155ServiceTransferEvent.(*[]*Asset1155ServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asset1155ServiceTransferEventR{}
		}
		if !queries.IsNil(object.ToService) {
			args = append(args, object.ToService)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asset1155ServiceTransferEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ToService) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ToService) {
				args = append(args, obj.ToService)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToServiceUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ToServiceAsset1155ServiceTransferEvents = append(foreign.R.ToServiceAsset1155ServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ToService, foreign.ID) {
				local.R.ToServiceUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ToServiceAsset1155ServiceTransferEvents = append(foreign.R.ToServiceAsset1155ServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferTX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (asset1155ServiceTransferEventL) LoadTransferTX(e boil.Executor, singular bool, maybeAsset1155ServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*Asset1155ServiceTransferEvent
	var object *Asset1155ServiceTransferEvent

	if singular {
		object = maybeAsset1155ServiceTransferEvent.(*Asset1155ServiceTransferEvent)
	} else {
		slice = *maybeAsset1155ServiceTransferEvent.(*[]*Asset1155ServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asset1155ServiceTransferEventR{}
		}
		args = append(args, object.TransferTXID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asset1155ServiceTransferEventR{}
			}

			for _, a := range args {
				if a == obj.TransferTXID {
					continue Outer
				}
			}

			args = append(args, obj.TransferTXID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransferTX = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransferTXAsset1155ServiceTransferEvents = append(foreign.R.TransferTXAsset1155ServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransferTXID == foreign.ID {
				local.R.TransferTX = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransferTXAsset1155ServiceTransferEvents = append(foreign.R.TransferTXAsset1155ServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser1155Asset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (asset1155ServiceTransferEventL) LoadUser1155Asset(e boil.Executor, singular bool, maybeAsset1155ServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*Asset1155ServiceTransferEvent
	var object *Asset1155ServiceTransferEvent

	if singular {
		object = maybeAsset1155ServiceTransferEvent.(*Asset1155ServiceTransferEvent)
	} else {
		slice = *maybeAsset1155ServiceTransferEvent.(*[]*Asset1155ServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asset1155ServiceTransferEventR{}
		}
		args = append(args, object.User1155AssetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asset1155ServiceTransferEventR{}
			}

			for _, a := range args {
				if a == obj.User1155AssetID {
					continue Outer
				}
			}

			args = append(args, obj.User1155AssetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_assets_1155`),
		qm.WhereIn(`user_assets_1155.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAssets1155")
	}

	var resultSlice []*UserAssets1155
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAssets1155")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_assets_1155")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_assets_1155")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User1155Asset = foreign
		if foreign.R == nil {
			foreign.R = &userAssets1155R{}
		}
		foreign.R.User1155AssetAsset1155ServiceTransferEvents = append(foreign.R.User1155AssetAsset1155ServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.User1155AssetID == foreign.ID {
				local.R.User1155Asset = foreign
				if foreign.R == nil {
					foreign.R = &userAssets1155R{}
				}
				foreign.R.User1155AssetAsset1155ServiceTransferEvents = append(foreign.R.User1155AssetAsset1155ServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (asset1155ServiceTransferEventL) LoadUser(e boil.Executor, singular bool, maybeAsset1155ServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*Asset1155ServiceTransferEvent
	var object *Asset1155ServiceTransferEvent

	if singular {
		object = maybeAsset1155ServiceTransferEvent.(*Asset1155ServiceTransferEvent)
	} else {
		slice = *maybeAsset1155ServiceTransferEvent.(*[]*Asset1155ServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asset1155ServiceTransferEventR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asset1155ServiceTransferEventR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(asset1155ServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Asset1155ServiceTransferEvents = append(foreign.R.Asset1155ServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Asset1155ServiceTransferEvents = append(foreign.R.Asset1155ServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// SetFromServiceUser of the asset1155ServiceTransferEvent to the related item.
// Sets o.R.FromServiceUser to related.
// Adds o to related.R.FromServiceAsset1155ServiceTransferEvents.
func (o *Asset1155ServiceTransferEvent) SetFromServiceUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_service"}),
		strmangle.WhereClause("\"", "\"", 2, asset1155ServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FromService, related.ID)
	if o.R == nil {
		o.R = &asset1155ServiceTransferEventR{
			FromServiceUser: related,
		}
	} else {
		o.R.FromServiceUser = related
	}

	if related.R == nil {
		related.R = &userR{
			FromServiceAsset1155ServiceTransferEvents: Asset1155ServiceTransferEventSlice{o},
		}
	} else {
		related.R.FromServiceAsset1155ServiceTransferEvents = append(related.R.FromServiceAsset1155ServiceTransferEvents, o)
	}

	return nil
}

// RemoveFromServiceUser relationship.
// Sets o.R.FromServiceUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Asset1155ServiceTransferEvent) RemoveFromServiceUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.FromService, nil)
	if _, err = o.Update(exec, boil.Whitelist("from_service")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FromServiceUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FromServiceAsset1155ServiceTransferEvents {
		if queries.Equal(o.FromService, ri.FromService) {
			continue
		}

		ln := len(related.R.FromServiceAsset1155ServiceTransferEvents)
		if ln > 1 && i < ln-1 {
			related.R.FromServiceAsset1155ServiceTransferEvents[i] = related.R.FromServiceAsset1155ServiceTransferEvents[ln-1]
		}
		related.R.FromServiceAsset1155ServiceTransferEvents = related.R.FromServiceAsset1155ServiceTransferEvents[:ln-1]
		break
	}
	return nil
}

// SetToServiceUser of the asset1155ServiceTransferEvent to the related item.
// Sets o.R.ToServiceUser to related.
// Adds o to related.R.ToServiceAsset1155ServiceTransferEvents.
func (o *Asset1155ServiceTransferEvent) SetToServiceUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_service"}),
		strmangle.WhereClause("\"", "\"", 2, asset1155ServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ToService, related.ID)
	if o.R == nil {
		o.R = &asset1155ServiceTransferEventR{
			ToServiceUser: related,
		}
	} else {
		o.R.ToServiceUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ToServiceAsset1155ServiceTransferEvents: Asset1155ServiceTransferEventSlice{o},
		}
	} else {
		related.R.ToServiceAsset1155ServiceTransferEvents = append(related.R.ToServiceAsset1155ServiceTransferEvents, o)
	}

	return nil
}

// RemoveToServiceUser relationship.
// Sets o.R.ToServiceUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Asset1155ServiceTransferEvent) RemoveToServiceUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.ToService, nil)
	if _, err = o.Update(exec, boil.Whitelist("to_service")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ToServiceUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ToServiceAsset1155ServiceTransferEvents {
		if queries.Equal(o.ToService, ri.ToService) {
			continue
		}

		ln := len(related.R.ToServiceAsset1155ServiceTransferEvents)
		if ln > 1 && i < ln-1 {
			related.R.ToServiceAsset1155ServiceTransferEvents[i] = related.R.ToServiceAsset1155ServiceTransferEvents[ln-1]
		}
		related.R.ToServiceAsset1155ServiceTransferEvents = related.R.ToServiceAsset1155ServiceTransferEvents[:ln-1]
		break
	}
	return nil
}

// SetTransferTX of the asset1155ServiceTransferEvent to the related item.
// Sets o.R.TransferTX to related.
// Adds o to related.R.TransferTXAsset1155ServiceTransferEvents.
func (o *Asset1155ServiceTransferEvent) SetTransferTX(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_tx_id"}),
		strmangle.WhereClause("\"", "\"", 2, asset1155ServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransferTXID = related.ID
	if o.R == nil {
		o.R = &asset1155ServiceTransferEventR{
			TransferTX: related,
		}
	} else {
		o.R.TransferTX = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransferTXAsset1155ServiceTransferEvents: Asset1155ServiceTransferEventSlice{o},
		}
	} else {
		related.R.TransferTXAsset1155ServiceTransferEvents = append(related.R.TransferTXAsset1155ServiceTransferEvents, o)
	}

	return nil
}

// SetUser1155Asset of the asset1155ServiceTransferEvent to the related item.
// Sets o.R.User1155Asset to related.
// Adds o to related.R.User1155AssetAsset1155ServiceTransferEvents.
func (o *Asset1155ServiceTransferEvent) SetUser1155Asset(exec boil.Executor, insert bool, related *UserAssets1155) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user1155_asset_id"}),
		strmangle.WhereClause("\"", "\"", 2, asset1155ServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.User1155AssetID = related.ID
	if o.R == nil {
		o.R = &asset1155ServiceTransferEventR{
			User1155Asset: related,
		}
	} else {
		o.R.User1155Asset = related
	}

	if related.R == nil {
		related.R = &userAssets1155R{
			User1155AssetAsset1155ServiceTransferEvents: Asset1155ServiceTransferEventSlice{o},
		}
	} else {
		related.R.User1155AssetAsset1155ServiceTransferEvents = append(related.R.User1155AssetAsset1155ServiceTransferEvents, o)
	}

	return nil
}

// SetUser of the asset1155ServiceTransferEvent to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Asset1155ServiceTransferEvents.
func (o *Asset1155ServiceTransferEvent) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, asset1155ServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &asset1155ServiceTransferEventR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Asset1155ServiceTransferEvents: Asset1155ServiceTransferEventSlice{o},
		}
	} else {
		related.R.Asset1155ServiceTransferEvents = append(related.R.Asset1155ServiceTransferEvents, o)
	}

	return nil
}

// Asset1155ServiceTransferEvents retrieves all the records using an executor.
func Asset1155ServiceTransferEvents(mods ...qm.QueryMod) asset1155ServiceTransferEventQuery {
	mods = append(mods, qm.From("\"asset1155_service_transfer_events\""))
	return asset1155ServiceTransferEventQuery{NewQuery(mods...)}
}

// FindAsset1155ServiceTransferEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAsset1155ServiceTransferEvent(exec boil.Executor, iD int64, selectCols ...string) (*Asset1155ServiceTransferEvent, error) {
	asset1155ServiceTransferEventObj := &Asset1155ServiceTransferEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asset1155_service_transfer_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, asset1155ServiceTransferEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from asset1155_service_transfer_events")
	}

	if err = asset1155ServiceTransferEventObj.doAfterSelectHooks(exec); err != nil {
		return asset1155ServiceTransferEventObj, err
	}

	return asset1155ServiceTransferEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Asset1155ServiceTransferEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no asset1155_service_transfer_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asset1155ServiceTransferEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	asset1155ServiceTransferEventInsertCacheMut.RLock()
	cache, cached := asset1155ServiceTransferEventInsertCache[key]
	asset1155ServiceTransferEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			asset1155ServiceTransferEventAllColumns,
			asset1155ServiceTransferEventColumnsWithDefault,
			asset1155ServiceTransferEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(asset1155ServiceTransferEventType, asset1155ServiceTransferEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(asset1155ServiceTransferEventType, asset1155ServiceTransferEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asset1155_service_transfer_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asset1155_service_transfer_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into asset1155_service_transfer_events")
	}

	if !cached {
		asset1155ServiceTransferEventInsertCacheMut.Lock()
		asset1155ServiceTransferEventInsertCache[key] = cache
		asset1155ServiceTransferEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Asset1155ServiceTransferEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Asset1155ServiceTransferEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	asset1155ServiceTransferEventUpdateCacheMut.RLock()
	cache, cached := asset1155ServiceTransferEventUpdateCache[key]
	asset1155ServiceTransferEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			asset1155ServiceTransferEventAllColumns,
			asset1155ServiceTransferEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update asset1155_service_transfer_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, asset1155ServiceTransferEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(asset1155ServiceTransferEventType, asset1155ServiceTransferEventMapping, append(wl, asset1155ServiceTransferEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update asset1155_service_transfer_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for asset1155_service_transfer_events")
	}

	if !cached {
		asset1155ServiceTransferEventUpdateCacheMut.Lock()
		asset1155ServiceTransferEventUpdateCache[key] = cache
		asset1155ServiceTransferEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q asset1155ServiceTransferEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for asset1155_service_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for asset1155_service_transfer_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Asset1155ServiceTransferEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asset1155ServiceTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asset1155_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, asset1155ServiceTransferEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in asset1155ServiceTransferEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all asset1155ServiceTransferEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Asset1155ServiceTransferEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no asset1155_service_transfer_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asset1155ServiceTransferEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	asset1155ServiceTransferEventUpsertCacheMut.RLock()
	cache, cached := asset1155ServiceTransferEventUpsertCache[key]
	asset1155ServiceTransferEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			asset1155ServiceTransferEventAllColumns,
			asset1155ServiceTransferEventColumnsWithDefault,
			asset1155ServiceTransferEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			asset1155ServiceTransferEventAllColumns,
			asset1155ServiceTransferEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert asset1155_service_transfer_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(asset1155ServiceTransferEventPrimaryKeyColumns))
			copy(conflict, asset1155ServiceTransferEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asset1155_service_transfer_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(asset1155ServiceTransferEventType, asset1155ServiceTransferEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(asset1155ServiceTransferEventType, asset1155ServiceTransferEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert asset1155_service_transfer_events")
	}

	if !cached {
		asset1155ServiceTransferEventUpsertCacheMut.Lock()
		asset1155ServiceTransferEventUpsertCache[key] = cache
		asset1155ServiceTransferEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Asset1155ServiceTransferEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Asset1155ServiceTransferEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Asset1155ServiceTransferEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), asset1155ServiceTransferEventPrimaryKeyMapping)
	sql := "DELETE FROM \"asset1155_service_transfer_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from asset1155_service_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for asset1155_service_transfer_events")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q asset1155ServiceTransferEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no asset1155ServiceTransferEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from asset1155_service_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for asset1155_service_transfer_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Asset1155ServiceTransferEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(asset1155ServiceTransferEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asset1155ServiceTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asset1155_service_transfer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asset1155ServiceTransferEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from asset1155ServiceTransferEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for asset1155_service_transfer_events")
	}

	if len(asset1155ServiceTransferEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Asset1155ServiceTransferEvent) Reload(exec boil.Executor) error {
	ret, err := FindAsset1155ServiceTransferEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Asset1155ServiceTransferEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Asset1155ServiceTransferEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asset1155ServiceTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asset1155_service_transfer_events\".* FROM \"asset1155_service_transfer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asset1155ServiceTransferEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in Asset1155ServiceTransferEventSlice")
	}

	*o = slice

	return nil
}

// Asset1155ServiceTransferEventExists checks if the Asset1155ServiceTransferEvent row exists.
func Asset1155ServiceTransferEventExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asset1155_service_transfer_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if asset1155_service_transfer_events exists")
	}

	return exists, nil
}
