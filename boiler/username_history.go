// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsernameHistory is an object representing the database table.
type UsernameHistory struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      string    `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	OldUsername string    `boiler:"old_username" boil:"old_username" json:"old_username" toml:"old_username" yaml:"old_username"`
	NewUsername string    `boiler:"new_username" boil:"new_username" json:"new_username" toml:"new_username" yaml:"new_username"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *usernameHistoryR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L usernameHistoryL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsernameHistoryColumns = struct {
	ID          string
	UserID      string
	OldUsername string
	NewUsername string
	CreatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	OldUsername: "old_username",
	NewUsername: "new_username",
	CreatedAt:   "created_at",
}

var UsernameHistoryTableColumns = struct {
	ID          string
	UserID      string
	OldUsername string
	NewUsername string
	CreatedAt   string
}{
	ID:          "username_history.id",
	UserID:      "username_history.user_id",
	OldUsername: "username_history.old_username",
	NewUsername: "username_history.new_username",
	CreatedAt:   "username_history.created_at",
}

// Generated where

var UsernameHistoryWhere = struct {
	ID          whereHelperstring
	UserID      whereHelperstring
	OldUsername whereHelperstring
	NewUsername whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"username_history\".\"id\""},
	UserID:      whereHelperstring{field: "\"username_history\".\"user_id\""},
	OldUsername: whereHelperstring{field: "\"username_history\".\"old_username\""},
	NewUsername: whereHelperstring{field: "\"username_history\".\"new_username\""},
	CreatedAt:   whereHelpertime_Time{field: "\"username_history\".\"created_at\""},
}

// UsernameHistoryRels is where relationship names are stored.
var UsernameHistoryRels = struct {
	User string
}{
	User: "User",
}

// usernameHistoryR is where relationships are stored.
type usernameHistoryR struct {
	User *User `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*usernameHistoryR) NewStruct() *usernameHistoryR {
	return &usernameHistoryR{}
}

// usernameHistoryL is where Load methods for each relationship are stored.
type usernameHistoryL struct{}

var (
	usernameHistoryAllColumns            = []string{"id", "user_id", "old_username", "new_username", "created_at"}
	usernameHistoryColumnsWithoutDefault = []string{"user_id", "old_username", "new_username"}
	usernameHistoryColumnsWithDefault    = []string{"id", "created_at"}
	usernameHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// UsernameHistorySlice is an alias for a slice of pointers to UsernameHistory.
	// This should almost always be used instead of []UsernameHistory.
	UsernameHistorySlice []*UsernameHistory
	// UsernameHistoryHook is the signature for custom UsernameHistory hook methods
	UsernameHistoryHook func(boil.Executor, *UsernameHistory) error

	usernameHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usernameHistoryType                 = reflect.TypeOf(&UsernameHistory{})
	usernameHistoryMapping              = queries.MakeStructMapping(usernameHistoryType)
	usernameHistoryPrimaryKeyMapping, _ = queries.BindMapping(usernameHistoryType, usernameHistoryMapping, usernameHistoryPrimaryKeyColumns)
	usernameHistoryInsertCacheMut       sync.RWMutex
	usernameHistoryInsertCache          = make(map[string]insertCache)
	usernameHistoryUpdateCacheMut       sync.RWMutex
	usernameHistoryUpdateCache          = make(map[string]updateCache)
	usernameHistoryUpsertCacheMut       sync.RWMutex
	usernameHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usernameHistoryBeforeInsertHooks []UsernameHistoryHook
var usernameHistoryBeforeUpdateHooks []UsernameHistoryHook
var usernameHistoryBeforeDeleteHooks []UsernameHistoryHook
var usernameHistoryBeforeUpsertHooks []UsernameHistoryHook

var usernameHistoryAfterInsertHooks []UsernameHistoryHook
var usernameHistoryAfterSelectHooks []UsernameHistoryHook
var usernameHistoryAfterUpdateHooks []UsernameHistoryHook
var usernameHistoryAfterDeleteHooks []UsernameHistoryHook
var usernameHistoryAfterUpsertHooks []UsernameHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsernameHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsernameHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsernameHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsernameHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsernameHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsernameHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsernameHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsernameHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsernameHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range usernameHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsernameHistoryHook registers your hook function for all future operations.
func AddUsernameHistoryHook(hookPoint boil.HookPoint, usernameHistoryHook UsernameHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usernameHistoryBeforeInsertHooks = append(usernameHistoryBeforeInsertHooks, usernameHistoryHook)
	case boil.BeforeUpdateHook:
		usernameHistoryBeforeUpdateHooks = append(usernameHistoryBeforeUpdateHooks, usernameHistoryHook)
	case boil.BeforeDeleteHook:
		usernameHistoryBeforeDeleteHooks = append(usernameHistoryBeforeDeleteHooks, usernameHistoryHook)
	case boil.BeforeUpsertHook:
		usernameHistoryBeforeUpsertHooks = append(usernameHistoryBeforeUpsertHooks, usernameHistoryHook)
	case boil.AfterInsertHook:
		usernameHistoryAfterInsertHooks = append(usernameHistoryAfterInsertHooks, usernameHistoryHook)
	case boil.AfterSelectHook:
		usernameHistoryAfterSelectHooks = append(usernameHistoryAfterSelectHooks, usernameHistoryHook)
	case boil.AfterUpdateHook:
		usernameHistoryAfterUpdateHooks = append(usernameHistoryAfterUpdateHooks, usernameHistoryHook)
	case boil.AfterDeleteHook:
		usernameHistoryAfterDeleteHooks = append(usernameHistoryAfterDeleteHooks, usernameHistoryHook)
	case boil.AfterUpsertHook:
		usernameHistoryAfterUpsertHooks = append(usernameHistoryAfterUpsertHooks, usernameHistoryHook)
	}
}

// One returns a single usernameHistory record from the query.
func (q usernameHistoryQuery) One(exec boil.Executor) (*UsernameHistory, error) {
	o := &UsernameHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for username_history")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsernameHistory records from the query.
func (q usernameHistoryQuery) All(exec boil.Executor) (UsernameHistorySlice, error) {
	var o []*UsernameHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UsernameHistory slice")
	}

	if len(usernameHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsernameHistory records in the query.
func (q usernameHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count username_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usernameHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if username_history exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UsernameHistory) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usernameHistoryL) LoadUser(e boil.Executor, singular bool, maybeUsernameHistory interface{}, mods queries.Applicator) error {
	var slice []*UsernameHistory
	var object *UsernameHistory

	if singular {
		object = maybeUsernameHistory.(*UsernameHistory)
	} else {
		slice = *maybeUsernameHistory.(*[]*UsernameHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usernameHistoryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usernameHistoryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(usernameHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsernameHistories = append(foreign.R.UsernameHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsernameHistories = append(foreign.R.UsernameHistories, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the usernameHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsernameHistories.
func (o *UsernameHistory) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"username_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, usernameHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &usernameHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsernameHistories: UsernameHistorySlice{o},
		}
	} else {
		related.R.UsernameHistories = append(related.R.UsernameHistories, o)
	}

	return nil
}

// UsernameHistories retrieves all the records using an executor.
func UsernameHistories(mods ...qm.QueryMod) usernameHistoryQuery {
	mods = append(mods, qm.From("\"username_history\""))
	return usernameHistoryQuery{NewQuery(mods...)}
}

// FindUsernameHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsernameHistory(exec boil.Executor, iD string, selectCols ...string) (*UsernameHistory, error) {
	usernameHistoryObj := &UsernameHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"username_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, usernameHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from username_history")
	}

	if err = usernameHistoryObj.doAfterSelectHooks(exec); err != nil {
		return usernameHistoryObj, err
	}

	return usernameHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsernameHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no username_history provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usernameHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usernameHistoryInsertCacheMut.RLock()
	cache, cached := usernameHistoryInsertCache[key]
	usernameHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usernameHistoryAllColumns,
			usernameHistoryColumnsWithDefault,
			usernameHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usernameHistoryType, usernameHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usernameHistoryType, usernameHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"username_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"username_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into username_history")
	}

	if !cached {
		usernameHistoryInsertCacheMut.Lock()
		usernameHistoryInsertCache[key] = cache
		usernameHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UsernameHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsernameHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usernameHistoryUpdateCacheMut.RLock()
	cache, cached := usernameHistoryUpdateCache[key]
	usernameHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usernameHistoryAllColumns,
			usernameHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update username_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"username_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usernameHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usernameHistoryType, usernameHistoryMapping, append(wl, usernameHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update username_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for username_history")
	}

	if !cached {
		usernameHistoryUpdateCacheMut.Lock()
		usernameHistoryUpdateCache[key] = cache
		usernameHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usernameHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for username_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for username_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsernameHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usernameHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"username_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usernameHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in usernameHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all usernameHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsernameHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no username_history provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usernameHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usernameHistoryUpsertCacheMut.RLock()
	cache, cached := usernameHistoryUpsertCache[key]
	usernameHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usernameHistoryAllColumns,
			usernameHistoryColumnsWithDefault,
			usernameHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usernameHistoryAllColumns,
			usernameHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert username_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usernameHistoryPrimaryKeyColumns))
			copy(conflict, usernameHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"username_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usernameHistoryType, usernameHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usernameHistoryType, usernameHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert username_history")
	}

	if !cached {
		usernameHistoryUpsertCacheMut.Lock()
		usernameHistoryUpsertCache[key] = cache
		usernameHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UsernameHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsernameHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UsernameHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usernameHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"username_history\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from username_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for username_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usernameHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no usernameHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from username_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for username_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsernameHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usernameHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usernameHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"username_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usernameHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from usernameHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for username_history")
	}

	if len(usernameHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsernameHistory) Reload(exec boil.Executor) error {
	ret, err := FindUsernameHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsernameHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsernameHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usernameHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"username_history\".* FROM \"username_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usernameHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UsernameHistorySlice")
	}

	*o = slice

	return nil
}

// UsernameHistoryExists checks if the UsernameHistory row exists.
func UsernameHistoryExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"username_history\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if username_history exists")
	}

	return exists, nil
}
