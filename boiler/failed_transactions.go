// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FailedTransaction is an object representing the database table.
type FailedTransaction struct {
	ID              string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Description     string          `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	FailedReference string          `boiler:"failed_reference" boil:"failed_reference" json:"failed_reference" toml:"failed_reference" yaml:"failed_reference"`
	Amount          decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Credit          string          `boiler:"credit" boil:"credit" json:"credit" toml:"credit" yaml:"credit"`
	Debit           string          `boiler:"debit" boil:"debit" json:"debit" toml:"debit" yaml:"debit"`
	Group           null.String     `boiler:"group" boil:"group" json:"group,omitempty" toml:"group" yaml:"group,omitempty"`
	SubGroup        null.String     `boiler:"sub_group" boil:"sub_group" json:"sub_group,omitempty" toml:"sub_group" yaml:"sub_group,omitempty"`
	ServiceID       null.String     `boiler:"service_id" boil:"service_id" json:"service_id,omitempty" toml:"service_id" yaml:"service_id,omitempty"`
	CreatedAt       time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *failedTransactionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L failedTransactionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FailedTransactionColumns = struct {
	ID              string
	Description     string
	FailedReference string
	Amount          string
	Credit          string
	Debit           string
	Group           string
	SubGroup        string
	ServiceID       string
	CreatedAt       string
}{
	ID:              "id",
	Description:     "description",
	FailedReference: "failed_reference",
	Amount:          "amount",
	Credit:          "credit",
	Debit:           "debit",
	Group:           "group",
	SubGroup:        "sub_group",
	ServiceID:       "service_id",
	CreatedAt:       "created_at",
}

var FailedTransactionTableColumns = struct {
	ID              string
	Description     string
	FailedReference string
	Amount          string
	Credit          string
	Debit           string
	Group           string
	SubGroup        string
	ServiceID       string
	CreatedAt       string
}{
	ID:              "failed_transactions.id",
	Description:     "failed_transactions.description",
	FailedReference: "failed_transactions.failed_reference",
	Amount:          "failed_transactions.amount",
	Credit:          "failed_transactions.credit",
	Debit:           "failed_transactions.debit",
	Group:           "failed_transactions.group",
	SubGroup:        "failed_transactions.sub_group",
	ServiceID:       "failed_transactions.service_id",
	CreatedAt:       "failed_transactions.created_at",
}

// Generated where

var FailedTransactionWhere = struct {
	ID              whereHelperstring
	Description     whereHelperstring
	FailedReference whereHelperstring
	Amount          whereHelperdecimal_Decimal
	Credit          whereHelperstring
	Debit           whereHelperstring
	Group           whereHelpernull_String
	SubGroup        whereHelpernull_String
	ServiceID       whereHelpernull_String
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"failed_transactions\".\"id\""},
	Description:     whereHelperstring{field: "\"failed_transactions\".\"description\""},
	FailedReference: whereHelperstring{field: "\"failed_transactions\".\"failed_reference\""},
	Amount:          whereHelperdecimal_Decimal{field: "\"failed_transactions\".\"amount\""},
	Credit:          whereHelperstring{field: "\"failed_transactions\".\"credit\""},
	Debit:           whereHelperstring{field: "\"failed_transactions\".\"debit\""},
	Group:           whereHelpernull_String{field: "\"failed_transactions\".\"group\""},
	SubGroup:        whereHelpernull_String{field: "\"failed_transactions\".\"sub_group\""},
	ServiceID:       whereHelpernull_String{field: "\"failed_transactions\".\"service_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"failed_transactions\".\"created_at\""},
}

// FailedTransactionRels is where relationship names are stored.
var FailedTransactionRels = struct {
	CreditUser string
	DebitUser  string
}{
	CreditUser: "CreditUser",
	DebitUser:  "DebitUser",
}

// failedTransactionR is where relationships are stored.
type failedTransactionR struct {
	CreditUser *User `boiler:"CreditUser" boil:"CreditUser" json:"CreditUser" toml:"CreditUser" yaml:"CreditUser"`
	DebitUser  *User `boiler:"DebitUser" boil:"DebitUser" json:"DebitUser" toml:"DebitUser" yaml:"DebitUser"`
}

// NewStruct creates a new relationship struct
func (*failedTransactionR) NewStruct() *failedTransactionR {
	return &failedTransactionR{}
}

// failedTransactionL is where Load methods for each relationship are stored.
type failedTransactionL struct{}

var (
	failedTransactionAllColumns            = []string{"id", "description", "failed_reference", "amount", "credit", "debit", "group", "sub_group", "service_id", "created_at"}
	failedTransactionColumnsWithoutDefault = []string{"id", "amount", "credit", "debit"}
	failedTransactionColumnsWithDefault    = []string{"description", "failed_reference", "group", "sub_group", "service_id", "created_at"}
	failedTransactionPrimaryKeyColumns     = []string{"id"}
	failedTransactionGeneratedColumns      = []string{}
)

type (
	// FailedTransactionSlice is an alias for a slice of pointers to FailedTransaction.
	// This should almost always be used instead of []FailedTransaction.
	FailedTransactionSlice []*FailedTransaction
	// FailedTransactionHook is the signature for custom FailedTransaction hook methods
	FailedTransactionHook func(boil.Executor, *FailedTransaction) error

	failedTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	failedTransactionType                 = reflect.TypeOf(&FailedTransaction{})
	failedTransactionMapping              = queries.MakeStructMapping(failedTransactionType)
	failedTransactionPrimaryKeyMapping, _ = queries.BindMapping(failedTransactionType, failedTransactionMapping, failedTransactionPrimaryKeyColumns)
	failedTransactionInsertCacheMut       sync.RWMutex
	failedTransactionInsertCache          = make(map[string]insertCache)
	failedTransactionUpdateCacheMut       sync.RWMutex
	failedTransactionUpdateCache          = make(map[string]updateCache)
	failedTransactionUpsertCacheMut       sync.RWMutex
	failedTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var failedTransactionAfterSelectHooks []FailedTransactionHook

var failedTransactionBeforeInsertHooks []FailedTransactionHook
var failedTransactionAfterInsertHooks []FailedTransactionHook

var failedTransactionBeforeUpdateHooks []FailedTransactionHook
var failedTransactionAfterUpdateHooks []FailedTransactionHook

var failedTransactionBeforeDeleteHooks []FailedTransactionHook
var failedTransactionAfterDeleteHooks []FailedTransactionHook

var failedTransactionBeforeUpsertHooks []FailedTransactionHook
var failedTransactionAfterUpsertHooks []FailedTransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FailedTransaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FailedTransaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FailedTransaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FailedTransaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FailedTransaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FailedTransaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FailedTransaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FailedTransaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FailedTransaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedTransactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFailedTransactionHook registers your hook function for all future operations.
func AddFailedTransactionHook(hookPoint boil.HookPoint, failedTransactionHook FailedTransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		failedTransactionAfterSelectHooks = append(failedTransactionAfterSelectHooks, failedTransactionHook)
	case boil.BeforeInsertHook:
		failedTransactionBeforeInsertHooks = append(failedTransactionBeforeInsertHooks, failedTransactionHook)
	case boil.AfterInsertHook:
		failedTransactionAfterInsertHooks = append(failedTransactionAfterInsertHooks, failedTransactionHook)
	case boil.BeforeUpdateHook:
		failedTransactionBeforeUpdateHooks = append(failedTransactionBeforeUpdateHooks, failedTransactionHook)
	case boil.AfterUpdateHook:
		failedTransactionAfterUpdateHooks = append(failedTransactionAfterUpdateHooks, failedTransactionHook)
	case boil.BeforeDeleteHook:
		failedTransactionBeforeDeleteHooks = append(failedTransactionBeforeDeleteHooks, failedTransactionHook)
	case boil.AfterDeleteHook:
		failedTransactionAfterDeleteHooks = append(failedTransactionAfterDeleteHooks, failedTransactionHook)
	case boil.BeforeUpsertHook:
		failedTransactionBeforeUpsertHooks = append(failedTransactionBeforeUpsertHooks, failedTransactionHook)
	case boil.AfterUpsertHook:
		failedTransactionAfterUpsertHooks = append(failedTransactionAfterUpsertHooks, failedTransactionHook)
	}
}

// One returns a single failedTransaction record from the query.
func (q failedTransactionQuery) One(exec boil.Executor) (*FailedTransaction, error) {
	o := &FailedTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for failed_transactions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FailedTransaction records from the query.
func (q failedTransactionQuery) All(exec boil.Executor) (FailedTransactionSlice, error) {
	var o []*FailedTransaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FailedTransaction slice")
	}

	if len(failedTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FailedTransaction records in the query.
func (q failedTransactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count failed_transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q failedTransactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if failed_transactions exists")
	}

	return count > 0, nil
}

// CreditUser pointed to by the foreign key.
func (o *FailedTransaction) CreditUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Credit),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// DebitUser pointed to by the foreign key.
func (o *FailedTransaction) DebitUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Debit),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadCreditUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (failedTransactionL) LoadCreditUser(e boil.Executor, singular bool, maybeFailedTransaction interface{}, mods queries.Applicator) error {
	var slice []*FailedTransaction
	var object *FailedTransaction

	if singular {
		object = maybeFailedTransaction.(*FailedTransaction)
	} else {
		slice = *maybeFailedTransaction.(*[]*FailedTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &failedTransactionR{}
		}
		args = append(args, object.Credit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &failedTransactionR{}
			}

			for _, a := range args {
				if a == obj.Credit {
					continue Outer
				}
			}

			args = append(args, obj.Credit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(failedTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreditFailedTransactions = append(foreign.R.CreditFailedTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Credit == foreign.ID {
				local.R.CreditUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreditFailedTransactions = append(foreign.R.CreditFailedTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadDebitUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (failedTransactionL) LoadDebitUser(e boil.Executor, singular bool, maybeFailedTransaction interface{}, mods queries.Applicator) error {
	var slice []*FailedTransaction
	var object *FailedTransaction

	if singular {
		object = maybeFailedTransaction.(*FailedTransaction)
	} else {
		slice = *maybeFailedTransaction.(*[]*FailedTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &failedTransactionR{}
		}
		args = append(args, object.Debit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &failedTransactionR{}
			}

			for _, a := range args {
				if a == obj.Debit {
					continue Outer
				}
			}

			args = append(args, obj.Debit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(failedTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebitUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.DebitFailedTransactions = append(foreign.R.DebitFailedTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Debit == foreign.ID {
				local.R.DebitUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DebitFailedTransactions = append(foreign.R.DebitFailedTransactions, local)
				break
			}
		}
	}

	return nil
}

// SetCreditUser of the failedTransaction to the related item.
// Sets o.R.CreditUser to related.
// Adds o to related.R.CreditFailedTransactions.
func (o *FailedTransaction) SetCreditUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"failed_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"credit"}),
		strmangle.WhereClause("\"", "\"", 2, failedTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Credit = related.ID
	if o.R == nil {
		o.R = &failedTransactionR{
			CreditUser: related,
		}
	} else {
		o.R.CreditUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreditFailedTransactions: FailedTransactionSlice{o},
		}
	} else {
		related.R.CreditFailedTransactions = append(related.R.CreditFailedTransactions, o)
	}

	return nil
}

// SetDebitUser of the failedTransaction to the related item.
// Sets o.R.DebitUser to related.
// Adds o to related.R.DebitFailedTransactions.
func (o *FailedTransaction) SetDebitUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"failed_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"debit"}),
		strmangle.WhereClause("\"", "\"", 2, failedTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Debit = related.ID
	if o.R == nil {
		o.R = &failedTransactionR{
			DebitUser: related,
		}
	} else {
		o.R.DebitUser = related
	}

	if related.R == nil {
		related.R = &userR{
			DebitFailedTransactions: FailedTransactionSlice{o},
		}
	} else {
		related.R.DebitFailedTransactions = append(related.R.DebitFailedTransactions, o)
	}

	return nil
}

// FailedTransactions retrieves all the records using an executor.
func FailedTransactions(mods ...qm.QueryMod) failedTransactionQuery {
	mods = append(mods, qm.From("\"failed_transactions\""))
	return failedTransactionQuery{NewQuery(mods...)}
}

// FindFailedTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFailedTransaction(exec boil.Executor, iD string, selectCols ...string) (*FailedTransaction, error) {
	failedTransactionObj := &FailedTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"failed_transactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, failedTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from failed_transactions")
	}

	if err = failedTransactionObj.doAfterSelectHooks(exec); err != nil {
		return failedTransactionObj, err
	}

	return failedTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FailedTransaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no failed_transactions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(failedTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	failedTransactionInsertCacheMut.RLock()
	cache, cached := failedTransactionInsertCache[key]
	failedTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			failedTransactionAllColumns,
			failedTransactionColumnsWithDefault,
			failedTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(failedTransactionType, failedTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(failedTransactionType, failedTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"failed_transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"failed_transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into failed_transactions")
	}

	if !cached {
		failedTransactionInsertCacheMut.Lock()
		failedTransactionInsertCache[key] = cache
		failedTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FailedTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FailedTransaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	failedTransactionUpdateCacheMut.RLock()
	cache, cached := failedTransactionUpdateCache[key]
	failedTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			failedTransactionAllColumns,
			failedTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update failed_transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"failed_transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, failedTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(failedTransactionType, failedTransactionMapping, append(wl, failedTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update failed_transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for failed_transactions")
	}

	if !cached {
		failedTransactionUpdateCacheMut.Lock()
		failedTransactionUpdateCache[key] = cache
		failedTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q failedTransactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for failed_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for failed_transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FailedTransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"failed_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, failedTransactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in failedTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all failedTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FailedTransaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no failed_transactions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(failedTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	failedTransactionUpsertCacheMut.RLock()
	cache, cached := failedTransactionUpsertCache[key]
	failedTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			failedTransactionAllColumns,
			failedTransactionColumnsWithDefault,
			failedTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			failedTransactionAllColumns,
			failedTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert failed_transactions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(failedTransactionPrimaryKeyColumns))
			copy(conflict, failedTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"failed_transactions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(failedTransactionType, failedTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(failedTransactionType, failedTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert failed_transactions")
	}

	if !cached {
		failedTransactionUpsertCacheMut.Lock()
		failedTransactionUpsertCache[key] = cache
		failedTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FailedTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FailedTransaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FailedTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), failedTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"failed_transactions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from failed_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for failed_transactions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q failedTransactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no failedTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from failed_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for failed_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FailedTransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(failedTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"failed_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, failedTransactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from failedTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for failed_transactions")
	}

	if len(failedTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FailedTransaction) Reload(exec boil.Executor) error {
	ret, err := FindFailedTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FailedTransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FailedTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"failed_transactions\".* FROM \"failed_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, failedTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FailedTransactionSlice")
	}

	*o = slice

	return nil
}

// FailedTransactionExists checks if the FailedTransaction row exists.
func FailedTransactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"failed_transactions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if failed_transactions exists")
	}

	return exists, nil
}
