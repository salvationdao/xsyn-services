// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionsOld is an object representing the database table.
type TransactionsOld struct {
	ID                   string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Description          string          `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	TransactionReference string          `boiler:"transaction_reference" boil:"transaction_reference" json:"transaction_reference" toml:"transaction_reference" yaml:"transaction_reference"`
	Amount               decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Credit               string          `boiler:"credit" boil:"credit" json:"credit" toml:"credit" yaml:"credit"`
	Debit                string          `boiler:"debit" boil:"debit" json:"debit" toml:"debit" yaml:"debit"`
	Reason               null.String     `boiler:"reason" boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	CreatedAt            time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Group                string          `boiler:"group" boil:"group" json:"group" toml:"group" yaml:"group"`
	SubGroup             null.String     `boiler:"sub_group" boil:"sub_group" json:"sub_group,omitempty" toml:"sub_group" yaml:"sub_group,omitempty"`
	RelatedTransactionID null.String     `boiler:"related_transaction_id" boil:"related_transaction_id" json:"related_transaction_id,omitempty" toml:"related_transaction_id" yaml:"related_transaction_id,omitempty"`
	ServiceID            null.String     `boiler:"service_id" boil:"service_id" json:"service_id,omitempty" toml:"service_id" yaml:"service_id,omitempty"`

	R *transactionsOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionsOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionsOldColumns = struct {
	ID                   string
	Description          string
	TransactionReference string
	Amount               string
	Credit               string
	Debit                string
	Reason               string
	CreatedAt            string
	Group                string
	SubGroup             string
	RelatedTransactionID string
	ServiceID            string
}{
	ID:                   "id",
	Description:          "description",
	TransactionReference: "transaction_reference",
	Amount:               "amount",
	Credit:               "credit",
	Debit:                "debit",
	Reason:               "reason",
	CreatedAt:            "created_at",
	Group:                "group",
	SubGroup:             "sub_group",
	RelatedTransactionID: "related_transaction_id",
	ServiceID:            "service_id",
}

var TransactionsOldTableColumns = struct {
	ID                   string
	Description          string
	TransactionReference string
	Amount               string
	Credit               string
	Debit                string
	Reason               string
	CreatedAt            string
	Group                string
	SubGroup             string
	RelatedTransactionID string
	ServiceID            string
}{
	ID:                   "transactions_old.id",
	Description:          "transactions_old.description",
	TransactionReference: "transactions_old.transaction_reference",
	Amount:               "transactions_old.amount",
	Credit:               "transactions_old.credit",
	Debit:                "transactions_old.debit",
	Reason:               "transactions_old.reason",
	CreatedAt:            "transactions_old.created_at",
	Group:                "transactions_old.group",
	SubGroup:             "transactions_old.sub_group",
	RelatedTransactionID: "transactions_old.related_transaction_id",
	ServiceID:            "transactions_old.service_id",
}

// Generated where

var TransactionsOldWhere = struct {
	ID                   whereHelperstring
	Description          whereHelperstring
	TransactionReference whereHelperstring
	Amount               whereHelperdecimal_Decimal
	Credit               whereHelperstring
	Debit                whereHelperstring
	Reason               whereHelpernull_String
	CreatedAt            whereHelpertime_Time
	Group                whereHelperstring
	SubGroup             whereHelpernull_String
	RelatedTransactionID whereHelpernull_String
	ServiceID            whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"transactions_old\".\"id\""},
	Description:          whereHelperstring{field: "\"transactions_old\".\"description\""},
	TransactionReference: whereHelperstring{field: "\"transactions_old\".\"transaction_reference\""},
	Amount:               whereHelperdecimal_Decimal{field: "\"transactions_old\".\"amount\""},
	Credit:               whereHelperstring{field: "\"transactions_old\".\"credit\""},
	Debit:                whereHelperstring{field: "\"transactions_old\".\"debit\""},
	Reason:               whereHelpernull_String{field: "\"transactions_old\".\"reason\""},
	CreatedAt:            whereHelpertime_Time{field: "\"transactions_old\".\"created_at\""},
	Group:                whereHelperstring{field: "\"transactions_old\".\"group\""},
	SubGroup:             whereHelpernull_String{field: "\"transactions_old\".\"sub_group\""},
	RelatedTransactionID: whereHelpernull_String{field: "\"transactions_old\".\"related_transaction_id\""},
	ServiceID:            whereHelpernull_String{field: "\"transactions_old\".\"service_id\""},
}

// TransactionsOldRels is where relationship names are stored.
var TransactionsOldRels = struct {
	CreditUser                         string
	DebitUser                          string
	RelatedTransaction                 string
	Service                            string
	RelatedTransactionTransactionsOlds string
}{
	CreditUser:                         "CreditUser",
	DebitUser:                          "DebitUser",
	RelatedTransaction:                 "RelatedTransaction",
	Service:                            "Service",
	RelatedTransactionTransactionsOlds: "RelatedTransactionTransactionsOlds",
}

// transactionsOldR is where relationships are stored.
type transactionsOldR struct {
	CreditUser                         *User                `boiler:"CreditUser" boil:"CreditUser" json:"CreditUser" toml:"CreditUser" yaml:"CreditUser"`
	DebitUser                          *User                `boiler:"DebitUser" boil:"DebitUser" json:"DebitUser" toml:"DebitUser" yaml:"DebitUser"`
	RelatedTransaction                 *TransactionsOld     `boiler:"RelatedTransaction" boil:"RelatedTransaction" json:"RelatedTransaction" toml:"RelatedTransaction" yaml:"RelatedTransaction"`
	Service                            *User                `boiler:"Service" boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
	RelatedTransactionTransactionsOlds TransactionsOldSlice `boiler:"RelatedTransactionTransactionsOlds" boil:"RelatedTransactionTransactionsOlds" json:"RelatedTransactionTransactionsOlds" toml:"RelatedTransactionTransactionsOlds" yaml:"RelatedTransactionTransactionsOlds"`
}

// NewStruct creates a new relationship struct
func (*transactionsOldR) NewStruct() *transactionsOldR {
	return &transactionsOldR{}
}

// transactionsOldL is where Load methods for each relationship are stored.
type transactionsOldL struct{}

var (
	transactionsOldAllColumns            = []string{"id", "description", "transaction_reference", "amount", "credit", "debit", "reason", "created_at", "group", "sub_group", "related_transaction_id", "service_id"}
	transactionsOldColumnsWithoutDefault = []string{"id", "amount", "credit", "debit"}
	transactionsOldColumnsWithDefault    = []string{"description", "transaction_reference", "reason", "created_at", "group", "sub_group", "related_transaction_id", "service_id"}
	transactionsOldPrimaryKeyColumns     = []string{"id"}
	transactionsOldGeneratedColumns      = []string{}
)

type (
	// TransactionsOldSlice is an alias for a slice of pointers to TransactionsOld.
	// This should almost always be used instead of []TransactionsOld.
	TransactionsOldSlice []*TransactionsOld
	// TransactionsOldHook is the signature for custom TransactionsOld hook methods
	TransactionsOldHook func(boil.Executor, *TransactionsOld) error

	transactionsOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionsOldType                 = reflect.TypeOf(&TransactionsOld{})
	transactionsOldMapping              = queries.MakeStructMapping(transactionsOldType)
	transactionsOldPrimaryKeyMapping, _ = queries.BindMapping(transactionsOldType, transactionsOldMapping, transactionsOldPrimaryKeyColumns)
	transactionsOldInsertCacheMut       sync.RWMutex
	transactionsOldInsertCache          = make(map[string]insertCache)
	transactionsOldUpdateCacheMut       sync.RWMutex
	transactionsOldUpdateCache          = make(map[string]updateCache)
	transactionsOldUpsertCacheMut       sync.RWMutex
	transactionsOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactionsOldAfterSelectHooks []TransactionsOldHook

var transactionsOldBeforeInsertHooks []TransactionsOldHook
var transactionsOldAfterInsertHooks []TransactionsOldHook

var transactionsOldBeforeUpdateHooks []TransactionsOldHook
var transactionsOldAfterUpdateHooks []TransactionsOldHook

var transactionsOldBeforeDeleteHooks []TransactionsOldHook
var transactionsOldAfterDeleteHooks []TransactionsOldHook

var transactionsOldBeforeUpsertHooks []TransactionsOldHook
var transactionsOldAfterUpsertHooks []TransactionsOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactionsOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactionsOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactionsOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactionsOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactionsOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactionsOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactionsOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactionsOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactionsOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionsOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionsOldHook registers your hook function for all future operations.
func AddTransactionsOldHook(hookPoint boil.HookPoint, transactionsOldHook TransactionsOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transactionsOldAfterSelectHooks = append(transactionsOldAfterSelectHooks, transactionsOldHook)
	case boil.BeforeInsertHook:
		transactionsOldBeforeInsertHooks = append(transactionsOldBeforeInsertHooks, transactionsOldHook)
	case boil.AfterInsertHook:
		transactionsOldAfterInsertHooks = append(transactionsOldAfterInsertHooks, transactionsOldHook)
	case boil.BeforeUpdateHook:
		transactionsOldBeforeUpdateHooks = append(transactionsOldBeforeUpdateHooks, transactionsOldHook)
	case boil.AfterUpdateHook:
		transactionsOldAfterUpdateHooks = append(transactionsOldAfterUpdateHooks, transactionsOldHook)
	case boil.BeforeDeleteHook:
		transactionsOldBeforeDeleteHooks = append(transactionsOldBeforeDeleteHooks, transactionsOldHook)
	case boil.AfterDeleteHook:
		transactionsOldAfterDeleteHooks = append(transactionsOldAfterDeleteHooks, transactionsOldHook)
	case boil.BeforeUpsertHook:
		transactionsOldBeforeUpsertHooks = append(transactionsOldBeforeUpsertHooks, transactionsOldHook)
	case boil.AfterUpsertHook:
		transactionsOldAfterUpsertHooks = append(transactionsOldAfterUpsertHooks, transactionsOldHook)
	}
}

// One returns a single transactionsOld record from the query.
func (q transactionsOldQuery) One(exec boil.Executor) (*TransactionsOld, error) {
	o := &TransactionsOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for transactions_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TransactionsOld records from the query.
func (q transactionsOldQuery) All(exec boil.Executor) (TransactionsOldSlice, error) {
	var o []*TransactionsOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TransactionsOld slice")
	}

	if len(transactionsOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TransactionsOld records in the query.
func (q transactionsOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count transactions_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionsOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if transactions_old exists")
	}

	return count > 0, nil
}

// CreditUser pointed to by the foreign key.
func (o *TransactionsOld) CreditUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Credit),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// DebitUser pointed to by the foreign key.
func (o *TransactionsOld) DebitUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Debit),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// RelatedTransaction pointed to by the foreign key.
func (o *TransactionsOld) RelatedTransaction(mods ...qm.QueryMod) transactionsOldQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedTransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := TransactionsOlds(queryMods...)
	queries.SetFrom(query.Query, "\"transactions_old\"")

	return query
}

// Service pointed to by the foreign key.
func (o *TransactionsOld) Service(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// RelatedTransactionTransactionsOlds retrieves all the transactions_old's TransactionsOlds with an executor via related_transaction_id column.
func (o *TransactionsOld) RelatedTransactionTransactionsOlds(mods ...qm.QueryMod) transactionsOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions_old\".\"related_transaction_id\"=?", o.ID),
	)

	query := TransactionsOlds(queryMods...)
	queries.SetFrom(query.Query, "\"transactions_old\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions_old\".*"})
	}

	return query
}

// LoadCreditUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionsOldL) LoadCreditUser(e boil.Executor, singular bool, maybeTransactionsOld interface{}, mods queries.Applicator) error {
	var slice []*TransactionsOld
	var object *TransactionsOld

	if singular {
		object = maybeTransactionsOld.(*TransactionsOld)
	} else {
		slice = *maybeTransactionsOld.(*[]*TransactionsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionsOldR{}
		}
		args = append(args, object.Credit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsOldR{}
			}

			for _, a := range args {
				if a == obj.Credit {
					continue Outer
				}
			}

			args = append(args, obj.Credit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(transactionsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreditTransactionsOlds = append(foreign.R.CreditTransactionsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Credit == foreign.ID {
				local.R.CreditUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreditTransactionsOlds = append(foreign.R.CreditTransactionsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadDebitUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionsOldL) LoadDebitUser(e boil.Executor, singular bool, maybeTransactionsOld interface{}, mods queries.Applicator) error {
	var slice []*TransactionsOld
	var object *TransactionsOld

	if singular {
		object = maybeTransactionsOld.(*TransactionsOld)
	} else {
		slice = *maybeTransactionsOld.(*[]*TransactionsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionsOldR{}
		}
		args = append(args, object.Debit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsOldR{}
			}

			for _, a := range args {
				if a == obj.Debit {
					continue Outer
				}
			}

			args = append(args, obj.Debit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(transactionsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebitUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.DebitTransactionsOlds = append(foreign.R.DebitTransactionsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Debit == foreign.ID {
				local.R.DebitUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DebitTransactionsOlds = append(foreign.R.DebitTransactionsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionsOldL) LoadRelatedTransaction(e boil.Executor, singular bool, maybeTransactionsOld interface{}, mods queries.Applicator) error {
	var slice []*TransactionsOld
	var object *TransactionsOld

	if singular {
		object = maybeTransactionsOld.(*TransactionsOld)
	} else {
		slice = *maybeTransactionsOld.(*[]*TransactionsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionsOldR{}
		}
		if !queries.IsNil(object.RelatedTransactionID) {
			args = append(args, object.RelatedTransactionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedTransactionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedTransactionID) {
				args = append(args, obj.RelatedTransactionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions_old`),
		qm.WhereIn(`transactions_old.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransactionsOld")
	}

	var resultSlice []*TransactionsOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransactionsOld")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions_old")
	}

	if len(transactionsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedTransaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionsOldR{}
		}
		foreign.R.RelatedTransactionTransactionsOlds = append(foreign.R.RelatedTransactionTransactionsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedTransactionID, foreign.ID) {
				local.R.RelatedTransaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionsOldR{}
				}
				foreign.R.RelatedTransactionTransactionsOlds = append(foreign.R.RelatedTransactionTransactionsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionsOldL) LoadService(e boil.Executor, singular bool, maybeTransactionsOld interface{}, mods queries.Applicator) error {
	var slice []*TransactionsOld
	var object *TransactionsOld

	if singular {
		object = maybeTransactionsOld.(*TransactionsOld)
	} else {
		slice = *maybeTransactionsOld.(*[]*TransactionsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionsOldR{}
		}
		if !queries.IsNil(object.ServiceID) {
			args = append(args, object.ServiceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ServiceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ServiceID) {
				args = append(args, obj.ServiceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(transactionsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ServiceTransactionsOlds = append(foreign.R.ServiceTransactionsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ServiceID, foreign.ID) {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ServiceTransactionsOlds = append(foreign.R.ServiceTransactionsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedTransactionTransactionsOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionsOldL) LoadRelatedTransactionTransactionsOlds(e boil.Executor, singular bool, maybeTransactionsOld interface{}, mods queries.Applicator) error {
	var slice []*TransactionsOld
	var object *TransactionsOld

	if singular {
		object = maybeTransactionsOld.(*TransactionsOld)
	} else {
		slice = *maybeTransactionsOld.(*[]*TransactionsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionsOldR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions_old`),
		qm.WhereIn(`transactions_old.related_transaction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions_old")
	}

	var resultSlice []*TransactionsOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions_old")
	}

	if len(transactionsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedTransactionTransactionsOlds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionsOldR{}
			}
			foreign.R.RelatedTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedTransactionID) {
				local.R.RelatedTransactionTransactionsOlds = append(local.R.RelatedTransactionTransactionsOlds, foreign)
				if foreign.R == nil {
					foreign.R = &transactionsOldR{}
				}
				foreign.R.RelatedTransaction = local
				break
			}
		}
	}

	return nil
}

// SetCreditUser of the transactionsOld to the related item.
// Sets o.R.CreditUser to related.
// Adds o to related.R.CreditTransactionsOlds.
func (o *TransactionsOld) SetCreditUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"credit"}),
		strmangle.WhereClause("\"", "\"", 2, transactionsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Credit = related.ID
	if o.R == nil {
		o.R = &transactionsOldR{
			CreditUser: related,
		}
	} else {
		o.R.CreditUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreditTransactionsOlds: TransactionsOldSlice{o},
		}
	} else {
		related.R.CreditTransactionsOlds = append(related.R.CreditTransactionsOlds, o)
	}

	return nil
}

// SetDebitUser of the transactionsOld to the related item.
// Sets o.R.DebitUser to related.
// Adds o to related.R.DebitTransactionsOlds.
func (o *TransactionsOld) SetDebitUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"debit"}),
		strmangle.WhereClause("\"", "\"", 2, transactionsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Debit = related.ID
	if o.R == nil {
		o.R = &transactionsOldR{
			DebitUser: related,
		}
	} else {
		o.R.DebitUser = related
	}

	if related.R == nil {
		related.R = &userR{
			DebitTransactionsOlds: TransactionsOldSlice{o},
		}
	} else {
		related.R.DebitTransactionsOlds = append(related.R.DebitTransactionsOlds, o)
	}

	return nil
}

// SetRelatedTransaction of the transactionsOld to the related item.
// Sets o.R.RelatedTransaction to related.
// Adds o to related.R.RelatedTransactionTransactionsOlds.
func (o *TransactionsOld) SetRelatedTransaction(exec boil.Executor, insert bool, related *TransactionsOld) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedTransactionID, related.ID)
	if o.R == nil {
		o.R = &transactionsOldR{
			RelatedTransaction: related,
		}
	} else {
		o.R.RelatedTransaction = related
	}

	if related.R == nil {
		related.R = &transactionsOldR{
			RelatedTransactionTransactionsOlds: TransactionsOldSlice{o},
		}
	} else {
		related.R.RelatedTransactionTransactionsOlds = append(related.R.RelatedTransactionTransactionsOlds, o)
	}

	return nil
}

// RemoveRelatedTransaction relationship.
// Sets o.R.RelatedTransaction to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TransactionsOld) RemoveRelatedTransaction(exec boil.Executor, related *TransactionsOld) error {
	var err error

	queries.SetScanner(&o.RelatedTransactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_transaction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedTransaction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedTransactionTransactionsOlds {
		if queries.Equal(o.RelatedTransactionID, ri.RelatedTransactionID) {
			continue
		}

		ln := len(related.R.RelatedTransactionTransactionsOlds)
		if ln > 1 && i < ln-1 {
			related.R.RelatedTransactionTransactionsOlds[i] = related.R.RelatedTransactionTransactionsOlds[ln-1]
		}
		related.R.RelatedTransactionTransactionsOlds = related.R.RelatedTransactionTransactionsOlds[:ln-1]
		break
	}
	return nil
}

// SetService of the transactionsOld to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.ServiceTransactionsOlds.
func (o *TransactionsOld) SetService(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ServiceID, related.ID)
	if o.R == nil {
		o.R = &transactionsOldR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &userR{
			ServiceTransactionsOlds: TransactionsOldSlice{o},
		}
	} else {
		related.R.ServiceTransactionsOlds = append(related.R.ServiceTransactionsOlds, o)
	}

	return nil
}

// RemoveService relationship.
// Sets o.R.Service to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TransactionsOld) RemoveService(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.ServiceID, nil)
	if _, err = o.Update(exec, boil.Whitelist("service_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Service = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ServiceTransactionsOlds {
		if queries.Equal(o.ServiceID, ri.ServiceID) {
			continue
		}

		ln := len(related.R.ServiceTransactionsOlds)
		if ln > 1 && i < ln-1 {
			related.R.ServiceTransactionsOlds[i] = related.R.ServiceTransactionsOlds[ln-1]
		}
		related.R.ServiceTransactionsOlds = related.R.ServiceTransactionsOlds[:ln-1]
		break
	}
	return nil
}

// AddRelatedTransactionTransactionsOlds adds the given related objects to the existing relationships
// of the transactions_old, optionally inserting them as new records.
// Appends related to o.R.RelatedTransactionTransactionsOlds.
// Sets related.R.RelatedTransaction appropriately.
func (o *TransactionsOld) AddRelatedTransactionTransactionsOlds(exec boil.Executor, insert bool, related ...*TransactionsOld) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedTransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions_old\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionsOldPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedTransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionsOldR{
			RelatedTransactionTransactionsOlds: related,
		}
	} else {
		o.R.RelatedTransactionTransactionsOlds = append(o.R.RelatedTransactionTransactionsOlds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionsOldR{
				RelatedTransaction: o,
			}
		} else {
			rel.R.RelatedTransaction = o
		}
	}
	return nil
}

// SetRelatedTransactionTransactionsOlds removes all previously related items of the
// transactions_old replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedTransaction's RelatedTransactionTransactionsOlds accordingly.
// Replaces o.R.RelatedTransactionTransactionsOlds with related.
// Sets related.R.RelatedTransaction's RelatedTransactionTransactionsOlds accordingly.
func (o *TransactionsOld) SetRelatedTransactionTransactionsOlds(exec boil.Executor, insert bool, related ...*TransactionsOld) error {
	query := "update \"transactions_old\" set \"related_transaction_id\" = null where \"related_transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedTransactionTransactionsOlds {
			queries.SetScanner(&rel.RelatedTransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedTransaction = nil
		}

		o.R.RelatedTransactionTransactionsOlds = nil
	}
	return o.AddRelatedTransactionTransactionsOlds(exec, insert, related...)
}

// RemoveRelatedTransactionTransactionsOlds relationships from objects passed in.
// Removes related items from R.RelatedTransactionTransactionsOlds (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedTransaction.
func (o *TransactionsOld) RemoveRelatedTransactionTransactionsOlds(exec boil.Executor, related ...*TransactionsOld) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedTransactionID, nil)
		if rel.R != nil {
			rel.R.RelatedTransaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedTransactionTransactionsOlds {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedTransactionTransactionsOlds)
			if ln > 1 && i < ln-1 {
				o.R.RelatedTransactionTransactionsOlds[i] = o.R.RelatedTransactionTransactionsOlds[ln-1]
			}
			o.R.RelatedTransactionTransactionsOlds = o.R.RelatedTransactionTransactionsOlds[:ln-1]
			break
		}
	}

	return nil
}

// TransactionsOlds retrieves all the records using an executor.
func TransactionsOlds(mods ...qm.QueryMod) transactionsOldQuery {
	mods = append(mods, qm.From("\"transactions_old\""))
	return transactionsOldQuery{NewQuery(mods...)}
}

// FindTransactionsOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionsOld(exec boil.Executor, iD string, selectCols ...string) (*TransactionsOld, error) {
	transactionsOldObj := &TransactionsOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transactions_old\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, transactionsOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from transactions_old")
	}

	if err = transactionsOldObj.doAfterSelectHooks(exec); err != nil {
		return transactionsOldObj, err
	}

	return transactionsOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionsOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no transactions_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionsOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionsOldInsertCacheMut.RLock()
	cache, cached := transactionsOldInsertCache[key]
	transactionsOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionsOldAllColumns,
			transactionsOldColumnsWithDefault,
			transactionsOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionsOldType, transactionsOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionsOldType, transactionsOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transactions_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transactions_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into transactions_old")
	}

	if !cached {
		transactionsOldInsertCacheMut.Lock()
		transactionsOldInsertCache[key] = cache
		transactionsOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TransactionsOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionsOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionsOldUpdateCacheMut.RLock()
	cache, cached := transactionsOldUpdateCache[key]
	transactionsOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionsOldAllColumns,
			transactionsOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update transactions_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transactions_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionsOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionsOldType, transactionsOldMapping, append(wl, transactionsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update transactions_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for transactions_old")
	}

	if !cached {
		transactionsOldUpdateCacheMut.Lock()
		transactionsOldUpdateCache[key] = cache
		transactionsOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionsOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for transactions_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for transactions_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionsOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transactions_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionsOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in transactionsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all transactionsOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionsOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no transactions_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionsOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionsOldUpsertCacheMut.RLock()
	cache, cached := transactionsOldUpsertCache[key]
	transactionsOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionsOldAllColumns,
			transactionsOldColumnsWithDefault,
			transactionsOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionsOldAllColumns,
			transactionsOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert transactions_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionsOldPrimaryKeyColumns))
			copy(conflict, transactionsOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transactions_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionsOldType, transactionsOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionsOldType, transactionsOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert transactions_old")
	}

	if !cached {
		transactionsOldUpsertCacheMut.Lock()
		transactionsOldUpsertCache[key] = cache
		transactionsOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TransactionsOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionsOld) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TransactionsOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionsOldPrimaryKeyMapping)
	sql := "DELETE FROM \"transactions_old\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from transactions_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for transactions_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionsOldQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no transactionsOldQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from transactions_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for transactions_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionsOldSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionsOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transactions_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionsOldPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from transactionsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for transactions_old")
	}

	if len(transactionsOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionsOld) Reload(exec boil.Executor) error {
	ret, err := FindTransactionsOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionsOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionsOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transactions_old\".* FROM \"transactions_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionsOldPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TransactionsOldSlice")
	}

	*o = slice

	return nil
}

// TransactionsOldExists checks if the TransactionsOld row exists.
func TransactionsOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transactions_old\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if transactions_old exists")
	}

	return exists, nil
}
