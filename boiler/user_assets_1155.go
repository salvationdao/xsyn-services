// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserAssets1155 is an object representing the database table.
type UserAssets1155 struct {
	ID              string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID         string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	CollectionID    string      `boiler:"collection_id" boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	ExternalTokenID int         `boiler:"external_token_id" boil:"external_token_id" json:"external_token_id" toml:"external_token_id" yaml:"external_token_id"`
	Count           int         `boiler:"count" boil:"count" json:"count" toml:"count" yaml:"count"`
	Label           string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Description     string      `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	ImageURL        string      `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	AnimationURL    null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	KeycardGroup    string      `boiler:"keycard_group" boil:"keycard_group" json:"keycard_group" toml:"keycard_group" yaml:"keycard_group"`
	Attributes      types.JSON  `boiler:"attributes" boil:"attributes" json:"attributes" toml:"attributes" yaml:"attributes"`
	ServiceID       null.String `boiler:"service_id" boil:"service_id" json:"service_id,omitempty" toml:"service_id" yaml:"service_id,omitempty"`

	R *userAssets1155R `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAssets1155L  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAssets1155Columns = struct {
	ID              string
	OwnerID         string
	CollectionID    string
	ExternalTokenID string
	Count           string
	Label           string
	Description     string
	ImageURL        string
	AnimationURL    string
	KeycardGroup    string
	Attributes      string
	ServiceID       string
}{
	ID:              "id",
	OwnerID:         "owner_id",
	CollectionID:    "collection_id",
	ExternalTokenID: "external_token_id",
	Count:           "count",
	Label:           "label",
	Description:     "description",
	ImageURL:        "image_url",
	AnimationURL:    "animation_url",
	KeycardGroup:    "keycard_group",
	Attributes:      "attributes",
	ServiceID:       "service_id",
}

var UserAssets1155TableColumns = struct {
	ID              string
	OwnerID         string
	CollectionID    string
	ExternalTokenID string
	Count           string
	Label           string
	Description     string
	ImageURL        string
	AnimationURL    string
	KeycardGroup    string
	Attributes      string
	ServiceID       string
}{
	ID:              "user_assets_1155.id",
	OwnerID:         "user_assets_1155.owner_id",
	CollectionID:    "user_assets_1155.collection_id",
	ExternalTokenID: "user_assets_1155.external_token_id",
	Count:           "user_assets_1155.count",
	Label:           "user_assets_1155.label",
	Description:     "user_assets_1155.description",
	ImageURL:        "user_assets_1155.image_url",
	AnimationURL:    "user_assets_1155.animation_url",
	KeycardGroup:    "user_assets_1155.keycard_group",
	Attributes:      "user_assets_1155.attributes",
	ServiceID:       "user_assets_1155.service_id",
}

// Generated where

var UserAssets1155Where = struct {
	ID              whereHelperstring
	OwnerID         whereHelperstring
	CollectionID    whereHelperstring
	ExternalTokenID whereHelperint
	Count           whereHelperint
	Label           whereHelperstring
	Description     whereHelperstring
	ImageURL        whereHelperstring
	AnimationURL    whereHelpernull_String
	KeycardGroup    whereHelperstring
	Attributes      whereHelpertypes_JSON
	ServiceID       whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"user_assets_1155\".\"id\""},
	OwnerID:         whereHelperstring{field: "\"user_assets_1155\".\"owner_id\""},
	CollectionID:    whereHelperstring{field: "\"user_assets_1155\".\"collection_id\""},
	ExternalTokenID: whereHelperint{field: "\"user_assets_1155\".\"external_token_id\""},
	Count:           whereHelperint{field: "\"user_assets_1155\".\"count\""},
	Label:           whereHelperstring{field: "\"user_assets_1155\".\"label\""},
	Description:     whereHelperstring{field: "\"user_assets_1155\".\"description\""},
	ImageURL:        whereHelperstring{field: "\"user_assets_1155\".\"image_url\""},
	AnimationURL:    whereHelpernull_String{field: "\"user_assets_1155\".\"animation_url\""},
	KeycardGroup:    whereHelperstring{field: "\"user_assets_1155\".\"keycard_group\""},
	Attributes:      whereHelpertypes_JSON{field: "\"user_assets_1155\".\"attributes\""},
	ServiceID:       whereHelpernull_String{field: "\"user_assets_1155\".\"service_id\""},
}

// UserAssets1155Rels is where relationship names are stored.
var UserAssets1155Rels = struct {
	Collection                string
	Owner                     string
	AssetPending1155Rollbacks string
}{
	Collection:                "Collection",
	Owner:                     "Owner",
	AssetPending1155Rollbacks: "AssetPending1155Rollbacks",
}

// userAssets1155R is where relationships are stored.
type userAssets1155R struct {
	Collection                *Collection              `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	Owner                     *User                    `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	AssetPending1155Rollbacks Pending1155RollbackSlice `boiler:"AssetPending1155Rollbacks" boil:"AssetPending1155Rollbacks" json:"AssetPending1155Rollbacks" toml:"AssetPending1155Rollbacks" yaml:"AssetPending1155Rollbacks"`
}

// NewStruct creates a new relationship struct
func (*userAssets1155R) NewStruct() *userAssets1155R {
	return &userAssets1155R{}
}

// userAssets1155L is where Load methods for each relationship are stored.
type userAssets1155L struct{}

var (
	userAssets1155AllColumns            = []string{"id", "owner_id", "collection_id", "external_token_id", "count", "label", "description", "image_url", "animation_url", "keycard_group", "attributes", "service_id"}
	userAssets1155ColumnsWithoutDefault = []string{"owner_id", "collection_id", "external_token_id", "label", "description", "image_url", "animation_url", "keycard_group", "attributes", "service_id"}
	userAssets1155ColumnsWithDefault    = []string{"id", "count"}
	userAssets1155PrimaryKeyColumns     = []string{"id"}
)

type (
	// UserAssets1155Slice is an alias for a slice of pointers to UserAssets1155.
	// This should almost always be used instead of []UserAssets1155.
	UserAssets1155Slice []*UserAssets1155
	// UserAssets1155Hook is the signature for custom UserAssets1155 hook methods
	UserAssets1155Hook func(boil.Executor, *UserAssets1155) error

	userAssets1155Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAssets1155Type                 = reflect.TypeOf(&UserAssets1155{})
	userAssets1155Mapping              = queries.MakeStructMapping(userAssets1155Type)
	userAssets1155PrimaryKeyMapping, _ = queries.BindMapping(userAssets1155Type, userAssets1155Mapping, userAssets1155PrimaryKeyColumns)
	userAssets1155InsertCacheMut       sync.RWMutex
	userAssets1155InsertCache          = make(map[string]insertCache)
	userAssets1155UpdateCacheMut       sync.RWMutex
	userAssets1155UpdateCache          = make(map[string]updateCache)
	userAssets1155UpsertCacheMut       sync.RWMutex
	userAssets1155UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAssets1155BeforeInsertHooks []UserAssets1155Hook
var userAssets1155BeforeUpdateHooks []UserAssets1155Hook
var userAssets1155BeforeDeleteHooks []UserAssets1155Hook
var userAssets1155BeforeUpsertHooks []UserAssets1155Hook

var userAssets1155AfterInsertHooks []UserAssets1155Hook
var userAssets1155AfterSelectHooks []UserAssets1155Hook
var userAssets1155AfterUpdateHooks []UserAssets1155Hook
var userAssets1155AfterDeleteHooks []UserAssets1155Hook
var userAssets1155AfterUpsertHooks []UserAssets1155Hook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAssets1155) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155BeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAssets1155) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155BeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAssets1155) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155BeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAssets1155) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155BeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAssets1155) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155AfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAssets1155) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155AfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAssets1155) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155AfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAssets1155) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155AfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAssets1155) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssets1155AfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAssets1155Hook registers your hook function for all future operations.
func AddUserAssets1155Hook(hookPoint boil.HookPoint, userAssets1155Hook UserAssets1155Hook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userAssets1155BeforeInsertHooks = append(userAssets1155BeforeInsertHooks, userAssets1155Hook)
	case boil.BeforeUpdateHook:
		userAssets1155BeforeUpdateHooks = append(userAssets1155BeforeUpdateHooks, userAssets1155Hook)
	case boil.BeforeDeleteHook:
		userAssets1155BeforeDeleteHooks = append(userAssets1155BeforeDeleteHooks, userAssets1155Hook)
	case boil.BeforeUpsertHook:
		userAssets1155BeforeUpsertHooks = append(userAssets1155BeforeUpsertHooks, userAssets1155Hook)
	case boil.AfterInsertHook:
		userAssets1155AfterInsertHooks = append(userAssets1155AfterInsertHooks, userAssets1155Hook)
	case boil.AfterSelectHook:
		userAssets1155AfterSelectHooks = append(userAssets1155AfterSelectHooks, userAssets1155Hook)
	case boil.AfterUpdateHook:
		userAssets1155AfterUpdateHooks = append(userAssets1155AfterUpdateHooks, userAssets1155Hook)
	case boil.AfterDeleteHook:
		userAssets1155AfterDeleteHooks = append(userAssets1155AfterDeleteHooks, userAssets1155Hook)
	case boil.AfterUpsertHook:
		userAssets1155AfterUpsertHooks = append(userAssets1155AfterUpsertHooks, userAssets1155Hook)
	}
}

// One returns a single userAssets1155 record from the query.
func (q userAssets1155Query) One(exec boil.Executor) (*UserAssets1155, error) {
	o := &UserAssets1155{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_assets_1155")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAssets1155 records from the query.
func (q userAssets1155Query) All(exec boil.Executor) (UserAssets1155Slice, error) {
	var o []*UserAssets1155

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserAssets1155 slice")
	}

	if len(userAssets1155AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAssets1155 records in the query.
func (q userAssets1155Query) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_assets_1155 rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAssets1155Query) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_assets_1155 exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *UserAssets1155) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *UserAssets1155) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// AssetPending1155Rollbacks retrieves all the pending_1155_rollback's Pending1155Rollbacks with an executor via asset_id column.
func (o *UserAssets1155) AssetPending1155Rollbacks(mods ...qm.QueryMod) pending1155RollbackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pending_1155_rollback\".\"asset_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"pending_1155_rollback\".\"deleted_at\""),
	)

	query := Pending1155Rollbacks(queryMods...)
	queries.SetFrom(query.Query, "\"pending_1155_rollback\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pending_1155_rollback\".*"})
	}

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssets1155L) LoadCollection(e boil.Executor, singular bool, maybeUserAssets1155 interface{}, mods queries.Applicator) error {
	var slice []*UserAssets1155
	var object *UserAssets1155

	if singular {
		object = maybeUserAssets1155.(*UserAssets1155)
	} else {
		slice = *maybeUserAssets1155.(*[]*UserAssets1155)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssets1155R{}
		}
		args = append(args, object.CollectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssets1155R{}
			}

			for _, a := range args {
				if a == obj.CollectionID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(userAssets1155AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.UserAssets1155S = append(foreign.R.UserAssets1155S, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.UserAssets1155S = append(foreign.R.UserAssets1155S, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssets1155L) LoadOwner(e boil.Executor, singular bool, maybeUserAssets1155 interface{}, mods queries.Applicator) error {
	var slice []*UserAssets1155
	var object *UserAssets1155

	if singular {
		object = maybeUserAssets1155.(*UserAssets1155)
	} else {
		slice = *maybeUserAssets1155.(*[]*UserAssets1155)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssets1155R{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssets1155R{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAssets1155AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerUserAssets1155S = append(foreign.R.OwnerUserAssets1155S, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerUserAssets1155S = append(foreign.R.OwnerUserAssets1155S, local)
				break
			}
		}
	}

	return nil
}

// LoadAssetPending1155Rollbacks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userAssets1155L) LoadAssetPending1155Rollbacks(e boil.Executor, singular bool, maybeUserAssets1155 interface{}, mods queries.Applicator) error {
	var slice []*UserAssets1155
	var object *UserAssets1155

	if singular {
		object = maybeUserAssets1155.(*UserAssets1155)
	} else {
		slice = *maybeUserAssets1155.(*[]*UserAssets1155)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssets1155R{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssets1155R{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pending_1155_rollback`),
		qm.WhereIn(`pending_1155_rollback.asset_id in ?`, args...),
		qmhelper.WhereIsNull(`pending_1155_rollback.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pending_1155_rollback")
	}

	var resultSlice []*Pending1155Rollback
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pending_1155_rollback")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pending_1155_rollback")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pending_1155_rollback")
	}

	if len(pending1155RollbackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetPending1155Rollbacks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pending1155RollbackR{}
			}
			foreign.R.Asset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssetID {
				local.R.AssetPending1155Rollbacks = append(local.R.AssetPending1155Rollbacks, foreign)
				if foreign.R == nil {
					foreign.R = &pending1155RollbackR{}
				}
				foreign.R.Asset = local
				break
			}
		}
	}

	return nil
}

// SetCollection of the userAssets1155 to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.UserAssets1155S.
func (o *UserAssets1155) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_assets_1155\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAssets1155PrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &userAssets1155R{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			UserAssets1155S: UserAssets1155Slice{o},
		}
	} else {
		related.R.UserAssets1155S = append(related.R.UserAssets1155S, o)
	}

	return nil
}

// SetOwner of the userAssets1155 to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerUserAssets1155S.
func (o *UserAssets1155) SetOwner(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_assets_1155\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAssets1155PrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &userAssets1155R{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerUserAssets1155S: UserAssets1155Slice{o},
		}
	} else {
		related.R.OwnerUserAssets1155S = append(related.R.OwnerUserAssets1155S, o)
	}

	return nil
}

// AddAssetPending1155Rollbacks adds the given related objects to the existing relationships
// of the user_assets_1155, optionally inserting them as new records.
// Appends related to o.R.AssetPending1155Rollbacks.
// Sets related.R.Asset appropriately.
func (o *UserAssets1155) AddAssetPending1155Rollbacks(exec boil.Executor, insert bool, related ...*Pending1155Rollback) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssetID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pending_1155_rollback\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"asset_id"}),
				strmangle.WhereClause("\"", "\"", 2, pending1155RollbackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userAssets1155R{
			AssetPending1155Rollbacks: related,
		}
	} else {
		o.R.AssetPending1155Rollbacks = append(o.R.AssetPending1155Rollbacks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pending1155RollbackR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// UserAssets1155S retrieves all the records using an executor.
func UserAssets1155S(mods ...qm.QueryMod) userAssets1155Query {
	mods = append(mods, qm.From("\"user_assets_1155\""))
	return userAssets1155Query{NewQuery(mods...)}
}

// FindUserAssets1155 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAssets1155(exec boil.Executor, iD string, selectCols ...string) (*UserAssets1155, error) {
	userAssets1155Obj := &UserAssets1155{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_assets_1155\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userAssets1155Obj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_assets_1155")
	}

	if err = userAssets1155Obj.doAfterSelectHooks(exec); err != nil {
		return userAssets1155Obj, err
	}

	return userAssets1155Obj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAssets1155) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_assets_1155 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAssets1155ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAssets1155InsertCacheMut.RLock()
	cache, cached := userAssets1155InsertCache[key]
	userAssets1155InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAssets1155AllColumns,
			userAssets1155ColumnsWithDefault,
			userAssets1155ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAssets1155Type, userAssets1155Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAssets1155Type, userAssets1155Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_assets_1155\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_assets_1155\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_assets_1155")
	}

	if !cached {
		userAssets1155InsertCacheMut.Lock()
		userAssets1155InsertCache[key] = cache
		userAssets1155InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserAssets1155.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAssets1155) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAssets1155UpdateCacheMut.RLock()
	cache, cached := userAssets1155UpdateCache[key]
	userAssets1155UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAssets1155AllColumns,
			userAssets1155PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_assets_1155, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_assets_1155\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAssets1155PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAssets1155Type, userAssets1155Mapping, append(wl, userAssets1155PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_assets_1155 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_assets_1155")
	}

	if !cached {
		userAssets1155UpdateCacheMut.Lock()
		userAssets1155UpdateCache[key] = cache
		userAssets1155UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAssets1155Query) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_assets_1155")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_assets_1155")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAssets1155Slice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssets1155PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_assets_1155\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAssets1155PrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userAssets1155 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userAssets1155")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAssets1155) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_assets_1155 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAssets1155ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAssets1155UpsertCacheMut.RLock()
	cache, cached := userAssets1155UpsertCache[key]
	userAssets1155UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAssets1155AllColumns,
			userAssets1155ColumnsWithDefault,
			userAssets1155ColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAssets1155AllColumns,
			userAssets1155PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_assets_1155, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAssets1155PrimaryKeyColumns))
			copy(conflict, userAssets1155PrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_assets_1155\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAssets1155Type, userAssets1155Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAssets1155Type, userAssets1155Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert user_assets_1155")
	}

	if !cached {
		userAssets1155UpsertCacheMut.Lock()
		userAssets1155UpsertCache[key] = cache
		userAssets1155UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserAssets1155 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAssets1155) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserAssets1155 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAssets1155PrimaryKeyMapping)
	sql := "DELETE FROM \"user_assets_1155\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_assets_1155")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_assets_1155")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAssets1155Query) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userAssets1155Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_assets_1155")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_assets_1155")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAssets1155Slice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAssets1155BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssets1155PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_assets_1155\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAssets1155PrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userAssets1155 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_assets_1155")
	}

	if len(userAssets1155AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAssets1155) Reload(exec boil.Executor) error {
	ret, err := FindUserAssets1155(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAssets1155Slice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAssets1155Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssets1155PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_assets_1155\".* FROM \"user_assets_1155\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAssets1155PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserAssets1155Slice")
	}

	*o = slice

	return nil
}

// UserAssets1155Exists checks if the UserAssets1155 row exists.
func UserAssets1155Exists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_assets_1155\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_assets_1155 exists")
	}

	return exists, nil
}
