// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssetServiceTransferEvent is an object representing the database table.
type AssetServiceTransferEvent struct {
	ID            int64       `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserAssetID   string      `boiler:"user_asset_id" boil:"user_asset_id" json:"user_asset_id" toml:"user_asset_id" yaml:"user_asset_id"`
	UserID        string      `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	InitiatedFrom string      `boiler:"initiated_from" boil:"initiated_from" json:"initiated_from" toml:"initiated_from" yaml:"initiated_from"`
	FromService   null.String `boiler:"from_service" boil:"from_service" json:"from_service,omitempty" toml:"from_service" yaml:"from_service,omitempty"`
	ToService     null.String `boiler:"to_service" boil:"to_service" json:"to_service,omitempty" toml:"to_service" yaml:"to_service,omitempty"`
	TransferTXID  string      `boiler:"transfer_tx_id" boil:"transfer_tx_id" json:"transfer_tx_id" toml:"transfer_tx_id" yaml:"transfer_tx_id"`
	TransferredAt time.Time   `boiler:"transferred_at" boil:"transferred_at" json:"transferred_at" toml:"transferred_at" yaml:"transferred_at"`

	R *assetServiceTransferEventR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetServiceTransferEventL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetServiceTransferEventColumns = struct {
	ID            string
	UserAssetID   string
	UserID        string
	InitiatedFrom string
	FromService   string
	ToService     string
	TransferTXID  string
	TransferredAt string
}{
	ID:            "id",
	UserAssetID:   "user_asset_id",
	UserID:        "user_id",
	InitiatedFrom: "initiated_from",
	FromService:   "from_service",
	ToService:     "to_service",
	TransferTXID:  "transfer_tx_id",
	TransferredAt: "transferred_at",
}

var AssetServiceTransferEventTableColumns = struct {
	ID            string
	UserAssetID   string
	UserID        string
	InitiatedFrom string
	FromService   string
	ToService     string
	TransferTXID  string
	TransferredAt string
}{
	ID:            "asset_service_transfer_events.id",
	UserAssetID:   "asset_service_transfer_events.user_asset_id",
	UserID:        "asset_service_transfer_events.user_id",
	InitiatedFrom: "asset_service_transfer_events.initiated_from",
	FromService:   "asset_service_transfer_events.from_service",
	ToService:     "asset_service_transfer_events.to_service",
	TransferTXID:  "asset_service_transfer_events.transfer_tx_id",
	TransferredAt: "asset_service_transfer_events.transferred_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AssetServiceTransferEventWhere = struct {
	ID            whereHelperint64
	UserAssetID   whereHelperstring
	UserID        whereHelperstring
	InitiatedFrom whereHelperstring
	FromService   whereHelpernull_String
	ToService     whereHelpernull_String
	TransferTXID  whereHelperstring
	TransferredAt whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "\"asset_service_transfer_events\".\"id\""},
	UserAssetID:   whereHelperstring{field: "\"asset_service_transfer_events\".\"user_asset_id\""},
	UserID:        whereHelperstring{field: "\"asset_service_transfer_events\".\"user_id\""},
	InitiatedFrom: whereHelperstring{field: "\"asset_service_transfer_events\".\"initiated_from\""},
	FromService:   whereHelpernull_String{field: "\"asset_service_transfer_events\".\"from_service\""},
	ToService:     whereHelpernull_String{field: "\"asset_service_transfer_events\".\"to_service\""},
	TransferTXID:  whereHelperstring{field: "\"asset_service_transfer_events\".\"transfer_tx_id\""},
	TransferredAt: whereHelpertime_Time{field: "\"asset_service_transfer_events\".\"transferred_at\""},
}

// AssetServiceTransferEventRels is where relationship names are stored.
var AssetServiceTransferEventRels = struct {
	FromServiceUser string
	ToServiceUser   string
	TransferTX      string
	UserAsset       string
	User            string
}{
	FromServiceUser: "FromServiceUser",
	ToServiceUser:   "ToServiceUser",
	TransferTX:      "TransferTX",
	UserAsset:       "UserAsset",
	User:            "User",
}

// assetServiceTransferEventR is where relationships are stored.
type assetServiceTransferEventR struct {
	FromServiceUser *User        `boiler:"FromServiceUser" boil:"FromServiceUser" json:"FromServiceUser" toml:"FromServiceUser" yaml:"FromServiceUser"`
	ToServiceUser   *User        `boiler:"ToServiceUser" boil:"ToServiceUser" json:"ToServiceUser" toml:"ToServiceUser" yaml:"ToServiceUser"`
	TransferTX      *Transaction `boiler:"TransferTX" boil:"TransferTX" json:"TransferTX" toml:"TransferTX" yaml:"TransferTX"`
	UserAsset       *UserAsset   `boiler:"UserAsset" boil:"UserAsset" json:"UserAsset" toml:"UserAsset" yaml:"UserAsset"`
	User            *User        `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*assetServiceTransferEventR) NewStruct() *assetServiceTransferEventR {
	return &assetServiceTransferEventR{}
}

// assetServiceTransferEventL is where Load methods for each relationship are stored.
type assetServiceTransferEventL struct{}

var (
	assetServiceTransferEventAllColumns            = []string{"id", "user_asset_id", "user_id", "initiated_from", "from_service", "to_service", "transfer_tx_id", "transferred_at"}
	assetServiceTransferEventColumnsWithoutDefault = []string{"user_asset_id", "user_id", "from_service", "to_service", "transfer_tx_id"}
	assetServiceTransferEventColumnsWithDefault    = []string{"id", "initiated_from", "transferred_at"}
	assetServiceTransferEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// AssetServiceTransferEventSlice is an alias for a slice of pointers to AssetServiceTransferEvent.
	// This should almost always be used instead of []AssetServiceTransferEvent.
	AssetServiceTransferEventSlice []*AssetServiceTransferEvent
	// AssetServiceTransferEventHook is the signature for custom AssetServiceTransferEvent hook methods
	AssetServiceTransferEventHook func(boil.Executor, *AssetServiceTransferEvent) error

	assetServiceTransferEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetServiceTransferEventType                 = reflect.TypeOf(&AssetServiceTransferEvent{})
	assetServiceTransferEventMapping              = queries.MakeStructMapping(assetServiceTransferEventType)
	assetServiceTransferEventPrimaryKeyMapping, _ = queries.BindMapping(assetServiceTransferEventType, assetServiceTransferEventMapping, assetServiceTransferEventPrimaryKeyColumns)
	assetServiceTransferEventInsertCacheMut       sync.RWMutex
	assetServiceTransferEventInsertCache          = make(map[string]insertCache)
	assetServiceTransferEventUpdateCacheMut       sync.RWMutex
	assetServiceTransferEventUpdateCache          = make(map[string]updateCache)
	assetServiceTransferEventUpsertCacheMut       sync.RWMutex
	assetServiceTransferEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetServiceTransferEventBeforeInsertHooks []AssetServiceTransferEventHook
var assetServiceTransferEventBeforeUpdateHooks []AssetServiceTransferEventHook
var assetServiceTransferEventBeforeDeleteHooks []AssetServiceTransferEventHook
var assetServiceTransferEventBeforeUpsertHooks []AssetServiceTransferEventHook

var assetServiceTransferEventAfterInsertHooks []AssetServiceTransferEventHook
var assetServiceTransferEventAfterSelectHooks []AssetServiceTransferEventHook
var assetServiceTransferEventAfterUpdateHooks []AssetServiceTransferEventHook
var assetServiceTransferEventAfterDeleteHooks []AssetServiceTransferEventHook
var assetServiceTransferEventAfterUpsertHooks []AssetServiceTransferEventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetServiceTransferEvent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetServiceTransferEvent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetServiceTransferEvent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetServiceTransferEvent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetServiceTransferEvent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetServiceTransferEvent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetServiceTransferEvent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetServiceTransferEvent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetServiceTransferEvent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetServiceTransferEventAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetServiceTransferEventHook registers your hook function for all future operations.
func AddAssetServiceTransferEventHook(hookPoint boil.HookPoint, assetServiceTransferEventHook AssetServiceTransferEventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetServiceTransferEventBeforeInsertHooks = append(assetServiceTransferEventBeforeInsertHooks, assetServiceTransferEventHook)
	case boil.BeforeUpdateHook:
		assetServiceTransferEventBeforeUpdateHooks = append(assetServiceTransferEventBeforeUpdateHooks, assetServiceTransferEventHook)
	case boil.BeforeDeleteHook:
		assetServiceTransferEventBeforeDeleteHooks = append(assetServiceTransferEventBeforeDeleteHooks, assetServiceTransferEventHook)
	case boil.BeforeUpsertHook:
		assetServiceTransferEventBeforeUpsertHooks = append(assetServiceTransferEventBeforeUpsertHooks, assetServiceTransferEventHook)
	case boil.AfterInsertHook:
		assetServiceTransferEventAfterInsertHooks = append(assetServiceTransferEventAfterInsertHooks, assetServiceTransferEventHook)
	case boil.AfterSelectHook:
		assetServiceTransferEventAfterSelectHooks = append(assetServiceTransferEventAfterSelectHooks, assetServiceTransferEventHook)
	case boil.AfterUpdateHook:
		assetServiceTransferEventAfterUpdateHooks = append(assetServiceTransferEventAfterUpdateHooks, assetServiceTransferEventHook)
	case boil.AfterDeleteHook:
		assetServiceTransferEventAfterDeleteHooks = append(assetServiceTransferEventAfterDeleteHooks, assetServiceTransferEventHook)
	case boil.AfterUpsertHook:
		assetServiceTransferEventAfterUpsertHooks = append(assetServiceTransferEventAfterUpsertHooks, assetServiceTransferEventHook)
	}
}

// One returns a single assetServiceTransferEvent record from the query.
func (q assetServiceTransferEventQuery) One(exec boil.Executor) (*AssetServiceTransferEvent, error) {
	o := &AssetServiceTransferEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for asset_service_transfer_events")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssetServiceTransferEvent records from the query.
func (q assetServiceTransferEventQuery) All(exec boil.Executor) (AssetServiceTransferEventSlice, error) {
	var o []*AssetServiceTransferEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to AssetServiceTransferEvent slice")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssetServiceTransferEvent records in the query.
func (q assetServiceTransferEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count asset_service_transfer_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assetServiceTransferEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if asset_service_transfer_events exists")
	}

	return count > 0, nil
}

// FromServiceUser pointed to by the foreign key.
func (o *AssetServiceTransferEvent) FromServiceUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromService),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ToServiceUser pointed to by the foreign key.
func (o *AssetServiceTransferEvent) ToServiceUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToService),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// TransferTX pointed to by the foreign key.
func (o *AssetServiceTransferEvent) TransferTX(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransferTXID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// UserAsset pointed to by the foreign key.
func (o *AssetServiceTransferEvent) UserAsset(mods ...qm.QueryMod) userAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserAssetID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := UserAssets(queryMods...)
	queries.SetFrom(query.Query, "\"user_assets\"")

	return query
}

// User pointed to by the foreign key.
func (o *AssetServiceTransferEvent) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadFromServiceUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetServiceTransferEventL) LoadFromServiceUser(e boil.Executor, singular bool, maybeAssetServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetServiceTransferEvent
	var object *AssetServiceTransferEvent

	if singular {
		object = maybeAssetServiceTransferEvent.(*AssetServiceTransferEvent)
	} else {
		slice = *maybeAssetServiceTransferEvent.(*[]*AssetServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetServiceTransferEventR{}
		}
		if !queries.IsNil(object.FromService) {
			args = append(args, object.FromService)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetServiceTransferEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FromService) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FromService) {
				args = append(args, obj.FromService)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromServiceUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FromServiceAssetServiceTransferEvents = append(foreign.R.FromServiceAssetServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FromService, foreign.ID) {
				local.R.FromServiceUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FromServiceAssetServiceTransferEvents = append(foreign.R.FromServiceAssetServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadToServiceUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetServiceTransferEventL) LoadToServiceUser(e boil.Executor, singular bool, maybeAssetServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetServiceTransferEvent
	var object *AssetServiceTransferEvent

	if singular {
		object = maybeAssetServiceTransferEvent.(*AssetServiceTransferEvent)
	} else {
		slice = *maybeAssetServiceTransferEvent.(*[]*AssetServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetServiceTransferEventR{}
		}
		if !queries.IsNil(object.ToService) {
			args = append(args, object.ToService)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetServiceTransferEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ToService) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ToService) {
				args = append(args, obj.ToService)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToServiceUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ToServiceAssetServiceTransferEvents = append(foreign.R.ToServiceAssetServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ToService, foreign.ID) {
				local.R.ToServiceUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ToServiceAssetServiceTransferEvents = append(foreign.R.ToServiceAssetServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferTX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetServiceTransferEventL) LoadTransferTX(e boil.Executor, singular bool, maybeAssetServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetServiceTransferEvent
	var object *AssetServiceTransferEvent

	if singular {
		object = maybeAssetServiceTransferEvent.(*AssetServiceTransferEvent)
	} else {
		slice = *maybeAssetServiceTransferEvent.(*[]*AssetServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetServiceTransferEventR{}
		}
		args = append(args, object.TransferTXID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetServiceTransferEventR{}
			}

			for _, a := range args {
				if a == obj.TransferTXID {
					continue Outer
				}
			}

			args = append(args, obj.TransferTXID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransferTX = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransferTXAssetServiceTransferEvents = append(foreign.R.TransferTXAssetServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransferTXID == foreign.ID {
				local.R.TransferTX = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransferTXAssetServiceTransferEvents = append(foreign.R.TransferTXAssetServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUserAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetServiceTransferEventL) LoadUserAsset(e boil.Executor, singular bool, maybeAssetServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetServiceTransferEvent
	var object *AssetServiceTransferEvent

	if singular {
		object = maybeAssetServiceTransferEvent.(*AssetServiceTransferEvent)
	} else {
		slice = *maybeAssetServiceTransferEvent.(*[]*AssetServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetServiceTransferEventR{}
		}
		args = append(args, object.UserAssetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetServiceTransferEventR{}
			}

			for _, a := range args {
				if a == obj.UserAssetID {
					continue Outer
				}
			}

			args = append(args, obj.UserAssetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_assets`),
		qm.WhereIn(`user_assets.id in ?`, args...),
		qmhelper.WhereIsNull(`user_assets.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAsset")
	}

	var resultSlice []*UserAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAsset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_assets")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAsset = foreign
		if foreign.R == nil {
			foreign.R = &userAssetR{}
		}
		foreign.R.AssetServiceTransferEvents = append(foreign.R.AssetServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAssetID == foreign.ID {
				local.R.UserAsset = foreign
				if foreign.R == nil {
					foreign.R = &userAssetR{}
				}
				foreign.R.AssetServiceTransferEvents = append(foreign.R.AssetServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetServiceTransferEventL) LoadUser(e boil.Executor, singular bool, maybeAssetServiceTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetServiceTransferEvent
	var object *AssetServiceTransferEvent

	if singular {
		object = maybeAssetServiceTransferEvent.(*AssetServiceTransferEvent)
	} else {
		slice = *maybeAssetServiceTransferEvent.(*[]*AssetServiceTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetServiceTransferEventR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetServiceTransferEventR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AssetServiceTransferEvents = append(foreign.R.AssetServiceTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AssetServiceTransferEvents = append(foreign.R.AssetServiceTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// SetFromServiceUser of the assetServiceTransferEvent to the related item.
// Sets o.R.FromServiceUser to related.
// Adds o to related.R.FromServiceAssetServiceTransferEvents.
func (o *AssetServiceTransferEvent) SetFromServiceUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_service"}),
		strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FromService, related.ID)
	if o.R == nil {
		o.R = &assetServiceTransferEventR{
			FromServiceUser: related,
		}
	} else {
		o.R.FromServiceUser = related
	}

	if related.R == nil {
		related.R = &userR{
			FromServiceAssetServiceTransferEvents: AssetServiceTransferEventSlice{o},
		}
	} else {
		related.R.FromServiceAssetServiceTransferEvents = append(related.R.FromServiceAssetServiceTransferEvents, o)
	}

	return nil
}

// RemoveFromServiceUser relationship.
// Sets o.R.FromServiceUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AssetServiceTransferEvent) RemoveFromServiceUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.FromService, nil)
	if _, err = o.Update(exec, boil.Whitelist("from_service")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FromServiceUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FromServiceAssetServiceTransferEvents {
		if queries.Equal(o.FromService, ri.FromService) {
			continue
		}

		ln := len(related.R.FromServiceAssetServiceTransferEvents)
		if ln > 1 && i < ln-1 {
			related.R.FromServiceAssetServiceTransferEvents[i] = related.R.FromServiceAssetServiceTransferEvents[ln-1]
		}
		related.R.FromServiceAssetServiceTransferEvents = related.R.FromServiceAssetServiceTransferEvents[:ln-1]
		break
	}
	return nil
}

// SetToServiceUser of the assetServiceTransferEvent to the related item.
// Sets o.R.ToServiceUser to related.
// Adds o to related.R.ToServiceAssetServiceTransferEvents.
func (o *AssetServiceTransferEvent) SetToServiceUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_service"}),
		strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ToService, related.ID)
	if o.R == nil {
		o.R = &assetServiceTransferEventR{
			ToServiceUser: related,
		}
	} else {
		o.R.ToServiceUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ToServiceAssetServiceTransferEvents: AssetServiceTransferEventSlice{o},
		}
	} else {
		related.R.ToServiceAssetServiceTransferEvents = append(related.R.ToServiceAssetServiceTransferEvents, o)
	}

	return nil
}

// RemoveToServiceUser relationship.
// Sets o.R.ToServiceUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AssetServiceTransferEvent) RemoveToServiceUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.ToService, nil)
	if _, err = o.Update(exec, boil.Whitelist("to_service")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ToServiceUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ToServiceAssetServiceTransferEvents {
		if queries.Equal(o.ToService, ri.ToService) {
			continue
		}

		ln := len(related.R.ToServiceAssetServiceTransferEvents)
		if ln > 1 && i < ln-1 {
			related.R.ToServiceAssetServiceTransferEvents[i] = related.R.ToServiceAssetServiceTransferEvents[ln-1]
		}
		related.R.ToServiceAssetServiceTransferEvents = related.R.ToServiceAssetServiceTransferEvents[:ln-1]
		break
	}
	return nil
}

// SetTransferTX of the assetServiceTransferEvent to the related item.
// Sets o.R.TransferTX to related.
// Adds o to related.R.TransferTXAssetServiceTransferEvents.
func (o *AssetServiceTransferEvent) SetTransferTX(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_tx_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransferTXID = related.ID
	if o.R == nil {
		o.R = &assetServiceTransferEventR{
			TransferTX: related,
		}
	} else {
		o.R.TransferTX = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransferTXAssetServiceTransferEvents: AssetServiceTransferEventSlice{o},
		}
	} else {
		related.R.TransferTXAssetServiceTransferEvents = append(related.R.TransferTXAssetServiceTransferEvents, o)
	}

	return nil
}

// SetUserAsset of the assetServiceTransferEvent to the related item.
// Sets o.R.UserAsset to related.
// Adds o to related.R.AssetServiceTransferEvents.
func (o *AssetServiceTransferEvent) SetUserAsset(exec boil.Executor, insert bool, related *UserAsset) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_asset_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAssetID = related.ID
	if o.R == nil {
		o.R = &assetServiceTransferEventR{
			UserAsset: related,
		}
	} else {
		o.R.UserAsset = related
	}

	if related.R == nil {
		related.R = &userAssetR{
			AssetServiceTransferEvents: AssetServiceTransferEventSlice{o},
		}
	} else {
		related.R.AssetServiceTransferEvents = append(related.R.AssetServiceTransferEvents, o)
	}

	return nil
}

// SetUser of the assetServiceTransferEvent to the related item.
// Sets o.R.User to related.
// Adds o to related.R.AssetServiceTransferEvents.
func (o *AssetServiceTransferEvent) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &assetServiceTransferEventR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			AssetServiceTransferEvents: AssetServiceTransferEventSlice{o},
		}
	} else {
		related.R.AssetServiceTransferEvents = append(related.R.AssetServiceTransferEvents, o)
	}

	return nil
}

// AssetServiceTransferEvents retrieves all the records using an executor.
func AssetServiceTransferEvents(mods ...qm.QueryMod) assetServiceTransferEventQuery {
	mods = append(mods, qm.From("\"asset_service_transfer_events\""))
	return assetServiceTransferEventQuery{NewQuery(mods...)}
}

// FindAssetServiceTransferEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetServiceTransferEvent(exec boil.Executor, iD int64, selectCols ...string) (*AssetServiceTransferEvent, error) {
	assetServiceTransferEventObj := &AssetServiceTransferEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asset_service_transfer_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, assetServiceTransferEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from asset_service_transfer_events")
	}

	if err = assetServiceTransferEventObj.doAfterSelectHooks(exec); err != nil {
		return assetServiceTransferEventObj, err
	}

	return assetServiceTransferEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetServiceTransferEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no asset_service_transfer_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetServiceTransferEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetServiceTransferEventInsertCacheMut.RLock()
	cache, cached := assetServiceTransferEventInsertCache[key]
	assetServiceTransferEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetServiceTransferEventAllColumns,
			assetServiceTransferEventColumnsWithDefault,
			assetServiceTransferEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetServiceTransferEventType, assetServiceTransferEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetServiceTransferEventType, assetServiceTransferEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asset_service_transfer_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asset_service_transfer_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into asset_service_transfer_events")
	}

	if !cached {
		assetServiceTransferEventInsertCacheMut.Lock()
		assetServiceTransferEventInsertCache[key] = cache
		assetServiceTransferEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the AssetServiceTransferEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetServiceTransferEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetServiceTransferEventUpdateCacheMut.RLock()
	cache, cached := assetServiceTransferEventUpdateCache[key]
	assetServiceTransferEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetServiceTransferEventAllColumns,
			assetServiceTransferEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update asset_service_transfer_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assetServiceTransferEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetServiceTransferEventType, assetServiceTransferEventMapping, append(wl, assetServiceTransferEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update asset_service_transfer_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for asset_service_transfer_events")
	}

	if !cached {
		assetServiceTransferEventUpdateCacheMut.Lock()
		assetServiceTransferEventUpdateCache[key] = cache
		assetServiceTransferEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetServiceTransferEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for asset_service_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for asset_service_transfer_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetServiceTransferEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetServiceTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assetServiceTransferEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in assetServiceTransferEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all assetServiceTransferEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetServiceTransferEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no asset_service_transfer_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetServiceTransferEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetServiceTransferEventUpsertCacheMut.RLock()
	cache, cached := assetServiceTransferEventUpsertCache[key]
	assetServiceTransferEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetServiceTransferEventAllColumns,
			assetServiceTransferEventColumnsWithDefault,
			assetServiceTransferEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assetServiceTransferEventAllColumns,
			assetServiceTransferEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert asset_service_transfer_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assetServiceTransferEventPrimaryKeyColumns))
			copy(conflict, assetServiceTransferEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asset_service_transfer_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assetServiceTransferEventType, assetServiceTransferEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetServiceTransferEventType, assetServiceTransferEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert asset_service_transfer_events")
	}

	if !cached {
		assetServiceTransferEventUpsertCacheMut.Lock()
		assetServiceTransferEventUpsertCache[key] = cache
		assetServiceTransferEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single AssetServiceTransferEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetServiceTransferEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no AssetServiceTransferEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetServiceTransferEventPrimaryKeyMapping)
	sql := "DELETE FROM \"asset_service_transfer_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from asset_service_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for asset_service_transfer_events")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetServiceTransferEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no assetServiceTransferEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from asset_service_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for asset_service_transfer_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetServiceTransferEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assetServiceTransferEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetServiceTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asset_service_transfer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetServiceTransferEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from assetServiceTransferEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for asset_service_transfer_events")
	}

	if len(assetServiceTransferEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetServiceTransferEvent) Reload(exec boil.Executor) error {
	ret, err := FindAssetServiceTransferEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetServiceTransferEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetServiceTransferEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetServiceTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asset_service_transfer_events\".* FROM \"asset_service_transfer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetServiceTransferEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in AssetServiceTransferEventSlice")
	}

	*o = slice

	return nil
}

// AssetServiceTransferEventExists checks if the AssetServiceTransferEvent row exists.
func AssetServiceTransferEventExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asset_service_transfer_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if asset_service_transfer_events exists")
	}

	return exists, nil
}
