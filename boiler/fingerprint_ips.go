// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FingerprintIP is an object representing the database table.
type FingerprintIP struct {
	IP            string    `boiler:"ip" boil:"ip" json:"ip" toml:"ip" yaml:"ip"`
	FingerprintID string    `boiler:"fingerprint_id" boil:"fingerprint_id" json:"fingerprint_id" toml:"fingerprint_id" yaml:"fingerprint_id"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *fingerprintIPR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L fingerprintIPL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FingerprintIPColumns = struct {
	IP            string
	FingerprintID string
	DeletedAt     string
	CreatedAt     string
}{
	IP:            "ip",
	FingerprintID: "fingerprint_id",
	DeletedAt:     "deleted_at",
	CreatedAt:     "created_at",
}

var FingerprintIPTableColumns = struct {
	IP            string
	FingerprintID string
	DeletedAt     string
	CreatedAt     string
}{
	IP:            "fingerprint_ips.ip",
	FingerprintID: "fingerprint_ips.fingerprint_id",
	DeletedAt:     "fingerprint_ips.deleted_at",
	CreatedAt:     "fingerprint_ips.created_at",
}

// Generated where

var FingerprintIPWhere = struct {
	IP            whereHelperstring
	FingerprintID whereHelperstring
	DeletedAt     whereHelpernull_Time
	CreatedAt     whereHelpertime_Time
}{
	IP:            whereHelperstring{field: "\"fingerprint_ips\".\"ip\""},
	FingerprintID: whereHelperstring{field: "\"fingerprint_ips\".\"fingerprint_id\""},
	DeletedAt:     whereHelpernull_Time{field: "\"fingerprint_ips\".\"deleted_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"fingerprint_ips\".\"created_at\""},
}

// FingerprintIPRels is where relationship names are stored.
var FingerprintIPRels = struct {
	Fingerprint string
}{
	Fingerprint: "Fingerprint",
}

// fingerprintIPR is where relationships are stored.
type fingerprintIPR struct {
	Fingerprint *Fingerprint `boiler:"Fingerprint" boil:"Fingerprint" json:"Fingerprint" toml:"Fingerprint" yaml:"Fingerprint"`
}

// NewStruct creates a new relationship struct
func (*fingerprintIPR) NewStruct() *fingerprintIPR {
	return &fingerprintIPR{}
}

// fingerprintIPL is where Load methods for each relationship are stored.
type fingerprintIPL struct{}

var (
	fingerprintIPAllColumns            = []string{"ip", "fingerprint_id", "deleted_at", "created_at"}
	fingerprintIPColumnsWithoutDefault = []string{"ip", "fingerprint_id"}
	fingerprintIPColumnsWithDefault    = []string{"deleted_at", "created_at"}
	fingerprintIPPrimaryKeyColumns     = []string{"ip", "fingerprint_id"}
	fingerprintIPGeneratedColumns      = []string{}
)

type (
	// FingerprintIPSlice is an alias for a slice of pointers to FingerprintIP.
	// This should almost always be used instead of []FingerprintIP.
	FingerprintIPSlice []*FingerprintIP
	// FingerprintIPHook is the signature for custom FingerprintIP hook methods
	FingerprintIPHook func(boil.Executor, *FingerprintIP) error

	fingerprintIPQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fingerprintIPType                 = reflect.TypeOf(&FingerprintIP{})
	fingerprintIPMapping              = queries.MakeStructMapping(fingerprintIPType)
	fingerprintIPPrimaryKeyMapping, _ = queries.BindMapping(fingerprintIPType, fingerprintIPMapping, fingerprintIPPrimaryKeyColumns)
	fingerprintIPInsertCacheMut       sync.RWMutex
	fingerprintIPInsertCache          = make(map[string]insertCache)
	fingerprintIPUpdateCacheMut       sync.RWMutex
	fingerprintIPUpdateCache          = make(map[string]updateCache)
	fingerprintIPUpsertCacheMut       sync.RWMutex
	fingerprintIPUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fingerprintIPAfterSelectHooks []FingerprintIPHook

var fingerprintIPBeforeInsertHooks []FingerprintIPHook
var fingerprintIPAfterInsertHooks []FingerprintIPHook

var fingerprintIPBeforeUpdateHooks []FingerprintIPHook
var fingerprintIPAfterUpdateHooks []FingerprintIPHook

var fingerprintIPBeforeDeleteHooks []FingerprintIPHook
var fingerprintIPAfterDeleteHooks []FingerprintIPHook

var fingerprintIPBeforeUpsertHooks []FingerprintIPHook
var fingerprintIPAfterUpsertHooks []FingerprintIPHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FingerprintIP) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FingerprintIP) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FingerprintIP) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FingerprintIP) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FingerprintIP) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FingerprintIP) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FingerprintIP) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FingerprintIP) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FingerprintIP) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fingerprintIPAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFingerprintIPHook registers your hook function for all future operations.
func AddFingerprintIPHook(hookPoint boil.HookPoint, fingerprintIPHook FingerprintIPHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fingerprintIPAfterSelectHooks = append(fingerprintIPAfterSelectHooks, fingerprintIPHook)
	case boil.BeforeInsertHook:
		fingerprintIPBeforeInsertHooks = append(fingerprintIPBeforeInsertHooks, fingerprintIPHook)
	case boil.AfterInsertHook:
		fingerprintIPAfterInsertHooks = append(fingerprintIPAfterInsertHooks, fingerprintIPHook)
	case boil.BeforeUpdateHook:
		fingerprintIPBeforeUpdateHooks = append(fingerprintIPBeforeUpdateHooks, fingerprintIPHook)
	case boil.AfterUpdateHook:
		fingerprintIPAfterUpdateHooks = append(fingerprintIPAfterUpdateHooks, fingerprintIPHook)
	case boil.BeforeDeleteHook:
		fingerprintIPBeforeDeleteHooks = append(fingerprintIPBeforeDeleteHooks, fingerprintIPHook)
	case boil.AfterDeleteHook:
		fingerprintIPAfterDeleteHooks = append(fingerprintIPAfterDeleteHooks, fingerprintIPHook)
	case boil.BeforeUpsertHook:
		fingerprintIPBeforeUpsertHooks = append(fingerprintIPBeforeUpsertHooks, fingerprintIPHook)
	case boil.AfterUpsertHook:
		fingerprintIPAfterUpsertHooks = append(fingerprintIPAfterUpsertHooks, fingerprintIPHook)
	}
}

// One returns a single fingerprintIP record from the query.
func (q fingerprintIPQuery) One(exec boil.Executor) (*FingerprintIP, error) {
	o := &FingerprintIP{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for fingerprint_ips")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FingerprintIP records from the query.
func (q fingerprintIPQuery) All(exec boil.Executor) (FingerprintIPSlice, error) {
	var o []*FingerprintIP

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FingerprintIP slice")
	}

	if len(fingerprintIPAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FingerprintIP records in the query.
func (q fingerprintIPQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count fingerprint_ips rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fingerprintIPQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if fingerprint_ips exists")
	}

	return count > 0, nil
}

// Fingerprint pointed to by the foreign key.
func (o *FingerprintIP) Fingerprint(mods ...qm.QueryMod) fingerprintQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FingerprintID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Fingerprints(queryMods...)
	queries.SetFrom(query.Query, "\"fingerprints\"")

	return query
}

// LoadFingerprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fingerprintIPL) LoadFingerprint(e boil.Executor, singular bool, maybeFingerprintIP interface{}, mods queries.Applicator) error {
	var slice []*FingerprintIP
	var object *FingerprintIP

	if singular {
		object = maybeFingerprintIP.(*FingerprintIP)
	} else {
		slice = *maybeFingerprintIP.(*[]*FingerprintIP)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fingerprintIPR{}
		}
		args = append(args, object.FingerprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fingerprintIPR{}
			}

			for _, a := range args {
				if a == obj.FingerprintID {
					continue Outer
				}
			}

			args = append(args, obj.FingerprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fingerprints`),
		qm.WhereIn(`fingerprints.id in ?`, args...),
		qmhelper.WhereIsNull(`fingerprints.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Fingerprint")
	}

	var resultSlice []*Fingerprint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Fingerprint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fingerprints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fingerprints")
	}

	if len(fingerprintIPAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fingerprint = foreign
		if foreign.R == nil {
			foreign.R = &fingerprintR{}
		}
		foreign.R.FingerprintIps = append(foreign.R.FingerprintIps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FingerprintID == foreign.ID {
				local.R.Fingerprint = foreign
				if foreign.R == nil {
					foreign.R = &fingerprintR{}
				}
				foreign.R.FingerprintIps = append(foreign.R.FingerprintIps, local)
				break
			}
		}
	}

	return nil
}

// SetFingerprint of the fingerprintIP to the related item.
// Sets o.R.Fingerprint to related.
// Adds o to related.R.FingerprintIps.
func (o *FingerprintIP) SetFingerprint(exec boil.Executor, insert bool, related *Fingerprint) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fingerprint_ips\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fingerprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, fingerprintIPPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.IP, o.FingerprintID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FingerprintID = related.ID
	if o.R == nil {
		o.R = &fingerprintIPR{
			Fingerprint: related,
		}
	} else {
		o.R.Fingerprint = related
	}

	if related.R == nil {
		related.R = &fingerprintR{
			FingerprintIps: FingerprintIPSlice{o},
		}
	} else {
		related.R.FingerprintIps = append(related.R.FingerprintIps, o)
	}

	return nil
}

// FingerprintIps retrieves all the records using an executor.
func FingerprintIps(mods ...qm.QueryMod) fingerprintIPQuery {
	mods = append(mods, qm.From("\"fingerprint_ips\""), qmhelper.WhereIsNull("\"fingerprint_ips\".\"deleted_at\""))
	return fingerprintIPQuery{NewQuery(mods...)}
}

// FindFingerprintIP retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFingerprintIP(exec boil.Executor, iP string, fingerprintID string, selectCols ...string) (*FingerprintIP, error) {
	fingerprintIPObj := &FingerprintIP{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fingerprint_ips\" where \"ip\"=$1 AND \"fingerprint_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iP, fingerprintID)

	err := q.Bind(nil, exec, fingerprintIPObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from fingerprint_ips")
	}

	if err = fingerprintIPObj.doAfterSelectHooks(exec); err != nil {
		return fingerprintIPObj, err
	}

	return fingerprintIPObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FingerprintIP) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fingerprint_ips provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fingerprintIPColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fingerprintIPInsertCacheMut.RLock()
	cache, cached := fingerprintIPInsertCache[key]
	fingerprintIPInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fingerprintIPAllColumns,
			fingerprintIPColumnsWithDefault,
			fingerprintIPColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fingerprintIPType, fingerprintIPMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fingerprintIPType, fingerprintIPMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fingerprint_ips\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fingerprint_ips\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into fingerprint_ips")
	}

	if !cached {
		fingerprintIPInsertCacheMut.Lock()
		fingerprintIPInsertCache[key] = cache
		fingerprintIPInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FingerprintIP.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FingerprintIP) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fingerprintIPUpdateCacheMut.RLock()
	cache, cached := fingerprintIPUpdateCache[key]
	fingerprintIPUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fingerprintIPAllColumns,
			fingerprintIPPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update fingerprint_ips, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fingerprint_ips\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fingerprintIPPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fingerprintIPType, fingerprintIPMapping, append(wl, fingerprintIPPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update fingerprint_ips row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for fingerprint_ips")
	}

	if !cached {
		fingerprintIPUpdateCacheMut.Lock()
		fingerprintIPUpdateCache[key] = cache
		fingerprintIPUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fingerprintIPQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for fingerprint_ips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for fingerprint_ips")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FingerprintIPSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fingerprintIPPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fingerprint_ips\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fingerprintIPPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in fingerprintIP slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all fingerprintIP")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FingerprintIP) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fingerprint_ips provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fingerprintIPColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fingerprintIPUpsertCacheMut.RLock()
	cache, cached := fingerprintIPUpsertCache[key]
	fingerprintIPUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fingerprintIPAllColumns,
			fingerprintIPColumnsWithDefault,
			fingerprintIPColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fingerprintIPAllColumns,
			fingerprintIPPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert fingerprint_ips, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fingerprintIPPrimaryKeyColumns))
			copy(conflict, fingerprintIPPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fingerprint_ips\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fingerprintIPType, fingerprintIPMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fingerprintIPType, fingerprintIPMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert fingerprint_ips")
	}

	if !cached {
		fingerprintIPUpsertCacheMut.Lock()
		fingerprintIPUpsertCache[key] = cache
		fingerprintIPUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FingerprintIP record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FingerprintIP) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FingerprintIP provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fingerprintIPPrimaryKeyMapping)
		sql = "DELETE FROM \"fingerprint_ips\" WHERE \"ip\"=$1 AND \"fingerprint_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"fingerprint_ips\" SET %s WHERE \"ip\"=$2 AND \"fingerprint_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(fingerprintIPType, fingerprintIPMapping, append(wl, fingerprintIPPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from fingerprint_ips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for fingerprint_ips")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fingerprintIPQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no fingerprintIPQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fingerprint_ips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fingerprint_ips")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FingerprintIPSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fingerprintIPBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fingerprintIPPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"fingerprint_ips\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fingerprintIPPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fingerprintIPPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"fingerprint_ips\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, fingerprintIPPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fingerprintIP slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fingerprint_ips")
	}

	if len(fingerprintIPAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FingerprintIP) Reload(exec boil.Executor) error {
	ret, err := FindFingerprintIP(exec, o.IP, o.FingerprintID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FingerprintIPSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FingerprintIPSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fingerprintIPPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fingerprint_ips\".* FROM \"fingerprint_ips\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fingerprintIPPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FingerprintIPSlice")
	}

	*o = slice

	return nil
}

// FingerprintIPExists checks if the FingerprintIP row exists.
func FingerprintIPExists(exec boil.Executor, iP string, fingerprintID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fingerprint_ips\" where \"ip\"=$1 AND \"fingerprint_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iP, fingerprintID)
	}
	row := exec.QueryRow(sql, iP, fingerprintID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if fingerprint_ips exists")
	}

	return exists, nil
}
