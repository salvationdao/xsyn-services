// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssetTransferEvent is an object representing the database table.
type AssetTransferEvent struct {
	ID            int64       `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserAssetID   string      `boiler:"user_asset_id" boil:"user_asset_id" json:"user_asset_id" toml:"user_asset_id" yaml:"user_asset_id"`
	UserAssetHash string      `boiler:"user_asset_hash" boil:"user_asset_hash" json:"user_asset_hash" toml:"user_asset_hash" yaml:"user_asset_hash"`
	FromUserID    string      `boiler:"from_user_id" boil:"from_user_id" json:"from_user_id" toml:"from_user_id" yaml:"from_user_id"`
	ToUserID      string      `boiler:"to_user_id" boil:"to_user_id" json:"to_user_id" toml:"to_user_id" yaml:"to_user_id"`
	InitiatedFrom string      `boiler:"initiated_from" boil:"initiated_from" json:"initiated_from" toml:"initiated_from" yaml:"initiated_from"`
	TransferTXID  null.String `boiler:"transfer_tx_id" boil:"transfer_tx_id" json:"transfer_tx_id,omitempty" toml:"transfer_tx_id" yaml:"transfer_tx_id,omitempty"`
	TransferredAt time.Time   `boiler:"transferred_at" boil:"transferred_at" json:"transferred_at" toml:"transferred_at" yaml:"transferred_at"`

	R *assetTransferEventR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetTransferEventL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetTransferEventColumns = struct {
	ID            string
	UserAssetID   string
	UserAssetHash string
	FromUserID    string
	ToUserID      string
	InitiatedFrom string
	TransferTXID  string
	TransferredAt string
}{
	ID:            "id",
	UserAssetID:   "user_asset_id",
	UserAssetHash: "user_asset_hash",
	FromUserID:    "from_user_id",
	ToUserID:      "to_user_id",
	InitiatedFrom: "initiated_from",
	TransferTXID:  "transfer_tx_id",
	TransferredAt: "transferred_at",
}

var AssetTransferEventTableColumns = struct {
	ID            string
	UserAssetID   string
	UserAssetHash string
	FromUserID    string
	ToUserID      string
	InitiatedFrom string
	TransferTXID  string
	TransferredAt string
}{
	ID:            "asset_transfer_events.id",
	UserAssetID:   "asset_transfer_events.user_asset_id",
	UserAssetHash: "asset_transfer_events.user_asset_hash",
	FromUserID:    "asset_transfer_events.from_user_id",
	ToUserID:      "asset_transfer_events.to_user_id",
	InitiatedFrom: "asset_transfer_events.initiated_from",
	TransferTXID:  "asset_transfer_events.transfer_tx_id",
	TransferredAt: "asset_transfer_events.transferred_at",
}

// Generated where

var AssetTransferEventWhere = struct {
	ID            whereHelperint64
	UserAssetID   whereHelperstring
	UserAssetHash whereHelperstring
	FromUserID    whereHelperstring
	ToUserID      whereHelperstring
	InitiatedFrom whereHelperstring
	TransferTXID  whereHelpernull_String
	TransferredAt whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "\"asset_transfer_events\".\"id\""},
	UserAssetID:   whereHelperstring{field: "\"asset_transfer_events\".\"user_asset_id\""},
	UserAssetHash: whereHelperstring{field: "\"asset_transfer_events\".\"user_asset_hash\""},
	FromUserID:    whereHelperstring{field: "\"asset_transfer_events\".\"from_user_id\""},
	ToUserID:      whereHelperstring{field: "\"asset_transfer_events\".\"to_user_id\""},
	InitiatedFrom: whereHelperstring{field: "\"asset_transfer_events\".\"initiated_from\""},
	TransferTXID:  whereHelpernull_String{field: "\"asset_transfer_events\".\"transfer_tx_id\""},
	TransferredAt: whereHelpertime_Time{field: "\"asset_transfer_events\".\"transferred_at\""},
}

// AssetTransferEventRels is where relationship names are stored.
var AssetTransferEventRels = struct {
	FromUser               string
	ToUser                 string
	TransferTX             string
	UserAssetHashUserAsset string
	UserAsset              string
}{
	FromUser:               "FromUser",
	ToUser:                 "ToUser",
	TransferTX:             "TransferTX",
	UserAssetHashUserAsset: "UserAssetHashUserAsset",
	UserAsset:              "UserAsset",
}

// assetTransferEventR is where relationships are stored.
type assetTransferEventR struct {
	FromUser               *User        `boiler:"FromUser" boil:"FromUser" json:"FromUser" toml:"FromUser" yaml:"FromUser"`
	ToUser                 *User        `boiler:"ToUser" boil:"ToUser" json:"ToUser" toml:"ToUser" yaml:"ToUser"`
	TransferTX             *Transaction `boiler:"TransferTX" boil:"TransferTX" json:"TransferTX" toml:"TransferTX" yaml:"TransferTX"`
	UserAssetHashUserAsset *UserAsset   `boiler:"UserAssetHashUserAsset" boil:"UserAssetHashUserAsset" json:"UserAssetHashUserAsset" toml:"UserAssetHashUserAsset" yaml:"UserAssetHashUserAsset"`
	UserAsset              *UserAsset   `boiler:"UserAsset" boil:"UserAsset" json:"UserAsset" toml:"UserAsset" yaml:"UserAsset"`
}

// NewStruct creates a new relationship struct
func (*assetTransferEventR) NewStruct() *assetTransferEventR {
	return &assetTransferEventR{}
}

// assetTransferEventL is where Load methods for each relationship are stored.
type assetTransferEventL struct{}

var (
	assetTransferEventAllColumns            = []string{"id", "user_asset_id", "user_asset_hash", "from_user_id", "to_user_id", "initiated_from", "transfer_tx_id", "transferred_at"}
	assetTransferEventColumnsWithoutDefault = []string{"user_asset_id", "user_asset_hash", "from_user_id", "to_user_id", "transfer_tx_id"}
	assetTransferEventColumnsWithDefault    = []string{"id", "initiated_from", "transferred_at"}
	assetTransferEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// AssetTransferEventSlice is an alias for a slice of pointers to AssetTransferEvent.
	// This should almost always be used instead of []AssetTransferEvent.
	AssetTransferEventSlice []*AssetTransferEvent
	// AssetTransferEventHook is the signature for custom AssetTransferEvent hook methods
	AssetTransferEventHook func(boil.Executor, *AssetTransferEvent) error

	assetTransferEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetTransferEventType                 = reflect.TypeOf(&AssetTransferEvent{})
	assetTransferEventMapping              = queries.MakeStructMapping(assetTransferEventType)
	assetTransferEventPrimaryKeyMapping, _ = queries.BindMapping(assetTransferEventType, assetTransferEventMapping, assetTransferEventPrimaryKeyColumns)
	assetTransferEventInsertCacheMut       sync.RWMutex
	assetTransferEventInsertCache          = make(map[string]insertCache)
	assetTransferEventUpdateCacheMut       sync.RWMutex
	assetTransferEventUpdateCache          = make(map[string]updateCache)
	assetTransferEventUpsertCacheMut       sync.RWMutex
	assetTransferEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetTransferEventBeforeInsertHooks []AssetTransferEventHook
var assetTransferEventBeforeUpdateHooks []AssetTransferEventHook
var assetTransferEventBeforeDeleteHooks []AssetTransferEventHook
var assetTransferEventBeforeUpsertHooks []AssetTransferEventHook

var assetTransferEventAfterInsertHooks []AssetTransferEventHook
var assetTransferEventAfterSelectHooks []AssetTransferEventHook
var assetTransferEventAfterUpdateHooks []AssetTransferEventHook
var assetTransferEventAfterDeleteHooks []AssetTransferEventHook
var assetTransferEventAfterUpsertHooks []AssetTransferEventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetTransferEvent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetTransferEvent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetTransferEvent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetTransferEvent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetTransferEvent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetTransferEvent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetTransferEvent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetTransferEvent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetTransferEvent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetTransferEventAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetTransferEventHook registers your hook function for all future operations.
func AddAssetTransferEventHook(hookPoint boil.HookPoint, assetTransferEventHook AssetTransferEventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetTransferEventBeforeInsertHooks = append(assetTransferEventBeforeInsertHooks, assetTransferEventHook)
	case boil.BeforeUpdateHook:
		assetTransferEventBeforeUpdateHooks = append(assetTransferEventBeforeUpdateHooks, assetTransferEventHook)
	case boil.BeforeDeleteHook:
		assetTransferEventBeforeDeleteHooks = append(assetTransferEventBeforeDeleteHooks, assetTransferEventHook)
	case boil.BeforeUpsertHook:
		assetTransferEventBeforeUpsertHooks = append(assetTransferEventBeforeUpsertHooks, assetTransferEventHook)
	case boil.AfterInsertHook:
		assetTransferEventAfterInsertHooks = append(assetTransferEventAfterInsertHooks, assetTransferEventHook)
	case boil.AfterSelectHook:
		assetTransferEventAfterSelectHooks = append(assetTransferEventAfterSelectHooks, assetTransferEventHook)
	case boil.AfterUpdateHook:
		assetTransferEventAfterUpdateHooks = append(assetTransferEventAfterUpdateHooks, assetTransferEventHook)
	case boil.AfterDeleteHook:
		assetTransferEventAfterDeleteHooks = append(assetTransferEventAfterDeleteHooks, assetTransferEventHook)
	case boil.AfterUpsertHook:
		assetTransferEventAfterUpsertHooks = append(assetTransferEventAfterUpsertHooks, assetTransferEventHook)
	}
}

// One returns a single assetTransferEvent record from the query.
func (q assetTransferEventQuery) One(exec boil.Executor) (*AssetTransferEvent, error) {
	o := &AssetTransferEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for asset_transfer_events")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssetTransferEvent records from the query.
func (q assetTransferEventQuery) All(exec boil.Executor) (AssetTransferEventSlice, error) {
	var o []*AssetTransferEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to AssetTransferEvent slice")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssetTransferEvent records in the query.
func (q assetTransferEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count asset_transfer_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assetTransferEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if asset_transfer_events exists")
	}

	return count > 0, nil
}

// FromUser pointed to by the foreign key.
func (o *AssetTransferEvent) FromUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromUserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ToUser pointed to by the foreign key.
func (o *AssetTransferEvent) ToUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToUserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// TransferTX pointed to by the foreign key.
func (o *AssetTransferEvent) TransferTX(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransferTXID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// UserAssetHashUserAsset pointed to by the foreign key.
func (o *AssetTransferEvent) UserAssetHashUserAsset(mods ...qm.QueryMod) userAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"hash\" = ?", o.UserAssetHash),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := UserAssets(queryMods...)
	queries.SetFrom(query.Query, "\"user_assets\"")

	return query
}

// UserAsset pointed to by the foreign key.
func (o *AssetTransferEvent) UserAsset(mods ...qm.QueryMod) userAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserAssetID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := UserAssets(queryMods...)
	queries.SetFrom(query.Query, "\"user_assets\"")

	return query
}

// LoadFromUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetTransferEventL) LoadFromUser(e boil.Executor, singular bool, maybeAssetTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetTransferEvent
	var object *AssetTransferEvent

	if singular {
		object = maybeAssetTransferEvent.(*AssetTransferEvent)
	} else {
		slice = *maybeAssetTransferEvent.(*[]*AssetTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetTransferEventR{}
		}
		args = append(args, object.FromUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetTransferEventR{}
			}

			for _, a := range args {
				if a == obj.FromUserID {
					continue Outer
				}
			}

			args = append(args, obj.FromUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FromUserAssetTransferEvents = append(foreign.R.FromUserAssetTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromUserID == foreign.ID {
				local.R.FromUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FromUserAssetTransferEvents = append(foreign.R.FromUserAssetTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadToUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetTransferEventL) LoadToUser(e boil.Executor, singular bool, maybeAssetTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetTransferEvent
	var object *AssetTransferEvent

	if singular {
		object = maybeAssetTransferEvent.(*AssetTransferEvent)
	} else {
		slice = *maybeAssetTransferEvent.(*[]*AssetTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetTransferEventR{}
		}
		args = append(args, object.ToUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetTransferEventR{}
			}

			for _, a := range args {
				if a == obj.ToUserID {
					continue Outer
				}
			}

			args = append(args, obj.ToUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ToUserAssetTransferEvents = append(foreign.R.ToUserAssetTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToUserID == foreign.ID {
				local.R.ToUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ToUserAssetTransferEvents = append(foreign.R.ToUserAssetTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferTX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetTransferEventL) LoadTransferTX(e boil.Executor, singular bool, maybeAssetTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetTransferEvent
	var object *AssetTransferEvent

	if singular {
		object = maybeAssetTransferEvent.(*AssetTransferEvent)
	} else {
		slice = *maybeAssetTransferEvent.(*[]*AssetTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetTransferEventR{}
		}
		if !queries.IsNil(object.TransferTXID) {
			args = append(args, object.TransferTXID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetTransferEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TransferTXID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TransferTXID) {
				args = append(args, obj.TransferTXID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransferTX = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransferTXAssetTransferEvents = append(foreign.R.TransferTXAssetTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransferTXID, foreign.ID) {
				local.R.TransferTX = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransferTXAssetTransferEvents = append(foreign.R.TransferTXAssetTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUserAssetHashUserAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetTransferEventL) LoadUserAssetHashUserAsset(e boil.Executor, singular bool, maybeAssetTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetTransferEvent
	var object *AssetTransferEvent

	if singular {
		object = maybeAssetTransferEvent.(*AssetTransferEvent)
	} else {
		slice = *maybeAssetTransferEvent.(*[]*AssetTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetTransferEventR{}
		}
		args = append(args, object.UserAssetHash)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetTransferEventR{}
			}

			for _, a := range args {
				if a == obj.UserAssetHash {
					continue Outer
				}
			}

			args = append(args, obj.UserAssetHash)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_assets`),
		qm.WhereIn(`user_assets.hash in ?`, args...),
		qmhelper.WhereIsNull(`user_assets.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAsset")
	}

	var resultSlice []*UserAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAsset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_assets")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAssetHashUserAsset = foreign
		if foreign.R == nil {
			foreign.R = &userAssetR{}
		}
		foreign.R.UserAssetHashAssetTransferEvents = append(foreign.R.UserAssetHashAssetTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAssetHash == foreign.Hash {
				local.R.UserAssetHashUserAsset = foreign
				if foreign.R == nil {
					foreign.R = &userAssetR{}
				}
				foreign.R.UserAssetHashAssetTransferEvents = append(foreign.R.UserAssetHashAssetTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUserAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetTransferEventL) LoadUserAsset(e boil.Executor, singular bool, maybeAssetTransferEvent interface{}, mods queries.Applicator) error {
	var slice []*AssetTransferEvent
	var object *AssetTransferEvent

	if singular {
		object = maybeAssetTransferEvent.(*AssetTransferEvent)
	} else {
		slice = *maybeAssetTransferEvent.(*[]*AssetTransferEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetTransferEventR{}
		}
		args = append(args, object.UserAssetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetTransferEventR{}
			}

			for _, a := range args {
				if a == obj.UserAssetID {
					continue Outer
				}
			}

			args = append(args, obj.UserAssetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_assets`),
		qm.WhereIn(`user_assets.id in ?`, args...),
		qmhelper.WhereIsNull(`user_assets.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAsset")
	}

	var resultSlice []*UserAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAsset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_assets")
	}

	if len(assetTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAsset = foreign
		if foreign.R == nil {
			foreign.R = &userAssetR{}
		}
		foreign.R.AssetTransferEvents = append(foreign.R.AssetTransferEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAssetID == foreign.ID {
				local.R.UserAsset = foreign
				if foreign.R == nil {
					foreign.R = &userAssetR{}
				}
				foreign.R.AssetTransferEvents = append(foreign.R.AssetTransferEvents, local)
				break
			}
		}
	}

	return nil
}

// SetFromUser of the assetTransferEvent to the related item.
// Sets o.R.FromUser to related.
// Adds o to related.R.FromUserAssetTransferEvents.
func (o *AssetTransferEvent) SetFromUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromUserID = related.ID
	if o.R == nil {
		o.R = &assetTransferEventR{
			FromUser: related,
		}
	} else {
		o.R.FromUser = related
	}

	if related.R == nil {
		related.R = &userR{
			FromUserAssetTransferEvents: AssetTransferEventSlice{o},
		}
	} else {
		related.R.FromUserAssetTransferEvents = append(related.R.FromUserAssetTransferEvents, o)
	}

	return nil
}

// SetToUser of the assetTransferEvent to the related item.
// Sets o.R.ToUser to related.
// Adds o to related.R.ToUserAssetTransferEvents.
func (o *AssetTransferEvent) SetToUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToUserID = related.ID
	if o.R == nil {
		o.R = &assetTransferEventR{
			ToUser: related,
		}
	} else {
		o.R.ToUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ToUserAssetTransferEvents: AssetTransferEventSlice{o},
		}
	} else {
		related.R.ToUserAssetTransferEvents = append(related.R.ToUserAssetTransferEvents, o)
	}

	return nil
}

// SetTransferTX of the assetTransferEvent to the related item.
// Sets o.R.TransferTX to related.
// Adds o to related.R.TransferTXAssetTransferEvents.
func (o *AssetTransferEvent) SetTransferTX(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_tx_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransferTXID, related.ID)
	if o.R == nil {
		o.R = &assetTransferEventR{
			TransferTX: related,
		}
	} else {
		o.R.TransferTX = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransferTXAssetTransferEvents: AssetTransferEventSlice{o},
		}
	} else {
		related.R.TransferTXAssetTransferEvents = append(related.R.TransferTXAssetTransferEvents, o)
	}

	return nil
}

// RemoveTransferTX relationship.
// Sets o.R.TransferTX to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AssetTransferEvent) RemoveTransferTX(exec boil.Executor, related *Transaction) error {
	var err error

	queries.SetScanner(&o.TransferTXID, nil)
	if _, err = o.Update(exec, boil.Whitelist("transfer_tx_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TransferTX = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransferTXAssetTransferEvents {
		if queries.Equal(o.TransferTXID, ri.TransferTXID) {
			continue
		}

		ln := len(related.R.TransferTXAssetTransferEvents)
		if ln > 1 && i < ln-1 {
			related.R.TransferTXAssetTransferEvents[i] = related.R.TransferTXAssetTransferEvents[ln-1]
		}
		related.R.TransferTXAssetTransferEvents = related.R.TransferTXAssetTransferEvents[:ln-1]
		break
	}
	return nil
}

// SetUserAssetHashUserAsset of the assetTransferEvent to the related item.
// Sets o.R.UserAssetHashUserAsset to related.
// Adds o to related.R.UserAssetHashAssetTransferEvents.
func (o *AssetTransferEvent) SetUserAssetHashUserAsset(exec boil.Executor, insert bool, related *UserAsset) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_asset_hash"}),
		strmangle.WhereClause("\"", "\"", 2, assetTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAssetHash = related.Hash
	if o.R == nil {
		o.R = &assetTransferEventR{
			UserAssetHashUserAsset: related,
		}
	} else {
		o.R.UserAssetHashUserAsset = related
	}

	if related.R == nil {
		related.R = &userAssetR{
			UserAssetHashAssetTransferEvents: AssetTransferEventSlice{o},
		}
	} else {
		related.R.UserAssetHashAssetTransferEvents = append(related.R.UserAssetHashAssetTransferEvents, o)
	}

	return nil
}

// SetUserAsset of the assetTransferEvent to the related item.
// Sets o.R.UserAsset to related.
// Adds o to related.R.AssetTransferEvents.
func (o *AssetTransferEvent) SetUserAsset(exec boil.Executor, insert bool, related *UserAsset) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_asset_id"}),
		strmangle.WhereClause("\"", "\"", 2, assetTransferEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAssetID = related.ID
	if o.R == nil {
		o.R = &assetTransferEventR{
			UserAsset: related,
		}
	} else {
		o.R.UserAsset = related
	}

	if related.R == nil {
		related.R = &userAssetR{
			AssetTransferEvents: AssetTransferEventSlice{o},
		}
	} else {
		related.R.AssetTransferEvents = append(related.R.AssetTransferEvents, o)
	}

	return nil
}

// AssetTransferEvents retrieves all the records using an executor.
func AssetTransferEvents(mods ...qm.QueryMod) assetTransferEventQuery {
	mods = append(mods, qm.From("\"asset_transfer_events\""))
	return assetTransferEventQuery{NewQuery(mods...)}
}

// FindAssetTransferEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetTransferEvent(exec boil.Executor, iD int64, selectCols ...string) (*AssetTransferEvent, error) {
	assetTransferEventObj := &AssetTransferEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asset_transfer_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, assetTransferEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from asset_transfer_events")
	}

	if err = assetTransferEventObj.doAfterSelectHooks(exec); err != nil {
		return assetTransferEventObj, err
	}

	return assetTransferEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetTransferEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no asset_transfer_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetTransferEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetTransferEventInsertCacheMut.RLock()
	cache, cached := assetTransferEventInsertCache[key]
	assetTransferEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetTransferEventAllColumns,
			assetTransferEventColumnsWithDefault,
			assetTransferEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetTransferEventType, assetTransferEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetTransferEventType, assetTransferEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asset_transfer_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asset_transfer_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into asset_transfer_events")
	}

	if !cached {
		assetTransferEventInsertCacheMut.Lock()
		assetTransferEventInsertCache[key] = cache
		assetTransferEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the AssetTransferEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetTransferEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetTransferEventUpdateCacheMut.RLock()
	cache, cached := assetTransferEventUpdateCache[key]
	assetTransferEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetTransferEventAllColumns,
			assetTransferEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update asset_transfer_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asset_transfer_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assetTransferEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetTransferEventType, assetTransferEventMapping, append(wl, assetTransferEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update asset_transfer_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for asset_transfer_events")
	}

	if !cached {
		assetTransferEventUpdateCacheMut.Lock()
		assetTransferEventUpdateCache[key] = cache
		assetTransferEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetTransferEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for asset_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for asset_transfer_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetTransferEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asset_transfer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assetTransferEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in assetTransferEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all assetTransferEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetTransferEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no asset_transfer_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetTransferEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetTransferEventUpsertCacheMut.RLock()
	cache, cached := assetTransferEventUpsertCache[key]
	assetTransferEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetTransferEventAllColumns,
			assetTransferEventColumnsWithDefault,
			assetTransferEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assetTransferEventAllColumns,
			assetTransferEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert asset_transfer_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assetTransferEventPrimaryKeyColumns))
			copy(conflict, assetTransferEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asset_transfer_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assetTransferEventType, assetTransferEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetTransferEventType, assetTransferEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert asset_transfer_events")
	}

	if !cached {
		assetTransferEventUpsertCacheMut.Lock()
		assetTransferEventUpsertCache[key] = cache
		assetTransferEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single AssetTransferEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetTransferEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no AssetTransferEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetTransferEventPrimaryKeyMapping)
	sql := "DELETE FROM \"asset_transfer_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from asset_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for asset_transfer_events")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetTransferEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no assetTransferEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from asset_transfer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for asset_transfer_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetTransferEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assetTransferEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asset_transfer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetTransferEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from assetTransferEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for asset_transfer_events")
	}

	if len(assetTransferEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetTransferEvent) Reload(exec boil.Executor) error {
	ret, err := FindAssetTransferEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetTransferEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetTransferEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetTransferEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asset_transfer_events\".* FROM \"asset_transfer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetTransferEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in AssetTransferEventSlice")
	}

	*o = slice

	return nil
}

// AssetTransferEventExists checks if the AssetTransferEvent row exists.
func AssetTransferEventExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asset_transfer_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if asset_transfer_events exists")
	}

	return exists, nil
}
