// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountLedger is an object representing the database table.
type AccountLedger struct {
	AccountID null.String         `boiler:"account_id" boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	EntryID   null.String         `boiler:"entry_id" boil:"entry_id" json:"entry_id,omitempty" toml:"entry_id" yaml:"entry_id,omitempty"`
	Amount    decimal.NullDecimal `boiler:"amount" boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
}

var AccountLedgerColumns = struct {
	AccountID string
	EntryID   string
	Amount    string
}{
	AccountID: "account_id",
	EntryID:   "entry_id",
	Amount:    "amount",
}

var AccountLedgerTableColumns = struct {
	AccountID string
	EntryID   string
	Amount    string
}{
	AccountID: "account_ledgers.account_id",
	EntryID:   "account_ledgers.entry_id",
	Amount:    "account_ledgers.amount",
}

// Generated where

var AccountLedgerWhere = struct {
	AccountID whereHelpernull_String
	EntryID   whereHelpernull_String
	Amount    whereHelperdecimal_NullDecimal
}{
	AccountID: whereHelpernull_String{field: "\"account_ledgers\".\"account_id\""},
	EntryID:   whereHelpernull_String{field: "\"account_ledgers\".\"entry_id\""},
	Amount:    whereHelperdecimal_NullDecimal{field: "\"account_ledgers\".\"amount\""},
}

var (
	accountLedgerAllColumns            = []string{"account_id", "entry_id", "amount"}
	accountLedgerColumnsWithoutDefault = []string{}
	accountLedgerColumnsWithDefault    = []string{"account_id", "entry_id", "amount"}
	accountLedgerPrimaryKeyColumns     = []string{}
	accountLedgerGeneratedColumns      = []string{}
)

type (
	// AccountLedgerSlice is an alias for a slice of pointers to AccountLedger.
	// This should almost always be used instead of []AccountLedger.
	AccountLedgerSlice []*AccountLedger
	// AccountLedgerHook is the signature for custom AccountLedger hook methods
	AccountLedgerHook func(boil.Executor, *AccountLedger) error

	accountLedgerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountLedgerType           = reflect.TypeOf(&AccountLedger{})
	accountLedgerMapping        = queries.MakeStructMapping(accountLedgerType)
	accountLedgerInsertCacheMut sync.RWMutex
	accountLedgerInsertCache    = make(map[string]insertCache)
	accountLedgerUpdateCacheMut sync.RWMutex
	accountLedgerUpdateCache    = make(map[string]updateCache)
	accountLedgerUpsertCacheMut sync.RWMutex
	accountLedgerUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var accountLedgerAfterSelectHooks []AccountLedgerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountLedger) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range accountLedgerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountLedgerHook registers your hook function for all future operations.
func AddAccountLedgerHook(hookPoint boil.HookPoint, accountLedgerHook AccountLedgerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountLedgerAfterSelectHooks = append(accountLedgerAfterSelectHooks, accountLedgerHook)
	}
}

// One returns a single accountLedger record from the query.
func (q accountLedgerQuery) One(exec boil.Executor) (*AccountLedger, error) {
	o := &AccountLedger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for account_ledgers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountLedger records from the query.
func (q accountLedgerQuery) All(exec boil.Executor) (AccountLedgerSlice, error) {
	var o []*AccountLedger

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to AccountLedger slice")
	}

	if len(accountLedgerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountLedger records in the query.
func (q accountLedgerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count account_ledgers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountLedgerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if account_ledgers exists")
	}

	return count > 0, nil
}

// AccountLedgers retrieves all the records using an executor.
func AccountLedgers(mods ...qm.QueryMod) accountLedgerQuery {
	mods = append(mods, qm.From("\"account_ledgers\""))
	return accountLedgerQuery{NewQuery(mods...)}
}
