// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WhitelistedAddress is an object representing the database table.
type WhitelistedAddress struct {
	WalletAddress string `boiler:"wallet_address" boil:"wallet_address" json:"wallet_address" toml:"wallet_address" yaml:"wallet_address"`

	R *whitelistedAddressR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L whitelistedAddressL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WhitelistedAddressColumns = struct {
	WalletAddress string
}{
	WalletAddress: "wallet_address",
}

var WhitelistedAddressTableColumns = struct {
	WalletAddress string
}{
	WalletAddress: "whitelisted_addresses.wallet_address",
}

// Generated where

var WhitelistedAddressWhere = struct {
	WalletAddress whereHelperstring
}{
	WalletAddress: whereHelperstring{field: "\"whitelisted_addresses\".\"wallet_address\""},
}

// WhitelistedAddressRels is where relationship names are stored.
var WhitelistedAddressRels = struct {
}{}

// whitelistedAddressR is where relationships are stored.
type whitelistedAddressR struct {
}

// NewStruct creates a new relationship struct
func (*whitelistedAddressR) NewStruct() *whitelistedAddressR {
	return &whitelistedAddressR{}
}

// whitelistedAddressL is where Load methods for each relationship are stored.
type whitelistedAddressL struct{}

var (
	whitelistedAddressAllColumns            = []string{"wallet_address"}
	whitelistedAddressColumnsWithoutDefault = []string{"wallet_address"}
	whitelistedAddressColumnsWithDefault    = []string{}
	whitelistedAddressPrimaryKeyColumns     = []string{"wallet_address"}
	whitelistedAddressGeneratedColumns      = []string{}
)

type (
	// WhitelistedAddressSlice is an alias for a slice of pointers to WhitelistedAddress.
	// This should almost always be used instead of []WhitelistedAddress.
	WhitelistedAddressSlice []*WhitelistedAddress
	// WhitelistedAddressHook is the signature for custom WhitelistedAddress hook methods
	WhitelistedAddressHook func(boil.Executor, *WhitelistedAddress) error

	whitelistedAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	whitelistedAddressType                 = reflect.TypeOf(&WhitelistedAddress{})
	whitelistedAddressMapping              = queries.MakeStructMapping(whitelistedAddressType)
	whitelistedAddressPrimaryKeyMapping, _ = queries.BindMapping(whitelistedAddressType, whitelistedAddressMapping, whitelistedAddressPrimaryKeyColumns)
	whitelistedAddressInsertCacheMut       sync.RWMutex
	whitelistedAddressInsertCache          = make(map[string]insertCache)
	whitelistedAddressUpdateCacheMut       sync.RWMutex
	whitelistedAddressUpdateCache          = make(map[string]updateCache)
	whitelistedAddressUpsertCacheMut       sync.RWMutex
	whitelistedAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var whitelistedAddressAfterSelectHooks []WhitelistedAddressHook

var whitelistedAddressBeforeInsertHooks []WhitelistedAddressHook
var whitelistedAddressAfterInsertHooks []WhitelistedAddressHook

var whitelistedAddressBeforeUpdateHooks []WhitelistedAddressHook
var whitelistedAddressAfterUpdateHooks []WhitelistedAddressHook

var whitelistedAddressBeforeDeleteHooks []WhitelistedAddressHook
var whitelistedAddressAfterDeleteHooks []WhitelistedAddressHook

var whitelistedAddressBeforeUpsertHooks []WhitelistedAddressHook
var whitelistedAddressAfterUpsertHooks []WhitelistedAddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WhitelistedAddress) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WhitelistedAddress) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WhitelistedAddress) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WhitelistedAddress) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WhitelistedAddress) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WhitelistedAddress) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WhitelistedAddress) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WhitelistedAddress) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WhitelistedAddress) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range whitelistedAddressAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWhitelistedAddressHook registers your hook function for all future operations.
func AddWhitelistedAddressHook(hookPoint boil.HookPoint, whitelistedAddressHook WhitelistedAddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		whitelistedAddressAfterSelectHooks = append(whitelistedAddressAfterSelectHooks, whitelistedAddressHook)
	case boil.BeforeInsertHook:
		whitelistedAddressBeforeInsertHooks = append(whitelistedAddressBeforeInsertHooks, whitelistedAddressHook)
	case boil.AfterInsertHook:
		whitelistedAddressAfterInsertHooks = append(whitelistedAddressAfterInsertHooks, whitelistedAddressHook)
	case boil.BeforeUpdateHook:
		whitelistedAddressBeforeUpdateHooks = append(whitelistedAddressBeforeUpdateHooks, whitelistedAddressHook)
	case boil.AfterUpdateHook:
		whitelistedAddressAfterUpdateHooks = append(whitelistedAddressAfterUpdateHooks, whitelistedAddressHook)
	case boil.BeforeDeleteHook:
		whitelistedAddressBeforeDeleteHooks = append(whitelistedAddressBeforeDeleteHooks, whitelistedAddressHook)
	case boil.AfterDeleteHook:
		whitelistedAddressAfterDeleteHooks = append(whitelistedAddressAfterDeleteHooks, whitelistedAddressHook)
	case boil.BeforeUpsertHook:
		whitelistedAddressBeforeUpsertHooks = append(whitelistedAddressBeforeUpsertHooks, whitelistedAddressHook)
	case boil.AfterUpsertHook:
		whitelistedAddressAfterUpsertHooks = append(whitelistedAddressAfterUpsertHooks, whitelistedAddressHook)
	}
}

// One returns a single whitelistedAddress record from the query.
func (q whitelistedAddressQuery) One(exec boil.Executor) (*WhitelistedAddress, error) {
	o := &WhitelistedAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for whitelisted_addresses")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WhitelistedAddress records from the query.
func (q whitelistedAddressQuery) All(exec boil.Executor) (WhitelistedAddressSlice, error) {
	var o []*WhitelistedAddress

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to WhitelistedAddress slice")
	}

	if len(whitelistedAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WhitelistedAddress records in the query.
func (q whitelistedAddressQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count whitelisted_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q whitelistedAddressQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if whitelisted_addresses exists")
	}

	return count > 0, nil
}

// WhitelistedAddresses retrieves all the records using an executor.
func WhitelistedAddresses(mods ...qm.QueryMod) whitelistedAddressQuery {
	mods = append(mods, qm.From("\"whitelisted_addresses\""))
	return whitelistedAddressQuery{NewQuery(mods...)}
}

// FindWhitelistedAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWhitelistedAddress(exec boil.Executor, walletAddress string, selectCols ...string) (*WhitelistedAddress, error) {
	whitelistedAddressObj := &WhitelistedAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"whitelisted_addresses\" where \"wallet_address\"=$1", sel,
	)

	q := queries.Raw(query, walletAddress)

	err := q.Bind(nil, exec, whitelistedAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from whitelisted_addresses")
	}

	if err = whitelistedAddressObj.doAfterSelectHooks(exec); err != nil {
		return whitelistedAddressObj, err
	}

	return whitelistedAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WhitelistedAddress) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no whitelisted_addresses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(whitelistedAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	whitelistedAddressInsertCacheMut.RLock()
	cache, cached := whitelistedAddressInsertCache[key]
	whitelistedAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			whitelistedAddressAllColumns,
			whitelistedAddressColumnsWithDefault,
			whitelistedAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(whitelistedAddressType, whitelistedAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(whitelistedAddressType, whitelistedAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"whitelisted_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"whitelisted_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into whitelisted_addresses")
	}

	if !cached {
		whitelistedAddressInsertCacheMut.Lock()
		whitelistedAddressInsertCache[key] = cache
		whitelistedAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the WhitelistedAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WhitelistedAddress) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	whitelistedAddressUpdateCacheMut.RLock()
	cache, cached := whitelistedAddressUpdateCache[key]
	whitelistedAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			whitelistedAddressAllColumns,
			whitelistedAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update whitelisted_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"whitelisted_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, whitelistedAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(whitelistedAddressType, whitelistedAddressMapping, append(wl, whitelistedAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update whitelisted_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for whitelisted_addresses")
	}

	if !cached {
		whitelistedAddressUpdateCacheMut.Lock()
		whitelistedAddressUpdateCache[key] = cache
		whitelistedAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q whitelistedAddressQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for whitelisted_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for whitelisted_addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WhitelistedAddressSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), whitelistedAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"whitelisted_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, whitelistedAddressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in whitelistedAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all whitelistedAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WhitelistedAddress) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no whitelisted_addresses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(whitelistedAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	whitelistedAddressUpsertCacheMut.RLock()
	cache, cached := whitelistedAddressUpsertCache[key]
	whitelistedAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			whitelistedAddressAllColumns,
			whitelistedAddressColumnsWithDefault,
			whitelistedAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			whitelistedAddressAllColumns,
			whitelistedAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert whitelisted_addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(whitelistedAddressPrimaryKeyColumns))
			copy(conflict, whitelistedAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"whitelisted_addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(whitelistedAddressType, whitelistedAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(whitelistedAddressType, whitelistedAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert whitelisted_addresses")
	}

	if !cached {
		whitelistedAddressUpsertCacheMut.Lock()
		whitelistedAddressUpsertCache[key] = cache
		whitelistedAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single WhitelistedAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WhitelistedAddress) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no WhitelistedAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), whitelistedAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"whitelisted_addresses\" WHERE \"wallet_address\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from whitelisted_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for whitelisted_addresses")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q whitelistedAddressQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no whitelistedAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from whitelisted_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for whitelisted_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WhitelistedAddressSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(whitelistedAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), whitelistedAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"whitelisted_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, whitelistedAddressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from whitelistedAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for whitelisted_addresses")
	}

	if len(whitelistedAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WhitelistedAddress) Reload(exec boil.Executor) error {
	ret, err := FindWhitelistedAddress(exec, o.WalletAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WhitelistedAddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WhitelistedAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), whitelistedAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"whitelisted_addresses\".* FROM \"whitelisted_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, whitelistedAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in WhitelistedAddressSlice")
	}

	*o = slice

	return nil
}

// WhitelistedAddressExists checks if the WhitelistedAddress row exists.
func WhitelistedAddressExists(exec boil.Executor, walletAddress string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"whitelisted_addresses\" where \"wallet_address\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, walletAddress)
	}
	row := exec.QueryRow(sql, walletAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if whitelisted_addresses exists")
	}

	return exists, nil
}
