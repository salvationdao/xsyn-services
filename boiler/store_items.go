// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// StoreItem is an object representing the database table.
type StoreItem struct {
	ID               string     `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID     string     `boiler:"collection_id" boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	FactionID        string     `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	UsdCentCost      int        `boiler:"usd_cent_cost" boil:"usd_cent_cost" json:"usd_cent_cost" toml:"usd_cent_cost" yaml:"usd_cent_cost"`
	AmountSold       int        `boiler:"amount_sold" boil:"amount_sold" json:"amount_sold" toml:"amount_sold" yaml:"amount_sold"`
	AmountAvailable  int        `boiler:"amount_available" boil:"amount_available" json:"amount_available" toml:"amount_available" yaml:"amount_available"`
	RestrictionGroup string     `boiler:"restriction_group" boil:"restriction_group" json:"restriction_group" toml:"restriction_group" yaml:"restriction_group"`
	IsDefault        bool       `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	Tier             string     `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Data             types.JSON `boiler:"data" boil:"data" json:"data" toml:"data" yaml:"data"`
	DeletedAt        null.Time  `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	RefreshesAt      time.Time  `boiler:"refreshes_at" boil:"refreshes_at" json:"refreshes_at" toml:"refreshes_at" yaml:"refreshes_at"`
	UpdatedAt        time.Time  `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time  `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *storeItemR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeItemL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreItemColumns = struct {
	ID               string
	CollectionID     string
	FactionID        string
	UsdCentCost      string
	AmountSold       string
	AmountAvailable  string
	RestrictionGroup string
	IsDefault        string
	Tier             string
	Data             string
	DeletedAt        string
	RefreshesAt      string
	UpdatedAt        string
	CreatedAt        string
}{
	ID:               "id",
	CollectionID:     "collection_id",
	FactionID:        "faction_id",
	UsdCentCost:      "usd_cent_cost",
	AmountSold:       "amount_sold",
	AmountAvailable:  "amount_available",
	RestrictionGroup: "restriction_group",
	IsDefault:        "is_default",
	Tier:             "tier",
	Data:             "data",
	DeletedAt:        "deleted_at",
	RefreshesAt:      "refreshes_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
}

var StoreItemTableColumns = struct {
	ID               string
	CollectionID     string
	FactionID        string
	UsdCentCost      string
	AmountSold       string
	AmountAvailable  string
	RestrictionGroup string
	IsDefault        string
	Tier             string
	Data             string
	DeletedAt        string
	RefreshesAt      string
	UpdatedAt        string
	CreatedAt        string
}{
	ID:               "store_items.id",
	CollectionID:     "store_items.collection_id",
	FactionID:        "store_items.faction_id",
	UsdCentCost:      "store_items.usd_cent_cost",
	AmountSold:       "store_items.amount_sold",
	AmountAvailable:  "store_items.amount_available",
	RestrictionGroup: "store_items.restriction_group",
	IsDefault:        "store_items.is_default",
	Tier:             "store_items.tier",
	Data:             "store_items.data",
	DeletedAt:        "store_items.deleted_at",
	RefreshesAt:      "store_items.refreshes_at",
	UpdatedAt:        "store_items.updated_at",
	CreatedAt:        "store_items.created_at",
}

// Generated where

var StoreItemWhere = struct {
	ID               whereHelperstring
	CollectionID     whereHelperstring
	FactionID        whereHelperstring
	UsdCentCost      whereHelperint
	AmountSold       whereHelperint
	AmountAvailable  whereHelperint
	RestrictionGroup whereHelperstring
	IsDefault        whereHelperbool
	Tier             whereHelperstring
	Data             whereHelpertypes_JSON
	DeletedAt        whereHelpernull_Time
	RefreshesAt      whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
}{
	ID:               whereHelperstring{field: "\"store_items\".\"id\""},
	CollectionID:     whereHelperstring{field: "\"store_items\".\"collection_id\""},
	FactionID:        whereHelperstring{field: "\"store_items\".\"faction_id\""},
	UsdCentCost:      whereHelperint{field: "\"store_items\".\"usd_cent_cost\""},
	AmountSold:       whereHelperint{field: "\"store_items\".\"amount_sold\""},
	AmountAvailable:  whereHelperint{field: "\"store_items\".\"amount_available\""},
	RestrictionGroup: whereHelperstring{field: "\"store_items\".\"restriction_group\""},
	IsDefault:        whereHelperbool{field: "\"store_items\".\"is_default\""},
	Tier:             whereHelperstring{field: "\"store_items\".\"tier\""},
	Data:             whereHelpertypes_JSON{field: "\"store_items\".\"data\""},
	DeletedAt:        whereHelpernull_Time{field: "\"store_items\".\"deleted_at\""},
	RefreshesAt:      whereHelpertime_Time{field: "\"store_items\".\"refreshes_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"store_items\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"store_items\".\"created_at\""},
}

// StoreItemRels is where relationship names are stored.
var StoreItemRels = struct {
	Collection     string
	Faction        string
	PurchasedItems string
}{
	Collection:     "Collection",
	Faction:        "Faction",
	PurchasedItems: "PurchasedItems",
}

// storeItemR is where relationships are stored.
type storeItemR struct {
	Collection     *Collection        `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	Faction        *Faction           `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	PurchasedItems PurchasedItemSlice `boiler:"PurchasedItems" boil:"PurchasedItems" json:"PurchasedItems" toml:"PurchasedItems" yaml:"PurchasedItems"`
}

// NewStruct creates a new relationship struct
func (*storeItemR) NewStruct() *storeItemR {
	return &storeItemR{}
}

// storeItemL is where Load methods for each relationship are stored.
type storeItemL struct{}

var (
	storeItemAllColumns            = []string{"id", "collection_id", "faction_id", "usd_cent_cost", "amount_sold", "amount_available", "restriction_group", "is_default", "tier", "data", "deleted_at", "refreshes_at", "updated_at", "created_at"}
	storeItemColumnsWithoutDefault = []string{"collection_id", "faction_id", "usd_cent_cost", "amount_sold", "amount_available", "restriction_group", "is_default", "tier", "data", "deleted_at"}
	storeItemColumnsWithDefault    = []string{"id", "refreshes_at", "updated_at", "created_at"}
	storeItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// StoreItemSlice is an alias for a slice of pointers to StoreItem.
	// This should almost always be used instead of []StoreItem.
	StoreItemSlice []*StoreItem
	// StoreItemHook is the signature for custom StoreItem hook methods
	StoreItemHook func(boil.Executor, *StoreItem) error

	storeItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeItemType                 = reflect.TypeOf(&StoreItem{})
	storeItemMapping              = queries.MakeStructMapping(storeItemType)
	storeItemPrimaryKeyMapping, _ = queries.BindMapping(storeItemType, storeItemMapping, storeItemPrimaryKeyColumns)
	storeItemInsertCacheMut       sync.RWMutex
	storeItemInsertCache          = make(map[string]insertCache)
	storeItemUpdateCacheMut       sync.RWMutex
	storeItemUpdateCache          = make(map[string]updateCache)
	storeItemUpsertCacheMut       sync.RWMutex
	storeItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeItemBeforeInsertHooks []StoreItemHook
var storeItemBeforeUpdateHooks []StoreItemHook
var storeItemBeforeDeleteHooks []StoreItemHook
var storeItemBeforeUpsertHooks []StoreItemHook

var storeItemAfterInsertHooks []StoreItemHook
var storeItemAfterSelectHooks []StoreItemHook
var storeItemAfterUpdateHooks []StoreItemHook
var storeItemAfterDeleteHooks []StoreItemHook
var storeItemAfterUpsertHooks []StoreItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StoreItem) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StoreItem) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StoreItem) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StoreItem) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StoreItem) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StoreItem) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StoreItem) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StoreItem) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StoreItem) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeItemAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreItemHook registers your hook function for all future operations.
func AddStoreItemHook(hookPoint boil.HookPoint, storeItemHook StoreItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storeItemBeforeInsertHooks = append(storeItemBeforeInsertHooks, storeItemHook)
	case boil.BeforeUpdateHook:
		storeItemBeforeUpdateHooks = append(storeItemBeforeUpdateHooks, storeItemHook)
	case boil.BeforeDeleteHook:
		storeItemBeforeDeleteHooks = append(storeItemBeforeDeleteHooks, storeItemHook)
	case boil.BeforeUpsertHook:
		storeItemBeforeUpsertHooks = append(storeItemBeforeUpsertHooks, storeItemHook)
	case boil.AfterInsertHook:
		storeItemAfterInsertHooks = append(storeItemAfterInsertHooks, storeItemHook)
	case boil.AfterSelectHook:
		storeItemAfterSelectHooks = append(storeItemAfterSelectHooks, storeItemHook)
	case boil.AfterUpdateHook:
		storeItemAfterUpdateHooks = append(storeItemAfterUpdateHooks, storeItemHook)
	case boil.AfterDeleteHook:
		storeItemAfterDeleteHooks = append(storeItemAfterDeleteHooks, storeItemHook)
	case boil.AfterUpsertHook:
		storeItemAfterUpsertHooks = append(storeItemAfterUpsertHooks, storeItemHook)
	}
}

// One returns a single storeItem record from the query.
func (q storeItemQuery) One(exec boil.Executor) (*StoreItem, error) {
	o := &StoreItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for store_items")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StoreItem records from the query.
func (q storeItemQuery) All(exec boil.Executor) (StoreItemSlice, error) {
	var o []*StoreItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to StoreItem slice")
	}

	if len(storeItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StoreItem records in the query.
func (q storeItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count store_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if store_items exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *StoreItem) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *StoreItem) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// PurchasedItems retrieves all the purchased_item's PurchasedItems with an executor.
func (o *StoreItem) PurchasedItems(mods ...qm.QueryMod) purchasedItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"purchased_items\".\"store_item_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"purchased_items\".\"deleted_at\""),
	)

	query := PurchasedItems(queryMods...)
	queries.SetFrom(query.Query, "\"purchased_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"purchased_items\".*"})
	}

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeItemL) LoadCollection(e boil.Executor, singular bool, maybeStoreItem interface{}, mods queries.Applicator) error {
	var slice []*StoreItem
	var object *StoreItem

	if singular {
		object = maybeStoreItem.(*StoreItem)
	} else {
		slice = *maybeStoreItem.(*[]*StoreItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeItemR{}
		}
		args = append(args, object.CollectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeItemR{}
			}

			for _, a := range args {
				if a == obj.CollectionID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(storeItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.StoreItems = append(foreign.R.StoreItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.StoreItems = append(foreign.R.StoreItems, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeItemL) LoadFaction(e boil.Executor, singular bool, maybeStoreItem interface{}, mods queries.Applicator) error {
	var slice []*StoreItem
	var object *StoreItem

	if singular {
		object = maybeStoreItem.(*StoreItem)
	} else {
		slice = *maybeStoreItem.(*[]*StoreItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeItemR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeItemR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(storeItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.StoreItems = append(foreign.R.StoreItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.StoreItems = append(foreign.R.StoreItems, local)
				break
			}
		}
	}

	return nil
}

// LoadPurchasedItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeItemL) LoadPurchasedItems(e boil.Executor, singular bool, maybeStoreItem interface{}, mods queries.Applicator) error {
	var slice []*StoreItem
	var object *StoreItem

	if singular {
		object = maybeStoreItem.(*StoreItem)
	} else {
		slice = *maybeStoreItem.(*[]*StoreItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`purchased_items`),
		qm.WhereIn(`purchased_items.store_item_id in ?`, args...),
		qmhelper.WhereIsNull(`purchased_items.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load purchased_items")
	}

	var resultSlice []*PurchasedItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice purchased_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on purchased_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for purchased_items")
	}

	if len(purchasedItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchasedItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &purchasedItemR{}
			}
			foreign.R.StoreItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.StoreItemID) {
				local.R.PurchasedItems = append(local.R.PurchasedItems, foreign)
				if foreign.R == nil {
					foreign.R = &purchasedItemR{}
				}
				foreign.R.StoreItem = local
				break
			}
		}
	}

	return nil
}

// SetCollection of the storeItem to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.StoreItems.
func (o *StoreItem) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"store_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &storeItemR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			StoreItems: StoreItemSlice{o},
		}
	} else {
		related.R.StoreItems = append(related.R.StoreItems, o)
	}

	return nil
}

// SetFaction of the storeItem to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.StoreItems.
func (o *StoreItem) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"store_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &storeItemR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			StoreItems: StoreItemSlice{o},
		}
	} else {
		related.R.StoreItems = append(related.R.StoreItems, o)
	}

	return nil
}

// AddPurchasedItems adds the given related objects to the existing relationships
// of the store_item, optionally inserting them as new records.
// Appends related to o.R.PurchasedItems.
// Sets related.R.StoreItem appropriately.
func (o *StoreItem) AddPurchasedItems(exec boil.Executor, insert bool, related ...*PurchasedItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StoreItemID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"purchased_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"store_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, purchasedItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StoreItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &storeItemR{
			PurchasedItems: related,
		}
	} else {
		o.R.PurchasedItems = append(o.R.PurchasedItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &purchasedItemR{
				StoreItem: o,
			}
		} else {
			rel.R.StoreItem = o
		}
	}
	return nil
}

// SetPurchasedItems removes all previously related items of the
// store_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StoreItem's PurchasedItems accordingly.
// Replaces o.R.PurchasedItems with related.
// Sets related.R.StoreItem's PurchasedItems accordingly.
func (o *StoreItem) SetPurchasedItems(exec boil.Executor, insert bool, related ...*PurchasedItem) error {
	query := "update \"purchased_items\" set \"store_item_id\" = null where \"store_item_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PurchasedItems {
			queries.SetScanner(&rel.StoreItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.StoreItem = nil
		}

		o.R.PurchasedItems = nil
	}
	return o.AddPurchasedItems(exec, insert, related...)
}

// RemovePurchasedItems relationships from objects passed in.
// Removes related items from R.PurchasedItems (uses pointer comparison, removal does not keep order)
// Sets related.R.StoreItem.
func (o *StoreItem) RemovePurchasedItems(exec boil.Executor, related ...*PurchasedItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StoreItemID, nil)
		if rel.R != nil {
			rel.R.StoreItem = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("store_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PurchasedItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.PurchasedItems)
			if ln > 1 && i < ln-1 {
				o.R.PurchasedItems[i] = o.R.PurchasedItems[ln-1]
			}
			o.R.PurchasedItems = o.R.PurchasedItems[:ln-1]
			break
		}
	}

	return nil
}

// StoreItems retrieves all the records using an executor.
func StoreItems(mods ...qm.QueryMod) storeItemQuery {
	mods = append(mods, qm.From("\"store_items\""), qmhelper.WhereIsNull("\"store_items\".\"deleted_at\""))
	return storeItemQuery{NewQuery(mods...)}
}

// FindStoreItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreItem(exec boil.Executor, iD string, selectCols ...string) (*StoreItem, error) {
	storeItemObj := &StoreItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"store_items\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, storeItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from store_items")
	}

	if err = storeItemObj.doAfterSelectHooks(exec); err != nil {
		return storeItemObj, err
	}

	return storeItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no store_items provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeItemInsertCacheMut.RLock()
	cache, cached := storeItemInsertCache[key]
	storeItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeItemAllColumns,
			storeItemColumnsWithDefault,
			storeItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storeItemType, storeItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeItemType, storeItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"store_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"store_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into store_items")
	}

	if !cached {
		storeItemInsertCacheMut.Lock()
		storeItemInsertCache[key] = cache
		storeItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StoreItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeItemUpdateCacheMut.RLock()
	cache, cached := storeItemUpdateCache[key]
	storeItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeItemAllColumns,
			storeItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update store_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"store_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeItemType, storeItemMapping, append(wl, storeItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update store_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for store_items")
	}

	if !cached {
		storeItemUpdateCacheMut.Lock()
		storeItemUpdateCache[key] = cache
		storeItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storeItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for store_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for store_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"store_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in storeItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all storeItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no store_items provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeItemUpsertCacheMut.RLock()
	cache, cached := storeItemUpsertCache[key]
	storeItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeItemAllColumns,
			storeItemColumnsWithDefault,
			storeItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			storeItemAllColumns,
			storeItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert store_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storeItemPrimaryKeyColumns))
			copy(conflict, storeItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"store_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storeItemType, storeItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeItemType, storeItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert store_items")
	}

	if !cached {
		storeItemUpsertCacheMut.Lock()
		storeItemUpsertCache[key] = cache
		storeItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StoreItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreItem) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no StoreItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeItemPrimaryKeyMapping)
		sql = "DELETE FROM \"store_items\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"store_items\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(storeItemType, storeItemMapping, append(wl, storeItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from store_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for store_items")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeItemQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no storeItemQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from store_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for store_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreItemSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"store_items\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeItemPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"store_items\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, storeItemPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from storeItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for store_items")
	}

	if len(storeItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreItem) Reload(exec boil.Executor) error {
	ret, err := FindStoreItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"store_items\".* FROM \"store_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeItemPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in StoreItemSlice")
	}

	*o = slice

	return nil
}

// StoreItemExists checks if the StoreItem row exists.
func StoreItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"store_items\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if store_items exists")
	}

	return exists, nil
}
