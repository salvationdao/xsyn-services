// Code generated by SQLBoiler 4.8.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserAsset is an object representing the database table.
type UserAsset struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID     string      `boiler:"collection_id" boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	TokenID          int64       `boiler:"token_id" boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	Tier             string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Hash             string      `boiler:"hash" boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	OwnerID          string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Data             types.JSON  `boiler:"data" boil:"data" json:"data" toml:"data" yaml:"data"`
	Attributes       types.JSON  `boiler:"attributes" boil:"attributes" json:"attributes" toml:"attributes" yaml:"attributes"`
	Name             string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	ImageURL         null.String `boiler:"image_url" boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	ExternalURL      null.String `boiler:"external_url" boil:"external_url" json:"external_url,omitempty" toml:"external_url" yaml:"external_url,omitempty"`
	CardAnimationURL null.String `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url,omitempty" toml:"card_animation_url" yaml:"card_animation_url,omitempty"`
	AvatarURL        null.String `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	LargeImageURL    null.String `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url,omitempty" toml:"large_image_url" yaml:"large_image_url,omitempty"`
	Description      null.String `boiler:"description" boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	BackgroundColor  null.String `boiler:"background_color" boil:"background_color" json:"background_color,omitempty" toml:"background_color" yaml:"background_color,omitempty"`
	AnimationURL     null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	YoutubeURL       null.String `boiler:"youtube_url" boil:"youtube_url" json:"youtube_url,omitempty" toml:"youtube_url" yaml:"youtube_url,omitempty"`
	UnlockedAt       time.Time   `boiler:"unlocked_at" boil:"unlocked_at" json:"unlocked_at" toml:"unlocked_at" yaml:"unlocked_at"`
	MintedAt         null.Time   `boiler:"minted_at" boil:"minted_at" json:"minted_at,omitempty" toml:"minted_at" yaml:"minted_at,omitempty"`
	OnChainStatus    string      `boiler:"on_chain_status" boil:"on_chain_status" json:"on_chain_status" toml:"on_chain_status" yaml:"on_chain_status"`
	DeletedAt        null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	DataRefreshedAt  time.Time   `boiler:"data_refreshed_at" boil:"data_refreshed_at" json:"data_refreshed_at" toml:"data_refreshed_at" yaml:"data_refreshed_at"`
	UpdatedAt        time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LockedToService  null.String `boiler:"locked_to_service" boil:"locked_to_service" json:"locked_to_service,omitempty" toml:"locked_to_service" yaml:"locked_to_service,omitempty"`

	R *userAssetR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAssetL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAssetColumns = struct {
	ID               string
	CollectionID     string
	TokenID          string
	Tier             string
	Hash             string
	OwnerID          string
	Data             string
	Attributes       string
	Name             string
	ImageURL         string
	ExternalURL      string
	CardAnimationURL string
	AvatarURL        string
	LargeImageURL    string
	Description      string
	BackgroundColor  string
	AnimationURL     string
	YoutubeURL       string
	UnlockedAt       string
	MintedAt         string
	OnChainStatus    string
	DeletedAt        string
	DataRefreshedAt  string
	UpdatedAt        string
	CreatedAt        string
	LockedToService  string
}{
	ID:               "id",
	CollectionID:     "collection_id",
	TokenID:          "token_id",
	Tier:             "tier",
	Hash:             "hash",
	OwnerID:          "owner_id",
	Data:             "data",
	Attributes:       "attributes",
	Name:             "name",
	ImageURL:         "image_url",
	ExternalURL:      "external_url",
	CardAnimationURL: "card_animation_url",
	AvatarURL:        "avatar_url",
	LargeImageURL:    "large_image_url",
	Description:      "description",
	BackgroundColor:  "background_color",
	AnimationURL:     "animation_url",
	YoutubeURL:       "youtube_url",
	UnlockedAt:       "unlocked_at",
	MintedAt:         "minted_at",
	OnChainStatus:    "on_chain_status",
	DeletedAt:        "deleted_at",
	DataRefreshedAt:  "data_refreshed_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
	LockedToService:  "locked_to_service",
}

var UserAssetTableColumns = struct {
	ID               string
	CollectionID     string
	TokenID          string
	Tier             string
	Hash             string
	OwnerID          string
	Data             string
	Attributes       string
	Name             string
	ImageURL         string
	ExternalURL      string
	CardAnimationURL string
	AvatarURL        string
	LargeImageURL    string
	Description      string
	BackgroundColor  string
	AnimationURL     string
	YoutubeURL       string
	UnlockedAt       string
	MintedAt         string
	OnChainStatus    string
	DeletedAt        string
	DataRefreshedAt  string
	UpdatedAt        string
	CreatedAt        string
	LockedToService  string
}{
	ID:               "user_assets.id",
	CollectionID:     "user_assets.collection_id",
	TokenID:          "user_assets.token_id",
	Tier:             "user_assets.tier",
	Hash:             "user_assets.hash",
	OwnerID:          "user_assets.owner_id",
	Data:             "user_assets.data",
	Attributes:       "user_assets.attributes",
	Name:             "user_assets.name",
	ImageURL:         "user_assets.image_url",
	ExternalURL:      "user_assets.external_url",
	CardAnimationURL: "user_assets.card_animation_url",
	AvatarURL:        "user_assets.avatar_url",
	LargeImageURL:    "user_assets.large_image_url",
	Description:      "user_assets.description",
	BackgroundColor:  "user_assets.background_color",
	AnimationURL:     "user_assets.animation_url",
	YoutubeURL:       "user_assets.youtube_url",
	UnlockedAt:       "user_assets.unlocked_at",
	MintedAt:         "user_assets.minted_at",
	OnChainStatus:    "user_assets.on_chain_status",
	DeletedAt:        "user_assets.deleted_at",
	DataRefreshedAt:  "user_assets.data_refreshed_at",
	UpdatedAt:        "user_assets.updated_at",
	CreatedAt:        "user_assets.created_at",
	LockedToService:  "user_assets.locked_to_service",
}

// Generated where

var UserAssetWhere = struct {
	ID               whereHelperstring
	CollectionID     whereHelperstring
	TokenID          whereHelperint64
	Tier             whereHelperstring
	Hash             whereHelperstring
	OwnerID          whereHelperstring
	Data             whereHelpertypes_JSON
	Attributes       whereHelpertypes_JSON
	Name             whereHelperstring
	ImageURL         whereHelpernull_String
	ExternalURL      whereHelpernull_String
	CardAnimationURL whereHelpernull_String
	AvatarURL        whereHelpernull_String
	LargeImageURL    whereHelpernull_String
	Description      whereHelpernull_String
	BackgroundColor  whereHelpernull_String
	AnimationURL     whereHelpernull_String
	YoutubeURL       whereHelpernull_String
	UnlockedAt       whereHelpertime_Time
	MintedAt         whereHelpernull_Time
	OnChainStatus    whereHelperstring
	DeletedAt        whereHelpernull_Time
	DataRefreshedAt  whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	LockedToService  whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"user_assets\".\"id\""},
	CollectionID:     whereHelperstring{field: "\"user_assets\".\"collection_id\""},
	TokenID:          whereHelperint64{field: "\"user_assets\".\"token_id\""},
	Tier:             whereHelperstring{field: "\"user_assets\".\"tier\""},
	Hash:             whereHelperstring{field: "\"user_assets\".\"hash\""},
	OwnerID:          whereHelperstring{field: "\"user_assets\".\"owner_id\""},
	Data:             whereHelpertypes_JSON{field: "\"user_assets\".\"data\""},
	Attributes:       whereHelpertypes_JSON{field: "\"user_assets\".\"attributes\""},
	Name:             whereHelperstring{field: "\"user_assets\".\"name\""},
	ImageURL:         whereHelpernull_String{field: "\"user_assets\".\"image_url\""},
	ExternalURL:      whereHelpernull_String{field: "\"user_assets\".\"external_url\""},
	CardAnimationURL: whereHelpernull_String{field: "\"user_assets\".\"card_animation_url\""},
	AvatarURL:        whereHelpernull_String{field: "\"user_assets\".\"avatar_url\""},
	LargeImageURL:    whereHelpernull_String{field: "\"user_assets\".\"large_image_url\""},
	Description:      whereHelpernull_String{field: "\"user_assets\".\"description\""},
	BackgroundColor:  whereHelpernull_String{field: "\"user_assets\".\"background_color\""},
	AnimationURL:     whereHelpernull_String{field: "\"user_assets\".\"animation_url\""},
	YoutubeURL:       whereHelpernull_String{field: "\"user_assets\".\"youtube_url\""},
	UnlockedAt:       whereHelpertime_Time{field: "\"user_assets\".\"unlocked_at\""},
	MintedAt:         whereHelpernull_Time{field: "\"user_assets\".\"minted_at\""},
	OnChainStatus:    whereHelperstring{field: "\"user_assets\".\"on_chain_status\""},
	DeletedAt:        whereHelpernull_Time{field: "\"user_assets\".\"deleted_at\""},
	DataRefreshedAt:  whereHelpertime_Time{field: "\"user_assets\".\"data_refreshed_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"user_assets\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"user_assets\".\"created_at\""},
	LockedToService:  whereHelpernull_String{field: "\"user_assets\".\"locked_to_service\""},
}

// UserAssetRels is where relationship names are stored.
var UserAssetRels = struct {
	Collection                 string
	LockedToServiceUser        string
	Owner                      string
	AssetServiceTransferEvents string
}{
	Collection:                 "Collection",
	LockedToServiceUser:        "LockedToServiceUser",
	Owner:                      "Owner",
	AssetServiceTransferEvents: "AssetServiceTransferEvents",
}

// userAssetR is where relationships are stored.
type userAssetR struct {
	Collection                 *Collection                    `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	LockedToServiceUser        *User                          `boiler:"LockedToServiceUser" boil:"LockedToServiceUser" json:"LockedToServiceUser" toml:"LockedToServiceUser" yaml:"LockedToServiceUser"`
	Owner                      *User                          `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	AssetServiceTransferEvents AssetServiceTransferEventSlice `boiler:"AssetServiceTransferEvents" boil:"AssetServiceTransferEvents" json:"AssetServiceTransferEvents" toml:"AssetServiceTransferEvents" yaml:"AssetServiceTransferEvents"`
}

// NewStruct creates a new relationship struct
func (*userAssetR) NewStruct() *userAssetR {
	return &userAssetR{}
}

// userAssetL is where Load methods for each relationship are stored.
type userAssetL struct{}

var (
	userAssetAllColumns            = []string{"id", "collection_id", "token_id", "tier", "hash", "owner_id", "data", "attributes", "name", "image_url", "external_url", "card_animation_url", "avatar_url", "large_image_url", "description", "background_color", "animation_url", "youtube_url", "unlocked_at", "minted_at", "on_chain_status", "deleted_at", "data_refreshed_at", "updated_at", "created_at", "locked_to_service"}
	userAssetColumnsWithoutDefault = []string{"collection_id", "token_id", "tier", "hash", "owner_id", "name", "image_url", "external_url", "card_animation_url", "avatar_url", "large_image_url", "description", "background_color", "animation_url", "youtube_url", "minted_at", "deleted_at", "locked_to_service"}
	userAssetColumnsWithDefault    = []string{"id", "data", "attributes", "unlocked_at", "on_chain_status", "data_refreshed_at", "updated_at", "created_at"}
	userAssetPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserAssetSlice is an alias for a slice of pointers to UserAsset.
	// This should almost always be used instead of []UserAsset.
	UserAssetSlice []*UserAsset
	// UserAssetHook is the signature for custom UserAsset hook methods
	UserAssetHook func(boil.Executor, *UserAsset) error

	userAssetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAssetType                 = reflect.TypeOf(&UserAsset{})
	userAssetMapping              = queries.MakeStructMapping(userAssetType)
	userAssetPrimaryKeyMapping, _ = queries.BindMapping(userAssetType, userAssetMapping, userAssetPrimaryKeyColumns)
	userAssetInsertCacheMut       sync.RWMutex
	userAssetInsertCache          = make(map[string]insertCache)
	userAssetUpdateCacheMut       sync.RWMutex
	userAssetUpdateCache          = make(map[string]updateCache)
	userAssetUpsertCacheMut       sync.RWMutex
	userAssetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAssetBeforeInsertHooks []UserAssetHook
var userAssetBeforeUpdateHooks []UserAssetHook
var userAssetBeforeDeleteHooks []UserAssetHook
var userAssetBeforeUpsertHooks []UserAssetHook

var userAssetAfterInsertHooks []UserAssetHook
var userAssetAfterSelectHooks []UserAssetHook
var userAssetAfterUpdateHooks []UserAssetHook
var userAssetAfterDeleteHooks []UserAssetHook
var userAssetAfterUpsertHooks []UserAssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAsset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAsset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAsset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAsset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAsset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAsset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAsset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAsset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAsset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAssetHook registers your hook function for all future operations.
func AddUserAssetHook(hookPoint boil.HookPoint, userAssetHook UserAssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userAssetBeforeInsertHooks = append(userAssetBeforeInsertHooks, userAssetHook)
	case boil.BeforeUpdateHook:
		userAssetBeforeUpdateHooks = append(userAssetBeforeUpdateHooks, userAssetHook)
	case boil.BeforeDeleteHook:
		userAssetBeforeDeleteHooks = append(userAssetBeforeDeleteHooks, userAssetHook)
	case boil.BeforeUpsertHook:
		userAssetBeforeUpsertHooks = append(userAssetBeforeUpsertHooks, userAssetHook)
	case boil.AfterInsertHook:
		userAssetAfterInsertHooks = append(userAssetAfterInsertHooks, userAssetHook)
	case boil.AfterSelectHook:
		userAssetAfterSelectHooks = append(userAssetAfterSelectHooks, userAssetHook)
	case boil.AfterUpdateHook:
		userAssetAfterUpdateHooks = append(userAssetAfterUpdateHooks, userAssetHook)
	case boil.AfterDeleteHook:
		userAssetAfterDeleteHooks = append(userAssetAfterDeleteHooks, userAssetHook)
	case boil.AfterUpsertHook:
		userAssetAfterUpsertHooks = append(userAssetAfterUpsertHooks, userAssetHook)
	}
}

// One returns a single userAsset record from the query.
func (q userAssetQuery) One(exec boil.Executor) (*UserAsset, error) {
	o := &UserAsset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_assets")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAsset records from the query.
func (q userAssetQuery) All(exec boil.Executor) (UserAssetSlice, error) {
	var o []*UserAsset

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserAsset slice")
	}

	if len(userAssetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAsset records in the query.
func (q userAssetQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_assets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAssetQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_assets exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *UserAsset) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// LockedToServiceUser pointed to by the foreign key.
func (o *UserAsset) LockedToServiceUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LockedToService),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *UserAsset) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// AssetServiceTransferEvents retrieves all the asset_service_transfer_event's AssetServiceTransferEvents with an executor.
func (o *UserAsset) AssetServiceTransferEvents(mods ...qm.QueryMod) assetServiceTransferEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"asset_service_transfer_events\".\"user_asset_id\"=?", o.ID),
	)

	query := AssetServiceTransferEvents(queryMods...)
	queries.SetFrom(query.Query, "\"asset_service_transfer_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"asset_service_transfer_events\".*"})
	}

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssetL) LoadCollection(e boil.Executor, singular bool, maybeUserAsset interface{}, mods queries.Applicator) error {
	var slice []*UserAsset
	var object *UserAsset

	if singular {
		object = maybeUserAsset.(*UserAsset)
	} else {
		slice = *maybeUserAsset.(*[]*UserAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssetR{}
		}
		args = append(args, object.CollectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssetR{}
			}

			for _, a := range args {
				if a == obj.CollectionID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(userAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.UserAssets = append(foreign.R.UserAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.UserAssets = append(foreign.R.UserAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadLockedToServiceUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssetL) LoadLockedToServiceUser(e boil.Executor, singular bool, maybeUserAsset interface{}, mods queries.Applicator) error {
	var slice []*UserAsset
	var object *UserAsset

	if singular {
		object = maybeUserAsset.(*UserAsset)
	} else {
		slice = *maybeUserAsset.(*[]*UserAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssetR{}
		}
		if !queries.IsNil(object.LockedToService) {
			args = append(args, object.LockedToService)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LockedToService) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LockedToService) {
				args = append(args, obj.LockedToService)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LockedToServiceUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.LockedToServiceUserAssets = append(foreign.R.LockedToServiceUserAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LockedToService, foreign.ID) {
				local.R.LockedToServiceUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LockedToServiceUserAssets = append(foreign.R.LockedToServiceUserAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssetL) LoadOwner(e boil.Executor, singular bool, maybeUserAsset interface{}, mods queries.Applicator) error {
	var slice []*UserAsset
	var object *UserAsset

	if singular {
		object = maybeUserAsset.(*UserAsset)
	} else {
		slice = *maybeUserAsset.(*[]*UserAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssetR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssetR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerUserAssets = append(foreign.R.OwnerUserAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerUserAssets = append(foreign.R.OwnerUserAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadAssetServiceTransferEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userAssetL) LoadAssetServiceTransferEvents(e boil.Executor, singular bool, maybeUserAsset interface{}, mods queries.Applicator) error {
	var slice []*UserAsset
	var object *UserAsset

	if singular {
		object = maybeUserAsset.(*UserAsset)
	} else {
		slice = *maybeUserAsset.(*[]*UserAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`asset_service_transfer_events`),
		qm.WhereIn(`asset_service_transfer_events.user_asset_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load asset_service_transfer_events")
	}

	var resultSlice []*AssetServiceTransferEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice asset_service_transfer_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on asset_service_transfer_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset_service_transfer_events")
	}

	if len(assetServiceTransferEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetServiceTransferEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assetServiceTransferEventR{}
			}
			foreign.R.UserAsset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserAssetID {
				local.R.AssetServiceTransferEvents = append(local.R.AssetServiceTransferEvents, foreign)
				if foreign.R == nil {
					foreign.R = &assetServiceTransferEventR{}
				}
				foreign.R.UserAsset = local
				break
			}
		}
	}

	return nil
}

// SetCollection of the userAsset to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.UserAssets.
func (o *UserAsset) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &userAssetR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			UserAssets: UserAssetSlice{o},
		}
	} else {
		related.R.UserAssets = append(related.R.UserAssets, o)
	}

	return nil
}

// SetLockedToServiceUser of the userAsset to the related item.
// Sets o.R.LockedToServiceUser to related.
// Adds o to related.R.LockedToServiceUserAssets.
func (o *UserAsset) SetLockedToServiceUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"locked_to_service"}),
		strmangle.WhereClause("\"", "\"", 2, userAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LockedToService, related.ID)
	if o.R == nil {
		o.R = &userAssetR{
			LockedToServiceUser: related,
		}
	} else {
		o.R.LockedToServiceUser = related
	}

	if related.R == nil {
		related.R = &userR{
			LockedToServiceUserAssets: UserAssetSlice{o},
		}
	} else {
		related.R.LockedToServiceUserAssets = append(related.R.LockedToServiceUserAssets, o)
	}

	return nil
}

// RemoveLockedToServiceUser relationship.
// Sets o.R.LockedToServiceUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserAsset) RemoveLockedToServiceUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.LockedToService, nil)
	if _, err = o.Update(exec, boil.Whitelist("locked_to_service")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LockedToServiceUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LockedToServiceUserAssets {
		if queries.Equal(o.LockedToService, ri.LockedToService) {
			continue
		}

		ln := len(related.R.LockedToServiceUserAssets)
		if ln > 1 && i < ln-1 {
			related.R.LockedToServiceUserAssets[i] = related.R.LockedToServiceUserAssets[ln-1]
		}
		related.R.LockedToServiceUserAssets = related.R.LockedToServiceUserAssets[:ln-1]
		break
	}
	return nil
}

// SetOwner of the userAsset to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerUserAssets.
func (o *UserAsset) SetOwner(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &userAssetR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerUserAssets: UserAssetSlice{o},
		}
	} else {
		related.R.OwnerUserAssets = append(related.R.OwnerUserAssets, o)
	}

	return nil
}

// AddAssetServiceTransferEvents adds the given related objects to the existing relationships
// of the user_asset, optionally inserting them as new records.
// Appends related to o.R.AssetServiceTransferEvents.
// Sets related.R.UserAsset appropriately.
func (o *UserAsset) AddAssetServiceTransferEvents(exec boil.Executor, insert bool, related ...*AssetServiceTransferEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserAssetID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"asset_service_transfer_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_asset_id"}),
				strmangle.WhereClause("\"", "\"", 2, assetServiceTransferEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserAssetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userAssetR{
			AssetServiceTransferEvents: related,
		}
	} else {
		o.R.AssetServiceTransferEvents = append(o.R.AssetServiceTransferEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetServiceTransferEventR{
				UserAsset: o,
			}
		} else {
			rel.R.UserAsset = o
		}
	}
	return nil
}

// UserAssets retrieves all the records using an executor.
func UserAssets(mods ...qm.QueryMod) userAssetQuery {
	mods = append(mods, qm.From("\"user_assets\""), qmhelper.WhereIsNull("\"user_assets\".\"deleted_at\""))
	return userAssetQuery{NewQuery(mods...)}
}

// FindUserAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAsset(exec boil.Executor, iD string, selectCols ...string) (*UserAsset, error) {
	userAssetObj := &UserAsset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_assets\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userAssetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_assets")
	}

	if err = userAssetObj.doAfterSelectHooks(exec); err != nil {
		return userAssetObj, err
	}

	return userAssetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAsset) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_assets provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAssetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAssetInsertCacheMut.RLock()
	cache, cached := userAssetInsertCache[key]
	userAssetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAssetAllColumns,
			userAssetColumnsWithDefault,
			userAssetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAssetType, userAssetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAssetType, userAssetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_assets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_assets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_assets")
	}

	if !cached {
		userAssetInsertCacheMut.Lock()
		userAssetInsertCache[key] = cache
		userAssetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserAsset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAsset) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAssetUpdateCacheMut.RLock()
	cache, cached := userAssetUpdateCache[key]
	userAssetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAssetAllColumns,
			userAssetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_assets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_assets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAssetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAssetType, userAssetMapping, append(wl, userAssetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_assets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_assets")
	}

	if !cached {
		userAssetUpdateCacheMut.Lock()
		userAssetUpdateCache[key] = cache
		userAssetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAssetQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_assets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAssetSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAssetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userAsset")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAsset) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_assets provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAssetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAssetUpsertCacheMut.RLock()
	cache, cached := userAssetUpsertCache[key]
	userAssetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAssetAllColumns,
			userAssetColumnsWithDefault,
			userAssetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAssetAllColumns,
			userAssetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_assets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAssetPrimaryKeyColumns))
			copy(conflict, userAssetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_assets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAssetType, userAssetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAssetType, userAssetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert user_assets")
	}

	if !cached {
		userAssetUpsertCacheMut.Lock()
		userAssetUpsertCache[key] = cache
		userAssetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserAsset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAsset) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserAsset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAssetPrimaryKeyMapping)
		sql = "DELETE FROM \"user_assets\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_assets\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(userAssetType, userAssetMapping, append(wl, userAssetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_assets")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAssetQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userAssetQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_assets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAssetSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAssetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"user_assets\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAssetPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_assets\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, userAssetPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_assets")
	}

	if len(userAssetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAsset) Reload(exec boil.Executor) error {
	ret, err := FindUserAsset(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAssetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_assets\".* FROM \"user_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAssetPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserAssetSlice")
	}

	*o = slice

	return nil
}

// UserAssetExists checks if the UserAsset row exists.
func UserAssetExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_assets\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_assets exists")
	}

	return exists, nil
}
