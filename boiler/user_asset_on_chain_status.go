// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAssetOnChainStatus is an object representing the database table.
type UserAssetOnChainStatus struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	AssetHash     string    `boiler:"asset_hash" boil:"asset_hash" json:"asset_hash" toml:"asset_hash" yaml:"asset_hash"`
	CollectionID  string    `boiler:"collection_id" boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	OnChainStatus string    `boiler:"on_chain_status" boil:"on_chain_status" json:"on_chain_status" toml:"on_chain_status" yaml:"on_chain_status"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userAssetOnChainStatusR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAssetOnChainStatusL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAssetOnChainStatusColumns = struct {
	ID            string
	AssetHash     string
	CollectionID  string
	OnChainStatus string
	UpdatedAt     string
}{
	ID:            "id",
	AssetHash:     "asset_hash",
	CollectionID:  "collection_id",
	OnChainStatus: "on_chain_status",
	UpdatedAt:     "updated_at",
}

var UserAssetOnChainStatusTableColumns = struct {
	ID            string
	AssetHash     string
	CollectionID  string
	OnChainStatus string
	UpdatedAt     string
}{
	ID:            "user_asset_on_chain_status.id",
	AssetHash:     "user_asset_on_chain_status.asset_hash",
	CollectionID:  "user_asset_on_chain_status.collection_id",
	OnChainStatus: "user_asset_on_chain_status.on_chain_status",
	UpdatedAt:     "user_asset_on_chain_status.updated_at",
}

// Generated where

var UserAssetOnChainStatusWhere = struct {
	ID            whereHelperstring
	AssetHash     whereHelperstring
	CollectionID  whereHelperstring
	OnChainStatus whereHelperstring
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"user_asset_on_chain_status\".\"id\""},
	AssetHash:     whereHelperstring{field: "\"user_asset_on_chain_status\".\"asset_hash\""},
	CollectionID:  whereHelperstring{field: "\"user_asset_on_chain_status\".\"collection_id\""},
	OnChainStatus: whereHelperstring{field: "\"user_asset_on_chain_status\".\"on_chain_status\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"user_asset_on_chain_status\".\"updated_at\""},
}

// UserAssetOnChainStatusRels is where relationship names are stored.
var UserAssetOnChainStatusRels = struct {
	AssetHashUserAsset string
	Collection         string
}{
	AssetHashUserAsset: "AssetHashUserAsset",
	Collection:         "Collection",
}

// userAssetOnChainStatusR is where relationships are stored.
type userAssetOnChainStatusR struct {
	AssetHashUserAsset *UserAsset  `boiler:"AssetHashUserAsset" boil:"AssetHashUserAsset" json:"AssetHashUserAsset" toml:"AssetHashUserAsset" yaml:"AssetHashUserAsset"`
	Collection         *Collection `boiler:"Collection" boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
}

// NewStruct creates a new relationship struct
func (*userAssetOnChainStatusR) NewStruct() *userAssetOnChainStatusR {
	return &userAssetOnChainStatusR{}
}

// userAssetOnChainStatusL is where Load methods for each relationship are stored.
type userAssetOnChainStatusL struct{}

var (
	userAssetOnChainStatusAllColumns            = []string{"id", "asset_hash", "collection_id", "on_chain_status", "updated_at"}
	userAssetOnChainStatusColumnsWithoutDefault = []string{"asset_hash", "collection_id"}
	userAssetOnChainStatusColumnsWithDefault    = []string{"id", "on_chain_status", "updated_at"}
	userAssetOnChainStatusPrimaryKeyColumns     = []string{"id"}
	userAssetOnChainStatusGeneratedColumns      = []string{}
)

type (
	// UserAssetOnChainStatusSlice is an alias for a slice of pointers to UserAssetOnChainStatus.
	// This should almost always be used instead of []UserAssetOnChainStatus.
	UserAssetOnChainStatusSlice []*UserAssetOnChainStatus
	// UserAssetOnChainStatusHook is the signature for custom UserAssetOnChainStatus hook methods
	UserAssetOnChainStatusHook func(boil.Executor, *UserAssetOnChainStatus) error

	userAssetOnChainStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAssetOnChainStatusType                 = reflect.TypeOf(&UserAssetOnChainStatus{})
	userAssetOnChainStatusMapping              = queries.MakeStructMapping(userAssetOnChainStatusType)
	userAssetOnChainStatusPrimaryKeyMapping, _ = queries.BindMapping(userAssetOnChainStatusType, userAssetOnChainStatusMapping, userAssetOnChainStatusPrimaryKeyColumns)
	userAssetOnChainStatusInsertCacheMut       sync.RWMutex
	userAssetOnChainStatusInsertCache          = make(map[string]insertCache)
	userAssetOnChainStatusUpdateCacheMut       sync.RWMutex
	userAssetOnChainStatusUpdateCache          = make(map[string]updateCache)
	userAssetOnChainStatusUpsertCacheMut       sync.RWMutex
	userAssetOnChainStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAssetOnChainStatusAfterSelectHooks []UserAssetOnChainStatusHook

var userAssetOnChainStatusBeforeInsertHooks []UserAssetOnChainStatusHook
var userAssetOnChainStatusAfterInsertHooks []UserAssetOnChainStatusHook

var userAssetOnChainStatusBeforeUpdateHooks []UserAssetOnChainStatusHook
var userAssetOnChainStatusAfterUpdateHooks []UserAssetOnChainStatusHook

var userAssetOnChainStatusBeforeDeleteHooks []UserAssetOnChainStatusHook
var userAssetOnChainStatusAfterDeleteHooks []UserAssetOnChainStatusHook

var userAssetOnChainStatusBeforeUpsertHooks []UserAssetOnChainStatusHook
var userAssetOnChainStatusAfterUpsertHooks []UserAssetOnChainStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAssetOnChainStatus) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAssetOnChainStatus) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAssetOnChainStatus) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAssetOnChainStatus) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAssetOnChainStatus) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAssetOnChainStatus) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAssetOnChainStatus) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAssetOnChainStatus) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAssetOnChainStatus) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAssetOnChainStatusAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAssetOnChainStatusHook registers your hook function for all future operations.
func AddUserAssetOnChainStatusHook(hookPoint boil.HookPoint, userAssetOnChainStatusHook UserAssetOnChainStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAssetOnChainStatusAfterSelectHooks = append(userAssetOnChainStatusAfterSelectHooks, userAssetOnChainStatusHook)
	case boil.BeforeInsertHook:
		userAssetOnChainStatusBeforeInsertHooks = append(userAssetOnChainStatusBeforeInsertHooks, userAssetOnChainStatusHook)
	case boil.AfterInsertHook:
		userAssetOnChainStatusAfterInsertHooks = append(userAssetOnChainStatusAfterInsertHooks, userAssetOnChainStatusHook)
	case boil.BeforeUpdateHook:
		userAssetOnChainStatusBeforeUpdateHooks = append(userAssetOnChainStatusBeforeUpdateHooks, userAssetOnChainStatusHook)
	case boil.AfterUpdateHook:
		userAssetOnChainStatusAfterUpdateHooks = append(userAssetOnChainStatusAfterUpdateHooks, userAssetOnChainStatusHook)
	case boil.BeforeDeleteHook:
		userAssetOnChainStatusBeforeDeleteHooks = append(userAssetOnChainStatusBeforeDeleteHooks, userAssetOnChainStatusHook)
	case boil.AfterDeleteHook:
		userAssetOnChainStatusAfterDeleteHooks = append(userAssetOnChainStatusAfterDeleteHooks, userAssetOnChainStatusHook)
	case boil.BeforeUpsertHook:
		userAssetOnChainStatusBeforeUpsertHooks = append(userAssetOnChainStatusBeforeUpsertHooks, userAssetOnChainStatusHook)
	case boil.AfterUpsertHook:
		userAssetOnChainStatusAfterUpsertHooks = append(userAssetOnChainStatusAfterUpsertHooks, userAssetOnChainStatusHook)
	}
}

// One returns a single userAssetOnChainStatus record from the query.
func (q userAssetOnChainStatusQuery) One(exec boil.Executor) (*UserAssetOnChainStatus, error) {
	o := &UserAssetOnChainStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_asset_on_chain_status")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAssetOnChainStatus records from the query.
func (q userAssetOnChainStatusQuery) All(exec boil.Executor) (UserAssetOnChainStatusSlice, error) {
	var o []*UserAssetOnChainStatus

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserAssetOnChainStatus slice")
	}

	if len(userAssetOnChainStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAssetOnChainStatus records in the query.
func (q userAssetOnChainStatusQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_asset_on_chain_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAssetOnChainStatusQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_asset_on_chain_status exists")
	}

	return count > 0, nil
}

// AssetHashUserAsset pointed to by the foreign key.
func (o *UserAssetOnChainStatus) AssetHashUserAsset(mods ...qm.QueryMod) userAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"hash\" = ?", o.AssetHash),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := UserAssets(queryMods...)
	queries.SetFrom(query.Query, "\"user_assets\"")

	return query
}

// Collection pointed to by the foreign key.
func (o *UserAssetOnChainStatus) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// LoadAssetHashUserAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssetOnChainStatusL) LoadAssetHashUserAsset(e boil.Executor, singular bool, maybeUserAssetOnChainStatus interface{}, mods queries.Applicator) error {
	var slice []*UserAssetOnChainStatus
	var object *UserAssetOnChainStatus

	if singular {
		object = maybeUserAssetOnChainStatus.(*UserAssetOnChainStatus)
	} else {
		slice = *maybeUserAssetOnChainStatus.(*[]*UserAssetOnChainStatus)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssetOnChainStatusR{}
		}
		args = append(args, object.AssetHash)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssetOnChainStatusR{}
			}

			for _, a := range args {
				if a == obj.AssetHash {
					continue Outer
				}
			}

			args = append(args, obj.AssetHash)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_assets`),
		qm.WhereIn(`user_assets.hash in ?`, args...),
		qmhelper.WhereIsNull(`user_assets.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAsset")
	}

	var resultSlice []*UserAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAsset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_assets")
	}

	if len(userAssetOnChainStatusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssetHashUserAsset = foreign
		if foreign.R == nil {
			foreign.R = &userAssetR{}
		}
		foreign.R.AssetHashUserAssetOnChainStatuses = append(foreign.R.AssetHashUserAssetOnChainStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssetHash == foreign.Hash {
				local.R.AssetHashUserAsset = foreign
				if foreign.R == nil {
					foreign.R = &userAssetR{}
				}
				foreign.R.AssetHashUserAssetOnChainStatuses = append(foreign.R.AssetHashUserAssetOnChainStatuses, local)
				break
			}
		}
	}

	return nil
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAssetOnChainStatusL) LoadCollection(e boil.Executor, singular bool, maybeUserAssetOnChainStatus interface{}, mods queries.Applicator) error {
	var slice []*UserAssetOnChainStatus
	var object *UserAssetOnChainStatus

	if singular {
		object = maybeUserAssetOnChainStatus.(*UserAssetOnChainStatus)
	} else {
		slice = *maybeUserAssetOnChainStatus.(*[]*UserAssetOnChainStatus)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAssetOnChainStatusR{}
		}
		args = append(args, object.CollectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAssetOnChainStatusR{}
			}

			for _, a := range args {
				if a == obj.CollectionID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
		qmhelper.WhereIsNull(`collections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(userAssetOnChainStatusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.UserAssetOnChainStatuses = append(foreign.R.UserAssetOnChainStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.UserAssetOnChainStatuses = append(foreign.R.UserAssetOnChainStatuses, local)
				break
			}
		}
	}

	return nil
}

// SetAssetHashUserAsset of the userAssetOnChainStatus to the related item.
// Sets o.R.AssetHashUserAsset to related.
// Adds o to related.R.AssetHashUserAssetOnChainStatuses.
func (o *UserAssetOnChainStatus) SetAssetHashUserAsset(exec boil.Executor, insert bool, related *UserAsset) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_asset_on_chain_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asset_hash"}),
		strmangle.WhereClause("\"", "\"", 2, userAssetOnChainStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssetHash = related.Hash
	if o.R == nil {
		o.R = &userAssetOnChainStatusR{
			AssetHashUserAsset: related,
		}
	} else {
		o.R.AssetHashUserAsset = related
	}

	if related.R == nil {
		related.R = &userAssetR{
			AssetHashUserAssetOnChainStatuses: UserAssetOnChainStatusSlice{o},
		}
	} else {
		related.R.AssetHashUserAssetOnChainStatuses = append(related.R.AssetHashUserAssetOnChainStatuses, o)
	}

	return nil
}

// SetCollection of the userAssetOnChainStatus to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.UserAssetOnChainStatuses.
func (o *UserAssetOnChainStatus) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_asset_on_chain_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAssetOnChainStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &userAssetOnChainStatusR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			UserAssetOnChainStatuses: UserAssetOnChainStatusSlice{o},
		}
	} else {
		related.R.UserAssetOnChainStatuses = append(related.R.UserAssetOnChainStatuses, o)
	}

	return nil
}

// UserAssetOnChainStatuses retrieves all the records using an executor.
func UserAssetOnChainStatuses(mods ...qm.QueryMod) userAssetOnChainStatusQuery {
	mods = append(mods, qm.From("\"user_asset_on_chain_status\""))
	return userAssetOnChainStatusQuery{NewQuery(mods...)}
}

// FindUserAssetOnChainStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAssetOnChainStatus(exec boil.Executor, iD string, selectCols ...string) (*UserAssetOnChainStatus, error) {
	userAssetOnChainStatusObj := &UserAssetOnChainStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_asset_on_chain_status\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userAssetOnChainStatusObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_asset_on_chain_status")
	}

	if err = userAssetOnChainStatusObj.doAfterSelectHooks(exec); err != nil {
		return userAssetOnChainStatusObj, err
	}

	return userAssetOnChainStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAssetOnChainStatus) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_asset_on_chain_status provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAssetOnChainStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAssetOnChainStatusInsertCacheMut.RLock()
	cache, cached := userAssetOnChainStatusInsertCache[key]
	userAssetOnChainStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAssetOnChainStatusAllColumns,
			userAssetOnChainStatusColumnsWithDefault,
			userAssetOnChainStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAssetOnChainStatusType, userAssetOnChainStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAssetOnChainStatusType, userAssetOnChainStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_asset_on_chain_status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_asset_on_chain_status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_asset_on_chain_status")
	}

	if !cached {
		userAssetOnChainStatusInsertCacheMut.Lock()
		userAssetOnChainStatusInsertCache[key] = cache
		userAssetOnChainStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserAssetOnChainStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAssetOnChainStatus) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAssetOnChainStatusUpdateCacheMut.RLock()
	cache, cached := userAssetOnChainStatusUpdateCache[key]
	userAssetOnChainStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAssetOnChainStatusAllColumns,
			userAssetOnChainStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_asset_on_chain_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_asset_on_chain_status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAssetOnChainStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAssetOnChainStatusType, userAssetOnChainStatusMapping, append(wl, userAssetOnChainStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_asset_on_chain_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_asset_on_chain_status")
	}

	if !cached {
		userAssetOnChainStatusUpdateCacheMut.Lock()
		userAssetOnChainStatusUpdateCache[key] = cache
		userAssetOnChainStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAssetOnChainStatusQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_asset_on_chain_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_asset_on_chain_status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAssetOnChainStatusSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetOnChainStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_asset_on_chain_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAssetOnChainStatusPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userAssetOnChainStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userAssetOnChainStatus")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAssetOnChainStatus) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_asset_on_chain_status provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAssetOnChainStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAssetOnChainStatusUpsertCacheMut.RLock()
	cache, cached := userAssetOnChainStatusUpsertCache[key]
	userAssetOnChainStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAssetOnChainStatusAllColumns,
			userAssetOnChainStatusColumnsWithDefault,
			userAssetOnChainStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAssetOnChainStatusAllColumns,
			userAssetOnChainStatusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_asset_on_chain_status, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAssetOnChainStatusPrimaryKeyColumns))
			copy(conflict, userAssetOnChainStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_asset_on_chain_status\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAssetOnChainStatusType, userAssetOnChainStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAssetOnChainStatusType, userAssetOnChainStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert user_asset_on_chain_status")
	}

	if !cached {
		userAssetOnChainStatusUpsertCacheMut.Lock()
		userAssetOnChainStatusUpsertCache[key] = cache
		userAssetOnChainStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserAssetOnChainStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAssetOnChainStatus) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserAssetOnChainStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAssetOnChainStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"user_asset_on_chain_status\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_asset_on_chain_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_asset_on_chain_status")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAssetOnChainStatusQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userAssetOnChainStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_asset_on_chain_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_asset_on_chain_status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAssetOnChainStatusSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAssetOnChainStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetOnChainStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_asset_on_chain_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAssetOnChainStatusPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userAssetOnChainStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_asset_on_chain_status")
	}

	if len(userAssetOnChainStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAssetOnChainStatus) Reload(exec boil.Executor) error {
	ret, err := FindUserAssetOnChainStatus(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAssetOnChainStatusSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAssetOnChainStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAssetOnChainStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_asset_on_chain_status\".* FROM \"user_asset_on_chain_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAssetOnChainStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserAssetOnChainStatusSlice")
	}

	*o = slice

	return nil
}

// UserAssetOnChainStatusExists checks if the UserAssetOnChainStatus row exists.
func UserAssetOnChainStatusExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_asset_on_chain_status\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_asset_on_chain_status exists")
	}

	return exists, nil
}
